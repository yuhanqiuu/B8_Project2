0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 28 10:17:08 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _LCDprint
0000             29            public _LCD_4BIT
0000             30            public _WriteCommand
0000             31            public _WriteData
0000             32            public _LCD_byte
0000             33            public _LCD_pulse
0000             34            public _SendATCommand
0000             35            public _waitms_or_RI1
0000             36            public _RXU1
0000             37            public _getstr1
0000             38            public _getchar1_with_timeout
0000             39            public _getchar1
0000             40            public _sendstr1
0000             41            public _putchar1
0000             42            public _UART1_Init
0000             43            public _Volts_at_Pin
0000             44            public _Get_ADC
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _waitms
0000             48            public _Timer2_ISR
0000             49            public _TIMER2_Init
0000             50            public _TIMER0_Init
0000             51            public _Timer3us
0000             52            public _InitADC
0000             53            public __c51_external_startup
0000             54            public _LCDprint_PARM_3
0000             55            public _buff
0000             56            public _LCDprint_PARM_2
0000             57   ;--------------------------------------------------------
0000             58   ; Special Function Registers
0000             59   ;--------------------------------------------------------
0000             60   _ACC            DATA 0xe0
0000             61   _ADC0ASAH       DATA 0xb6
0000             62   _ADC0ASAL       DATA 0xb5
0000             63   _ADC0ASCF       DATA 0xa1
0000             64   _ADC0ASCT       DATA 0xc7
0000             65   _ADC0CF0        DATA 0xbc
0000             66   _ADC0CF1        DATA 0xb9
0000             67   _ADC0CF2        DATA 0xdf
0000             68   _ADC0CN0        DATA 0xe8
0000             69   _ADC0CN1        DATA 0xb2
0000             70   _ADC0CN2        DATA 0xb3
0000             71   _ADC0GTH        DATA 0xc4
0000             72   _ADC0GTL        DATA 0xc3
0000             73   _ADC0H          DATA 0xbe
0000             74   _ADC0L          DATA 0xbd
0000             75   _ADC0LTH        DATA 0xc6
0000             76   _ADC0LTL        DATA 0xc5
0000             77   _ADC0MX         DATA 0xbb
0000             78   _B              DATA 0xf0
0000             79   _CKCON0         DATA 0x8e
0000             80   _CKCON1         DATA 0xa6
0000             81   _CLEN0          DATA 0xc6
0000             82   _CLIE0          DATA 0xc7
0000             83   _CLIF0          DATA 0xe8
0000             84   _CLKSEL         DATA 0xa9
0000             85   _CLOUT0         DATA 0xd1
0000             86   _CLU0CF         DATA 0xb1
0000             87   _CLU0FN         DATA 0xaf
0000             88   _CLU0MX         DATA 0x84
0000             89   _CLU1CF         DATA 0xb3
0000             90   _CLU1FN         DATA 0xb2
0000             91   _CLU1MX         DATA 0x85
0000             92   _CLU2CF         DATA 0xb6
0000             93   _CLU2FN         DATA 0xb5
0000             94   _CLU2MX         DATA 0x91
0000             95   _CLU3CF         DATA 0xbf
0000             96   _CLU3FN         DATA 0xbe
0000             97   _CLU3MX         DATA 0xae
0000             98   _CMP0CN0        DATA 0x9b
0000             99   _CMP0CN1        DATA 0x99
0000            100   _CMP0MD         DATA 0x9d
0000            101   _CMP0MX         DATA 0x9f
0000            102   _CMP1CN0        DATA 0xbf
0000            103   _CMP1CN1        DATA 0xac
0000            104   _CMP1MD         DATA 0xab
0000            105   _CMP1MX         DATA 0xaa
0000            106   _CRC0CN0        DATA 0xce
0000            107   _CRC0CN1        DATA 0x86
0000            108   _CRC0CNT        DATA 0xd3
0000            109   _CRC0DAT        DATA 0xcb
0000            110   _CRC0FLIP       DATA 0xcf
0000            111   _CRC0IN         DATA 0xca
0000            112   _CRC0ST         DATA 0xd2
0000            113   _DAC0CF0        DATA 0x91
0000            114   _DAC0CF1        DATA 0x92
0000            115   _DAC0H          DATA 0x85
0000            116   _DAC0L          DATA 0x84
0000            117   _DAC1CF0        DATA 0x93
0000            118   _DAC1CF1        DATA 0x94
0000            119   _DAC1H          DATA 0x8a
0000            120   _DAC1L          DATA 0x89
0000            121   _DAC2CF0        DATA 0x95
0000            122   _DAC2CF1        DATA 0x96
0000            123   _DAC2H          DATA 0x8c
0000            124   _DAC2L          DATA 0x8b
0000            125   _DAC3CF0        DATA 0x9a
0000            126   _DAC3CF1        DATA 0x9c
0000            127   _DAC3H          DATA 0x8e
0000            128   _DAC3L          DATA 0x8d
0000            129   _DACGCF0        DATA 0x88
0000            130   _DACGCF1        DATA 0x98
0000            131   _DACGCF2        DATA 0xa2
0000            132   _DERIVID        DATA 0xad
0000            133   _DEVICEID       DATA 0xb5
0000            134   _DPH            DATA 0x83
0000            135   _DPL            DATA 0x82
0000            136   _EIE1           DATA 0xe6
0000            137   _EIE2           DATA 0xf3
0000            138   _EIP1           DATA 0xbb
0000            139   _EIP1H          DATA 0xee
0000            140   _EIP2           DATA 0xed
0000            141   _EIP2H          DATA 0xf6
0000            142   _EMI0CN         DATA 0xe7
0000            143   _FLKEY          DATA 0xb7
0000            144   _HFO0CAL        DATA 0xc7
0000            145   _HFO1CAL        DATA 0xd6
0000            146   _HFOCN          DATA 0xef
0000            147   _I2C0ADM        DATA 0xff
0000            148   _I2C0CN0        DATA 0xba
0000            149   _I2C0DIN        DATA 0xbc
0000            150   _I2C0DOUT       DATA 0xbb
0000            151   _I2C0FCN0       DATA 0xad
0000            152   _I2C0FCN1       DATA 0xab
0000            153   _I2C0FCT        DATA 0xf5
0000            154   _I2C0SLAD       DATA 0xbd
0000            155   _I2C0STAT       DATA 0xb9
0000            156   _IE             DATA 0xa8
0000            157   _IP             DATA 0xb8
0000            158   _IPH            DATA 0xf2
0000            159   _IT01CF         DATA 0xe4
0000            160   _LFO0CN         DATA 0xb1
0000            161   _P0             DATA 0x80
0000            162   _P0MASK         DATA 0xfe
0000            163   _P0MAT          DATA 0xfd
0000            164   _P0MDIN         DATA 0xf1
0000            165   _P0MDOUT        DATA 0xa4
0000            166   _P0SKIP         DATA 0xd4
0000            167   _P1             DATA 0x90
0000            168   _P1MASK         DATA 0xee
0000            169   _P1MAT          DATA 0xed
0000            170   _P1MDIN         DATA 0xf2
0000            171   _P1MDOUT        DATA 0xa5
0000            172   _P1SKIP         DATA 0xd5
0000            173   _P2             DATA 0xa0
0000            174   _P2MASK         DATA 0xfc
0000            175   _P2MAT          DATA 0xfb
0000            176   _P2MDIN         DATA 0xf3
0000            177   _P2MDOUT        DATA 0xa6
0000            178   _P2SKIP         DATA 0xcc
0000            179   _P3             DATA 0xb0
0000            180   _P3MDIN         DATA 0xf4
0000            181   _P3MDOUT        DATA 0x9c
0000            182   _PCA0CENT       DATA 0x9e
0000            183   _PCA0CLR        DATA 0x9c
0000            184   _PCA0CN0        DATA 0xd8
0000            185   _PCA0CPH0       DATA 0xfc
0000            186   _PCA0CPH1       DATA 0xea
0000            187   _PCA0CPH2       DATA 0xec
0000            188   _PCA0CPH3       DATA 0xf5
0000            189   _PCA0CPH4       DATA 0x85
0000            190   _PCA0CPH5       DATA 0xde
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPL1       DATA 0xe9
0000            193   _PCA0CPL2       DATA 0xeb
0000            194   _PCA0CPL3       DATA 0xf4
0000            195   _PCA0CPL4       DATA 0x84
0000            196   _PCA0CPL5       DATA 0xdd
0000            197   _PCA0CPM0       DATA 0xda
0000            198   _PCA0CPM1       DATA 0xdb
0000            199   _PCA0CPM2       DATA 0xdc
0000            200   _PCA0CPM3       DATA 0xae
0000            201   _PCA0CPM4       DATA 0xaf
0000            202   _PCA0CPM5       DATA 0xcc
0000            203   _PCA0H          DATA 0xfa
0000            204   _PCA0L          DATA 0xf9
0000            205   _PCA0MD         DATA 0xd9
0000            206   _PCA0POL        DATA 0x96
0000            207   _PCA0PWM        DATA 0xf7
0000            208   _PCON0          DATA 0x87
0000            209   _PCON1          DATA 0xcd
0000            210   _PFE0CN         DATA 0xc1
0000            211   _PRTDRV         DATA 0xf6
0000            212   _PSCTL          DATA 0x8f
0000            213   _PSTAT0         DATA 0xaa
0000            214   _PSW            DATA 0xd0
0000            215   _REF0CN         DATA 0xd1
0000            216   _REG0CN         DATA 0xc9
0000            217   _REVID          DATA 0xb6
0000            218   _RSTSRC         DATA 0xef
0000            219   _SBCON1         DATA 0x94
0000            220   _SBRLH1         DATA 0x96
0000            221   _SBRLL1         DATA 0x95
0000            222   _SBUF           DATA 0x99
0000            223   _SBUF0          DATA 0x99
0000            224   _SBUF1          DATA 0x92
0000            225   _SCON           DATA 0x98
0000            226   _SCON0          DATA 0x98
0000            227   _SCON1          DATA 0xc8
0000            228   _SFRPAGE        DATA 0xa7
0000            229   _SFRPGCN        DATA 0xbc
0000            230   _SFRSTACK       DATA 0xd7
0000            231   _SMB0ADM        DATA 0xd6
0000            232   _SMB0ADR        DATA 0xd7
0000            233   _SMB0CF         DATA 0xc1
0000            234   _SMB0CN0        DATA 0xc0
0000            235   _SMB0DAT        DATA 0xc2
0000            236   _SMB0FCN0       DATA 0xc3
0000            237   _SMB0FCN1       DATA 0xc4
0000            238   _SMB0FCT        DATA 0xef
0000            239   _SMB0RXLN       DATA 0xc5
0000            240   _SMB0TC         DATA 0xac
0000            241   _SMOD1          DATA 0x93
0000            242   _SP             DATA 0x81
0000            243   _SPI0CFG        DATA 0xa1
0000            244   _SPI0CKR        DATA 0xa2
0000            245   _SPI0CN0        DATA 0xf8
0000            246   _SPI0DAT        DATA 0xa3
0000            247   _SPI0FCN0       DATA 0x9a
0000            248   _SPI0FCN1       DATA 0x9b
0000            249   _SPI0FCT        DATA 0xf7
0000            250   _SPI0PCF        DATA 0xdf
0000            251   _TCON           DATA 0x88
0000            252   _TH0            DATA 0x8c
0000            253   _TH1            DATA 0x8d
0000            254   _TL0            DATA 0x8a
0000            255   _TL1            DATA 0x8b
0000            256   _TMOD           DATA 0x89
0000            257   _TMR2CN0        DATA 0xc8
0000            258   _TMR2CN1        DATA 0xfd
0000            259   _TMR2H          DATA 0xcf
0000            260   _TMR2L          DATA 0xce
0000            261   _TMR2RLH        DATA 0xcb
0000            262   _TMR2RLL        DATA 0xca
0000            263   _TMR3CN0        DATA 0x91
0000            264   _TMR3CN1        DATA 0xfe
0000            265   _TMR3H          DATA 0x95
0000            266   _TMR3L          DATA 0x94
0000            267   _TMR3RLH        DATA 0x93
0000            268   _TMR3RLL        DATA 0x92
0000            269   _TMR4CN0        DATA 0x98
0000            270   _TMR4CN1        DATA 0xff
0000            271   _TMR4H          DATA 0xa5
0000            272   _TMR4L          DATA 0xa4
0000            273   _TMR4RLH        DATA 0xa3
0000            274   _TMR4RLL        DATA 0xa2
0000            275   _TMR5CN0        DATA 0xc0
0000            276   _TMR5CN1        DATA 0xf1
0000            277   _TMR5H          DATA 0xd5
0000            278   _TMR5L          DATA 0xd4
0000            279   _TMR5RLH        DATA 0xd3
0000            280   _TMR5RLL        DATA 0xd2
0000            281   _UART0PCF       DATA 0xd9
0000            282   _UART1FCN0      DATA 0x9d
0000            283   _UART1FCN1      DATA 0xd8
0000            284   _UART1FCT       DATA 0xfa
0000            285   _UART1LIN       DATA 0x9e
0000            286   _UART1PCF       DATA 0xda
0000            287   _VDM0CN         DATA 0xff
0000            288   _WDTCN          DATA 0x97
0000            289   _XBR0           DATA 0xe1
0000            290   _XBR1           DATA 0xe2
0000            291   _XBR2           DATA 0xe3
0000            292   _XOSC0CN        DATA 0x86
0000            293   _DPTR           DATA 0x8382
0000            294   _TMR2RL         DATA 0xcbca
0000            295   _TMR3RL         DATA 0x9392
0000            296   _TMR4RL         DATA 0xa3a2
0000            297   _TMR5RL         DATA 0xd3d2
0000            298   _TMR0           DATA 0x8c8a
0000            299   _TMR1           DATA 0x8d8b
0000            300   _TMR2           DATA 0xcfce
0000            301   _TMR3           DATA 0x9594
0000            302   _TMR4           DATA 0xa5a4
0000            303   _TMR5           DATA 0xd5d4
0000            304   _SBRL1          DATA 0x9695
0000            305   _PCA0           DATA 0xfaf9
0000            306   _PCA0CP0        DATA 0xfcfb
0000            307   _PCA0CP1        DATA 0xeae9
0000            308   _PCA0CP2        DATA 0xeceb
0000            309   _PCA0CP3        DATA 0xf5f4
0000            310   _PCA0CP4        DATA 0x8584
0000            311   _PCA0CP5        DATA 0xdedd
0000            312   _ADC0ASA        DATA 0xb6b5
0000            313   _ADC0GT         DATA 0xc4c3
0000            314   _ADC0           DATA 0xbebd
0000            315   _ADC0LT         DATA 0xc6c5
0000            316   _DAC0           DATA 0x8584
0000            317   _DAC1           DATA 0x8a89
0000            318   _DAC2           DATA 0x8c8b
0000            319   _DAC3           DATA 0x8e8d
0000            320   ;--------------------------------------------------------
0000            321   ; special function bits
0000            322   ;--------------------------------------------------------
0000            323   _ACC_0          BIT 0xe0
0000            324   _ACC_1          BIT 0xe1
0000            325   _ACC_2          BIT 0xe2
0000            326   _ACC_3          BIT 0xe3
0000            327   _ACC_4          BIT 0xe4
0000            328   _ACC_5          BIT 0xe5
0000            329   _ACC_6          BIT 0xe6
0000            330   _ACC_7          BIT 0xe7
0000            331   _TEMPE          BIT 0xe8
0000            332   _ADGN0          BIT 0xe9
0000            333   _ADGN1          BIT 0xea
0000            334   _ADWINT         BIT 0xeb
0000            335   _ADBUSY         BIT 0xec
0000            336   _ADINT          BIT 0xed
0000            337   _IPOEN          BIT 0xee
0000            338   _ADEN           BIT 0xef
0000            339   _B_0            BIT 0xf0
0000            340   _B_1            BIT 0xf1
0000            341   _B_2            BIT 0xf2
0000            342   _B_3            BIT 0xf3
0000            343   _B_4            BIT 0xf4
0000            344   _B_5            BIT 0xf5
0000            345   _B_6            BIT 0xf6
0000            346   _B_7            BIT 0xf7
0000            347   _C0FIF          BIT 0xe8
0000            348   _C0RIF          BIT 0xe9
0000            349   _C1FIF          BIT 0xea
0000            350   _C1RIF          BIT 0xeb
0000            351   _C2FIF          BIT 0xec
0000            352   _C2RIF          BIT 0xed
0000            353   _C3FIF          BIT 0xee
0000            354   _C3RIF          BIT 0xef
0000            355   _D1SRC0         BIT 0x88
0000            356   _D1SRC1         BIT 0x89
0000            357   _D1AMEN         BIT 0x8a
0000            358   _D01REFSL       BIT 0x8b
0000            359   _D3SRC0         BIT 0x8c
0000            360   _D3SRC1         BIT 0x8d
0000            361   _D3AMEN         BIT 0x8e
0000            362   _D23REFSL       BIT 0x8f
0000            363   _D0UDIS         BIT 0x98
0000            364   _D1UDIS         BIT 0x99
0000            365   _D2UDIS         BIT 0x9a
0000            366   _D3UDIS         BIT 0x9b
0000            367   _EX0            BIT 0xa8
0000            368   _ET0            BIT 0xa9
0000            369   _EX1            BIT 0xaa
0000            370   _ET1            BIT 0xab
0000            371   _ES0            BIT 0xac
0000            372   _ET2            BIT 0xad
0000            373   _ESPI0          BIT 0xae
0000            374   _EA             BIT 0xaf
0000            375   _PX0            BIT 0xb8
0000            376   _PT0            BIT 0xb9
0000            377   _PX1            BIT 0xba
0000            378   _PT1            BIT 0xbb
0000            379   _PS0            BIT 0xbc
0000            380   _PT2            BIT 0xbd
0000            381   _PSPI0          BIT 0xbe
0000            382   _P0_0           BIT 0x80
0000            383   _P0_1           BIT 0x81
0000            384   _P0_2           BIT 0x82
0000            385   _P0_3           BIT 0x83
0000            386   _P0_4           BIT 0x84
0000            387   _P0_5           BIT 0x85
0000            388   _P0_6           BIT 0x86
0000            389   _P0_7           BIT 0x87
0000            390   _P1_0           BIT 0x90
0000            391   _P1_1           BIT 0x91
0000            392   _P1_2           BIT 0x92
0000            393   _P1_3           BIT 0x93
0000            394   _P1_4           BIT 0x94
0000            395   _P1_5           BIT 0x95
0000            396   _P1_6           BIT 0x96
0000            397   _P1_7           BIT 0x97
0000            398   _P2_0           BIT 0xa0
0000            399   _P2_1           BIT 0xa1
0000            400   _P2_2           BIT 0xa2
0000            401   _P2_3           BIT 0xa3
0000            402   _P2_4           BIT 0xa4
0000            403   _P2_5           BIT 0xa5
0000            404   _P2_6           BIT 0xa6
0000            405   _P3_0           BIT 0xb0
0000            406   _P3_1           BIT 0xb1
0000            407   _P3_2           BIT 0xb2
0000            408   _P3_3           BIT 0xb3
0000            409   _P3_4           BIT 0xb4
0000            410   _P3_7           BIT 0xb7
0000            411   _CCF0           BIT 0xd8
0000            412   _CCF1           BIT 0xd9
0000            413   _CCF2           BIT 0xda
0000            414   _CCF3           BIT 0xdb
0000            415   _CCF4           BIT 0xdc
0000            416   _CCF5           BIT 0xdd
0000            417   _CR             BIT 0xde
0000            418   _CF             BIT 0xdf
0000            419   _PARITY         BIT 0xd0
0000            420   _F1             BIT 0xd1
0000            421   _OV             BIT 0xd2
0000            422   _RS0            BIT 0xd3
0000            423   _RS1            BIT 0xd4
0000            424   _F0             BIT 0xd5
0000            425   _AC             BIT 0xd6
0000            426   _CY             BIT 0xd7
0000            427   _RI             BIT 0x98
0000            428   _TI             BIT 0x99
0000            429   _RB8            BIT 0x9a
0000            430   _TB8            BIT 0x9b
0000            431   _REN            BIT 0x9c
0000            432   _CE             BIT 0x9d
0000            433   _SMODE          BIT 0x9e
0000            434   _RI1            BIT 0xc8
0000            435   _TI1            BIT 0xc9
0000            436   _RBX1           BIT 0xca
0000            437   _TBX1           BIT 0xcb
0000            438   _REN1           BIT 0xcc
0000            439   _PERR1          BIT 0xcd
0000            440   _OVR1           BIT 0xce
0000            441   _SI             BIT 0xc0
0000            442   _ACK            BIT 0xc1
0000            443   _ARBLOST        BIT 0xc2
0000            444   _ACKRQ          BIT 0xc3
0000            445   _STO            BIT 0xc4
0000            446   _STA            BIT 0xc5
0000            447   _TXMODE         BIT 0xc6
0000            448   _MASTER         BIT 0xc7
0000            449   _SPIEN          BIT 0xf8
0000            450   _TXNF           BIT 0xf9
0000            451   _NSSMD0         BIT 0xfa
0000            452   _NSSMD1         BIT 0xfb
0000            453   _RXOVRN         BIT 0xfc
0000            454   _MODF           BIT 0xfd
0000            455   _WCOL           BIT 0xfe
0000            456   _SPIF           BIT 0xff
0000            457   _IT0            BIT 0x88
0000            458   _IE0            BIT 0x89
0000            459   _IT1            BIT 0x8a
0000            460   _IE1            BIT 0x8b
0000            461   _TR0            BIT 0x8c
0000            462   _TF0            BIT 0x8d
0000            463   _TR1            BIT 0x8e
0000            464   _TF1            BIT 0x8f
0000            465   _T2XCLK0        BIT 0xc8
0000            466   _T2XCLK1        BIT 0xc9
0000            467   _TR2            BIT 0xca
0000            468   _T2SPLIT        BIT 0xcb
0000            469   _TF2CEN         BIT 0xcc
0000            470   _TF2LEN         BIT 0xcd
0000            471   _TF2L           BIT 0xce
0000            472   _TF2H           BIT 0xcf
0000            473   _T4XCLK0        BIT 0x98
0000            474   _T4XCLK1        BIT 0x99
0000            475   _TR4            BIT 0x9a
0000            476   _T4SPLIT        BIT 0x9b
0000            477   _TF4CEN         BIT 0x9c
0000            478   _TF4LEN         BIT 0x9d
0000            479   _TF4L           BIT 0x9e
0000            480   _TF4H           BIT 0x9f
0000            481   _T5XCLK0        BIT 0xc0
0000            482   _T5XCLK1        BIT 0xc1
0000            483   _TR5            BIT 0xc2
0000            484   _T5SPLIT        BIT 0xc3
0000            485   _TF5CEN         BIT 0xc4
0000            486   _TF5LEN         BIT 0xc5
0000            487   _TF5L           BIT 0xc6
0000            488   _TF5H           BIT 0xc7
0000            489   _RIE            BIT 0xd8
0000            490   _RXTO0          BIT 0xd9
0000            491   _RXTO1          BIT 0xda
0000            492   _RFRQ           BIT 0xdb
0000            493   _TIE            BIT 0xdc
0000            494   _TXHOLD         BIT 0xdd
0000            495   _TXNF1          BIT 0xde
0000            496   _TFRQ           BIT 0xdf
0000            497   ;--------------------------------------------------------
0000            498   ; overlayable register banks
0000            499   ;--------------------------------------------------------
0000            500            rbank0 segment data overlay
0000            501   ;--------------------------------------------------------
0000            502   ; internal ram data
0000            503   ;--------------------------------------------------------
0000            504            rseg R_DSEG
0000            505   _LCDprint_PARM_2:
0000            506            ds 1
0001            507   _main_volt_x_1_145:
0001            508            ds 2
0003            509   ;--------------------------------------------------------
0003            510   ; overlayable items in internal ram 
0003            511   ;--------------------------------------------------------
0000            512            rseg    R_OSEG
0000            513            rseg    R_OSEG
0000            514   _InitPinADC_PARM_2:
0000            515            ds 1
0001            516            rseg    R_OSEG
0001            517            rseg    R_OSEG
0001            518            rseg    R_OSEG
0001            519   ;--------------------------------------------------------
0001            520   ; indirectly addressable internal ram data
0001            521   ;--------------------------------------------------------
0000            522            rseg R_ISEG
0000            523   _buff:
0000            524            ds 20
0014            525   ;--------------------------------------------------------
0014            526   ; absolute internal ram data
0014            527   ;--------------------------------------------------------
0000            528            DSEG
0000            529   ;--------------------------------------------------------
0000            530   ; bit data
0000            531   ;--------------------------------------------------------
0000            532            rseg R_BSEG
0000            533   _LCDprint_PARM_3:
0000            534            DBIT    1
0001            535   ;--------------------------------------------------------
0001            536   ; paged external ram data
0001            537   ;--------------------------------------------------------
0000            538            rseg R_PSEG
0000            539   ;--------------------------------------------------------
0000            540   ; external ram data
0000            541   ;--------------------------------------------------------
0000            542            rseg R_XSEG
0000            543   ;--------------------------------------------------------
0000            544   ; absolute external ram data
0000            545   ;--------------------------------------------------------
0000            546            XSEG
0000            547   ;--------------------------------------------------------
0000            548   ; external initialized ram data
0000            549   ;--------------------------------------------------------
0000            550            rseg R_IXSEG
0000            551            rseg R_HOME
0000            552            rseg R_GSINIT
0000            553            rseg R_CSEG
0000            554   ;--------------------------------------------------------
0000            555   ; Reset entry point and interrupt vectors
0000            556   ;--------------------------------------------------------
0000            557            CSEG at 0x0000
0000 020000     558            ljmp    _crt0
0003            559   ;--------------------------------------------------------
0003            560   ; global & static initialisations
0003            561   ;--------------------------------------------------------
0000            562            rseg R_HOME
0000            563            rseg R_GSINIT
0000            564            rseg R_GSINIT
0000            565   ;--------------------------------------------------------
0000            566   ; data variables initialization
0000            567   ;--------------------------------------------------------
0000            568            rseg R_DINIT
0000            569            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            570   ;--------------------------------------------------------
0000            571   ; code
0000            572   ;--------------------------------------------------------
0000            573            rseg R_CSEG
0000            574   ;------------------------------------------------------------
0000            575   ;Allocation info for local variables in function '_c51_external_startup'
0000            576   ;------------------------------------------------------------
0000            577   ;------------------------------------------------------------
0000            578   ;        EFM8_JDY40_test.c:36: char _c51_external_startup (void)
0000            579   ;        -----------------------------------------
0000            580   ;         function _c51_external_startup
0000            581   ;        -----------------------------------------
0000            582   __c51_external_startup:
0000            583            using   0
0000            584   ;        EFM8_JDY40_test.c:39: SFRPAGE = 0x00;
0000 75A700     585            mov     _SFRPAGE,#0x00
0003            586   ;        EFM8_JDY40_test.c:40: WDTCN = 0xDE; //First key
0003 7597DE     587            mov     _WDTCN,#0xDE
0006            588   ;        EFM8_JDY40_test.c:41: WDTCN = 0xAD; //Second key
0006 7597AD     589            mov     _WDTCN,#0xAD
0009            590   ;        EFM8_JDY40_test.c:43: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     591            mov     _VDM0CN,#0x80
000C            592   ;        EFM8_JDY40_test.c:44: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     593            mov     _RSTSRC,#0x06
000F            594   ;        EFM8_JDY40_test.c:51: SFRPAGE = 0x10;
000F 75A710     595            mov     _SFRPAGE,#0x10
0012            596   ;        EFM8_JDY40_test.c:52: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     597            mov     _PFE0CN,#0x20
0015            598   ;        EFM8_JDY40_test.c:53: SFRPAGE = 0x00;
0015 75A700     599            mov     _SFRPAGE,#0x00
0018            600   ;        EFM8_JDY40_test.c:74: CLKSEL = 0x00;
0018 75A900     601            mov     _CLKSEL,#0x00
001B            602   ;        EFM8_JDY40_test.c:75: CLKSEL = 0x00;
001B 75A900     603            mov     _CLKSEL,#0x00
001E            604   ;        EFM8_JDY40_test.c:76: while ((CLKSEL & 0x80) == 0);
001E            605   L002001?:
001E E5A9       606            mov     a,_CLKSEL
0020 30E760     607            jnb     acc.7,L002001?
0023            608   ;        EFM8_JDY40_test.c:77: CLKSEL = 0x03;
0023 75A903     609            mov     _CLKSEL,#0x03
0026            610   ;        EFM8_JDY40_test.c:78: CLKSEL = 0x03;
0026 75A903     611            mov     _CLKSEL,#0x03
0029            612   ;        EFM8_JDY40_test.c:79: while ((CLKSEL & 0x80) == 0);
0029            613   L002004?:
0029 E5A9       614            mov     a,_CLKSEL
002B 30E7E0     615            jnb     acc.7,L002004?
002E            616   ;        EFM8_JDY40_test.c:84: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     617            orl     _P0MDOUT,#0x11
0031            618   ;        EFM8_JDY40_test.c:85: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     619            orl     _P2MDOUT,#0x01
0034            620   ;        EFM8_JDY40_test.c:86: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     621            mov     _XBR0,#0x01
0037            622   ;        EFM8_JDY40_test.c:87: XBR1     = 0X00;
0037 75E200     623            mov     _XBR1,#0x00
003A            624   ;        EFM8_JDY40_test.c:88: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     625            mov     _XBR2,#0x41
003D            626   ;        EFM8_JDY40_test.c:94: SCON0 = 0x10;
003D 759810     627            mov     _SCON0,#0x10
0040            628   ;        EFM8_JDY40_test.c:95: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     629            mov     _TH1,#0xE6
0043            630   ;        EFM8_JDY40_test.c:96: TL1 = TH1;      // Init Timer1
0043 858D8B     631            mov     _TL1,_TH1
0046            632   ;        EFM8_JDY40_test.c:97: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     633            anl     _TMOD,#0x0F
0049            634   ;        EFM8_JDY40_test.c:98: TMOD |=  0x20;                       
0049 438920     635            orl     _TMOD,#0x20
004C            636   ;        EFM8_JDY40_test.c:99: TR1 = 1; // START Timer1
004C D28E       637            setb    _TR1
004E            638   ;        EFM8_JDY40_test.c:100: TI = 1;  // Indicate TX0 ready
004E D299       639            setb    _TI
0050            640   ;        EFM8_JDY40_test.c:102: return 0;
0050 758200     641            mov     dpl,#0x00
0053 22         642            ret
0054            643   ;------------------------------------------------------------
0054            644   ;Allocation info for local variables in function 'InitADC'
0054            645   ;------------------------------------------------------------
0054            646   ;------------------------------------------------------------
0054            647   ;        EFM8_JDY40_test.c:105: void InitADC (void)
0054            648   ;        -----------------------------------------
0054            649   ;         function InitADC
0054            650   ;        -----------------------------------------
0054            651   _InitADC:
0054            652   ;        EFM8_JDY40_test.c:107: SFRPAGE = 0x00;
0054 75A700     653            mov     _SFRPAGE,#0x00
0057            654   ;        EFM8_JDY40_test.c:108: ADEN=0; // Disable ADC
0057 C2EF       655            clr     _ADEN
0059            656   ;        EFM8_JDY40_test.c:113: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     657            mov     _ADC0CN1,#0x80
005C            658   ;        EFM8_JDY40_test.c:117: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     659            mov     _ADC0CF0,#0x20
005F            660   ;        EFM8_JDY40_test.c:121: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     661            mov     _ADC0CF1,#0x1E
0062            662   ;        EFM8_JDY40_test.c:130: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     663            mov     _ADC0CN0,#0x00
0065            664   ;        EFM8_JDY40_test.c:135: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     665            mov     _ADC0CF2,#0x3F
0068            666   ;        EFM8_JDY40_test.c:139: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     667            mov     _ADC0CN2,#0x00
006B            668   ;        EFM8_JDY40_test.c:141: ADEN=1; // Enable ADC
006B D2EF       669            setb    _ADEN
006D 22         670            ret
006E            671   ;------------------------------------------------------------
006E            672   ;Allocation info for local variables in function 'Timer3us'
006E            673   ;------------------------------------------------------------
006E            674   ;us                        Allocated to registers r2 
006E            675   ;i                         Allocated to registers r3 
006E            676   ;------------------------------------------------------------
006E            677   ;        EFM8_JDY40_test.c:146: void Timer3us(unsigned char us)
006E            678   ;        -----------------------------------------
006E            679   ;         function Timer3us
006E            680   ;        -----------------------------------------
006E            681   _Timer3us:
006E AA82       682            mov     r2,dpl
0070            683   ;        EFM8_JDY40_test.c:151: CKCON0|=0b_0100_0000;
0070 438E40     684            orl     _CKCON0,#0x40
0073            685   ;        EFM8_JDY40_test.c:153: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     686            mov     _TMR3RL,#0xB8
0076 7593FF     687            mov     (_TMR3RL >> 8),#0xFF
0079            688   ;        EFM8_JDY40_test.c:154: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     689            mov     _TMR3,_TMR3RL
007C 859395     690            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            691   ;        EFM8_JDY40_test.c:156: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     692            mov     _TMR3CN0,#0x04
0082            693   ;        EFM8_JDY40_test.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       694            mov     r3,#0x00
0084            695   L004004?:
0084 C3         696            clr     c
0085 EB         697            mov     a,r3
0086 9A         698            subb    a,r2
0087 5000       699            jnc     L004007?
0089            700   ;        EFM8_JDY40_test.c:159: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            701   L004001?:
0089 E591       702            mov     a,_TMR3CN0
008B 30E7E0     703            jnb     acc.7,L004001?
008E            704   ;        EFM8_JDY40_test.c:160: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     705            anl     _TMR3CN0,#0x7F
0091            706   ;        EFM8_JDY40_test.c:157: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         707            inc     r3
0092 8000       708            sjmp    L004004?
0094            709   L004007?:
0094            710   ;        EFM8_JDY40_test.c:162: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     711            mov     _TMR3CN0,#0x00
0097 22         712            ret
0098            713   ;------------------------------------------------------------
0098            714   ;Allocation info for local variables in function 'TIMER0_Init'
0098            715   ;------------------------------------------------------------
0098            716   ;------------------------------------------------------------
0098            717   ;        EFM8_JDY40_test.c:165: void TIMER0_Init(void)
0098            718   ;        -----------------------------------------
0098            719   ;         function TIMER0_Init
0098            720   ;        -----------------------------------------
0098            721   _TIMER0_Init:
0098            722   ;        EFM8_JDY40_test.c:167: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0098 5389F0     723            anl     _TMOD,#0xF0
009B            724   ;        EFM8_JDY40_test.c:168: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
009B 438901     725            orl     _TMOD,#0x01
009E            726   ;        EFM8_JDY40_test.c:169: TR0=0; // Stop Timer/Counter 0
009E C28C       727            clr     _TR0
00A0 22         728            ret
00A1            729   ;------------------------------------------------------------
00A1            730   ;Allocation info for local variables in function 'TIMER2_Init'
00A1            731   ;------------------------------------------------------------
00A1            732   ;------------------------------------------------------------
00A1            733   ;        EFM8_JDY40_test.c:175: void TIMER2_Init(void){
00A1            734   ;        -----------------------------------------
00A1            735   ;         function TIMER2_Init
00A1            736   ;        -----------------------------------------
00A1            737   _TIMER2_Init:
00A1            738   ;        EFM8_JDY40_test.c:177: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
00A1 75C800     739            mov     _TMR2CN0,#0x00
00A4            740   ;        EFM8_JDY40_test.c:178: CKCON0|=0b_0001_0000;
00A4 438E10     741            orl     _CKCON0,#0x10
00A7            742   ;        EFM8_JDY40_test.c:179: TMR2RL=(-(SYSCLK/(2*DEFAULT_F))); // Initialize reload value
00A7 75CAEE     743            mov     _TMR2RL,#0xEE
00AA 75CBF6     744            mov     (_TMR2RL >> 8),#0xF6
00AD            745   ;        EFM8_JDY40_test.c:180: TMR2=0xffff;   // Set to reload immediately
00AD 75CEFF     746            mov     _TMR2,#0xFF
00B0 75CFFF     747            mov     (_TMR2 >> 8),#0xFF
00B3            748   ;        EFM8_JDY40_test.c:181: ET2=1;         // Enable Timer2 interrupts
00B3 D2AD       749            setb    _ET2
00B5            750   ;        EFM8_JDY40_test.c:182: TR2=1;         // Start Timer2
00B5 D2CA       751            setb    _TR2
00B7            752   ;        EFM8_JDY40_test.c:183: EA=1; // Global interrupt enable
00B7 D2AF       753            setb    _EA
00B9 22         754            ret
00BA            755   ;------------------------------------------------------------
00BA            756   ;Allocation info for local variables in function 'Timer2_ISR'
00BA            757   ;------------------------------------------------------------
00BA            758   ;------------------------------------------------------------
00BA            759   ;        EFM8_JDY40_test.c:186: void Timer2_ISR (void) //interrupt INTERRUPT_TIMER2
00BA            760   ;        -----------------------------------------
00BA            761   ;         function Timer2_ISR
00BA            762   ;        -----------------------------------------
00BA            763   _Timer2_ISR:
00BA            764   ;        EFM8_JDY40_test.c:188: TF2H = 0; // Clear Timer2 interrupt flag
00BA C2CF       765            clr     _TF2H
00BC            766   ;        EFM8_JDY40_test.c:189: OUT0=!OUT0;
00BC B2B3       767            cpl     _P3_3
00BE 22         768            ret
00BF            769   ;------------------------------------------------------------
00BF            770   ;Allocation info for local variables in function 'waitms'
00BF            771   ;------------------------------------------------------------
00BF            772   ;ms                        Allocated to registers r2 r3 
00BF            773   ;j                         Allocated to registers r4 r5 
00BF            774   ;k                         Allocated to registers r6 
00BF            775   ;------------------------------------------------------------
00BF            776   ;        EFM8_JDY40_test.c:193: void waitms (unsigned int ms)
00BF            777   ;        -----------------------------------------
00BF            778   ;         function waitms
00BF            779   ;        -----------------------------------------
00BF            780   _waitms:
00BF AA82       781            mov     r2,dpl
00C1 AB83       782            mov     r3,dph
00C3            783   ;        EFM8_JDY40_test.c:197: for(j=0; j<ms; j++)
00C3 7C00       784            mov     r4,#0x00
00C5 7D00       785            mov     r5,#0x00
00C7            786   L008005?:
00C7 C3         787            clr     c
00C8 EC         788            mov     a,r4
00C9 9A         789            subb    a,r2
00CA ED         790            mov     a,r5
00CB 9B         791            subb    a,r3
00CC 5000       792            jnc     L008009?
00CE            793   ;        EFM8_JDY40_test.c:198: for (k=0; k<4; k++) Timer3us(250);
00CE 7E00       794            mov     r6,#0x00
00D0            795   L008001?:
00D0 BE0420     796            cjne    r6,#0x04,L008018?
00D3            797   L008018?:
00D3 5000       798            jnc     L008007?
00D5 7582FA     799            mov     dpl,#0xFA
00D8 C002       800            push    ar2
00DA C003       801            push    ar3
00DC C004       802            push    ar4
00DE C005       803            push    ar5
00E0 C006       804            push    ar6
00E2 120000     805            lcall   _Timer3us
00E5 D006       806            pop     ar6
00E7 D005       807            pop     ar5
00E9 D004       808            pop     ar4
00EB D003       809            pop     ar3
00ED D002       810            pop     ar2
00EF 0E         811            inc     r6
00F0 8000       812            sjmp    L008001?
00F2            813   L008007?:
00F2            814   ;        EFM8_JDY40_test.c:197: for(j=0; j<ms; j++)
00F2 0C         815            inc     r4
00F3 BC0060     816            cjne    r4,#0x00,L008005?
00F6 0D         817            inc     r5
00F7 8000       818            sjmp    L008005?
00F9            819   L008009?:
00F9 22         820            ret
00FA            821   ;------------------------------------------------------------
00FA            822   ;Allocation info for local variables in function 'InitPinADC'
00FA            823   ;------------------------------------------------------------
00FA            824   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00FA            825   ;portno                    Allocated to registers r2 
00FA            826   ;mask                      Allocated to registers r3 
00FA            827   ;------------------------------------------------------------
00FA            828   ;        EFM8_JDY40_test.c:201: void InitPinADC (unsigned char portno, unsigned char pinno)
00FA            829   ;        -----------------------------------------
00FA            830   ;         function InitPinADC
00FA            831   ;        -----------------------------------------
00FA            832   _InitPinADC:
00FA AA82       833            mov     r2,dpl
00FC            834   ;        EFM8_JDY40_test.c:205: mask=1<<pinno;
00FC 8560F0     835            mov     b,_InitPinADC_PARM_2
00FF 05F0       836            inc     b
0101 7401       837            mov     a,#0x01
0103 8000       838            sjmp    L009013?
0105            839   L009011?:
0105 25E0       840            add     a,acc
0107            841   L009013?:
0107 D5F020     842            djnz    b,L009011?
010A FB         843            mov     r3,a
010B            844   ;        EFM8_JDY40_test.c:207: SFRPAGE = 0x20;
010B 75A720     845            mov     _SFRPAGE,#0x20
010E            846   ;        EFM8_JDY40_test.c:208: switch (portno)
010E BA0060     847            cjne    r2,#0x00,L009014?
0111 8000       848            sjmp    L009001?
0113            849   L009014?:
0113 BA01E0     850            cjne    r2,#0x01,L009015?
0116 8000       851            sjmp    L009002?
0118            852   L009015?:
0118            853   ;        EFM8_JDY40_test.c:210: case 0:
0118 BA0260     854            cjne    r2,#0x02,L009005?
011B 8000       855            sjmp    L009003?
011D            856   L009001?:
011D            857   ;        EFM8_JDY40_test.c:211: P0MDIN &= (~mask); // Set pin as analog input
011D EB         858            mov     a,r3
011E F4         859            cpl     a
011F FA         860            mov     r2,a
0120 52F1       861            anl     _P0MDIN,a
0122            862   ;        EFM8_JDY40_test.c:212: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0122 EB         863            mov     a,r3
0123 42D4       864            orl     _P0SKIP,a
0125            865   ;        EFM8_JDY40_test.c:213: break;
0125            866   ;        EFM8_JDY40_test.c:214: case 1:
0125 8000       867            sjmp    L009005?
0127            868   L009002?:
0127            869   ;        EFM8_JDY40_test.c:215: P1MDIN &= (~mask); // Set pin as analog input
0127 EB         870            mov     a,r3
0128 F4         871            cpl     a
0129 FA         872            mov     r2,a
012A 52F2       873            anl     _P1MDIN,a
012C            874   ;        EFM8_JDY40_test.c:216: P1SKIP |= mask; // Skip Crossbar decoding for this pin
012C EB         875            mov     a,r3
012D 42D5       876            orl     _P1SKIP,a
012F            877   ;        EFM8_JDY40_test.c:217: break;
012F            878   ;        EFM8_JDY40_test.c:218: case 2:
012F 8000       879            sjmp    L009005?
0131            880   L009003?:
0131            881   ;        EFM8_JDY40_test.c:219: P2MDIN &= (~mask); // Set pin as analog input
0131 EB         882            mov     a,r3
0132 F4         883            cpl     a
0133 FA         884            mov     r2,a
0134 52F3       885            anl     _P2MDIN,a
0136            886   ;        EFM8_JDY40_test.c:220: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0136 EB         887            mov     a,r3
0137 42CC       888            orl     _P2SKIP,a
0139            889   ;        EFM8_JDY40_test.c:224: }
0139            890   L009005?:
0139            891   ;        EFM8_JDY40_test.c:225: SFRPAGE = 0x00;
0139 75A700     892            mov     _SFRPAGE,#0x00
013C 22         893            ret
013D            894   ;------------------------------------------------------------
013D            895   ;Allocation info for local variables in function 'ADC_at_Pin'
013D            896   ;------------------------------------------------------------
013D            897   ;pin                       Allocated to registers 
013D            898   ;------------------------------------------------------------
013D            899   ;        EFM8_JDY40_test.c:228: unsigned int ADC_at_Pin(unsigned char pin)
013D            900   ;        -----------------------------------------
013D            901   ;         function ADC_at_Pin
013D            902   ;        -----------------------------------------
013D            903   _ADC_at_Pin:
013D 8582BB     904            mov     _ADC0MX,dpl
0140            905   ;        EFM8_JDY40_test.c:231: ADINT = 0;
0140 C2ED       906            clr     _ADINT
0142            907   ;        EFM8_JDY40_test.c:232: ADBUSY = 1;     // Convert voltage at the pin
0142 D2EC       908            setb    _ADBUSY
0144            909   ;        EFM8_JDY40_test.c:233: while (!ADINT); // Wait for conversion to complete
0144            910   L010001?:
0144 30EDE0     911            jnb     _ADINT,L010001?
0147            912   ;        EFM8_JDY40_test.c:234: return (ADC0);
0147 85BD82     913            mov     dpl,_ADC0
014A 85BE83     914            mov     dph,(_ADC0 >> 8)
014D 22         915            ret
014E            916   ;------------------------------------------------------------
014E            917   ;Allocation info for local variables in function 'Get_ADC'
014E            918   ;------------------------------------------------------------
014E            919   ;------------------------------------------------------------
014E            920   ;        EFM8_JDY40_test.c:237: unsigned int Get_ADC (void)
014E            921   ;        -----------------------------------------
014E            922   ;         function Get_ADC
014E            923   ;        -----------------------------------------
014E            924   _Get_ADC:
014E            925   ;        EFM8_JDY40_test.c:239: ADINT = 0;
014E C2ED       926            clr     _ADINT
0150            927   ;        EFM8_JDY40_test.c:240: ADBUSY = 1;
0150 D2EC       928            setb    _ADBUSY
0152            929   ;        EFM8_JDY40_test.c:241: while (!ADINT); // Wait for conversion to complete
0152            930   L011001?:
0152 30ED20     931            jnb     _ADINT,L011001?
0155            932   ;        EFM8_JDY40_test.c:242: return (ADC0);
0155 85BD82     933            mov     dpl,_ADC0
0158 85BE83     934            mov     dph,(_ADC0 >> 8)
015B 22         935            ret
015C            936   ;------------------------------------------------------------
015C            937   ;Allocation info for local variables in function 'Volts_at_Pin'
015C            938   ;------------------------------------------------------------
015C            939   ;pin                       Allocated to registers r2 
015C            940   ;------------------------------------------------------------
015C            941   ;        EFM8_JDY40_test.c:246: float Volts_at_Pin(unsigned char pin)
015C            942   ;        -----------------------------------------
015C            943   ;         function Volts_at_Pin
015C            944   ;        -----------------------------------------
015C            945   _Volts_at_Pin:
015C            946   ;        EFM8_JDY40_test.c:248: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
015C 120000     947            lcall   _ADC_at_Pin
015F 120000     948            lcall   ___uint2fs
0162 AA82       949            mov     r2,dpl
0164 AB83       950            mov     r3,dph
0166 ACF0       951            mov     r4,b
0168 FD         952            mov     r5,a
0169 C002       953            push    ar2
016B C003       954            push    ar3
016D C004       955            push    ar4
016F C005       956            push    ar5
0171 903333     957            mov     dptr,#0x3333
0174 75F09B     958            mov     b,#0x9B
0177 7440       959            mov     a,#0x40
0179 120000     960            lcall   ___fsmul
017C AA82       961            mov     r2,dpl
017E AB83       962            mov     r3,dph
0180 ACF0       963            mov     r4,b
0182 FD         964            mov     r5,a
0183 E581       965            mov     a,sp
0185 24FC       966            add     a,#0xfc
0187 F581       967            mov     sp,a
0189 E4         968            clr     a
018A C0E0       969            push    acc
018C 74FC       970            mov     a,#0xFC
018E C0E0       971            push    acc
0190 747F       972            mov     a,#0x7F
0192 C0E0       973            push    acc
0194 7446       974            mov     a,#0x46
0196 C0E0       975            push    acc
0198 8A82       976            mov     dpl,r2
019A 8B83       977            mov     dph,r3
019C 8CF0       978            mov     b,r4
019E ED         979            mov     a,r5
019F 120000     980            lcall   ___fsdiv
01A2 AA82       981            mov     r2,dpl
01A4 AB83       982            mov     r3,dph
01A6 ACF0       983            mov     r4,b
01A8 FD         984            mov     r5,a
01A9 E581       985            mov     a,sp
01AB 24FC       986            add     a,#0xfc
01AD F581       987            mov     sp,a
01AF 8A82       988            mov     dpl,r2
01B1 8B83       989            mov     dph,r3
01B3 8CF0       990            mov     b,r4
01B5 ED         991            mov     a,r5
01B6 22         992            ret
01B7            993   ;------------------------------------------------------------
01B7            994   ;Allocation info for local variables in function 'UART1_Init'
01B7            995   ;------------------------------------------------------------
01B7            996   ;baudrate                  Allocated to registers r2 r3 r4 r5 
01B7            997   ;------------------------------------------------------------
01B7            998   ;        EFM8_JDY40_test.c:251: void UART1_Init (unsigned long baudrate)
01B7            999   ;        -----------------------------------------
01B7           1000   ;         function UART1_Init
01B7           1001   ;        -----------------------------------------
01B7           1002   _UART1_Init:
01B7 AA82      1003            mov     r2,dpl
01B9 AB83      1004            mov     r3,dph
01BB ACF0      1005            mov     r4,b
01BD FD        1006            mov     r5,a
01BE           1007   ;        EFM8_JDY40_test.c:253: SFRPAGE = 0x20;
01BE 75A720    1008            mov     _SFRPAGE,#0x20
01C1           1009   ;        EFM8_JDY40_test.c:254: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01C1 75930C    1010            mov     _SMOD1,#0x0C
01C4           1011   ;        EFM8_JDY40_test.c:255: SCON1 = 0x10;
01C4 75C810    1012            mov     _SCON1,#0x10
01C7           1013   ;        EFM8_JDY40_test.c:256: SBCON1 =0x00;   // disable baud rate generator
01C7 759400    1014            mov     _SBCON1,#0x00
01CA           1015   ;        EFM8_JDY40_test.c:257: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01CA 8A00      1016            mov     __divulong_PARM_2,r2
01CC 8B01      1017            mov     (__divulong_PARM_2 + 1),r3
01CE 8C02      1018            mov     (__divulong_PARM_2 + 2),r4
01D0 8D03      1019            mov     (__divulong_PARM_2 + 3),r5
01D2 90A200    1020            mov     dptr,#0xA200
01D5 75F04A    1021            mov     b,#0x4A
01D8 7404      1022            mov     a,#0x04
01DA 120000    1023            lcall   __divulong
01DD AA82      1024            mov     r2,dpl
01DF AB83      1025            mov     r3,dph
01E1 ACF0      1026            mov     r4,b
01E3 FD        1027            mov     r5,a
01E4 750018    1028            mov     __divulong_PARM_2,#0x18
01E7 E4        1029            clr     a
01E8 F501      1030            mov     (__divulong_PARM_2 + 1),a
01EA F502      1031            mov     (__divulong_PARM_2 + 2),a
01EC F503      1032            mov     (__divulong_PARM_2 + 3),a
01EE 8A82      1033            mov     dpl,r2
01F0 8B83      1034            mov     dph,r3
01F2 8CF0      1035            mov     b,r4
01F4 ED        1036            mov     a,r5
01F5 120000    1037            lcall   __divulong
01F8 AA82      1038            mov     r2,dpl
01FA AB83      1039            mov     r3,dph
01FC ACF0      1040            mov     r4,b
01FE FD        1041            mov     r5,a
01FF E4        1042            clr     a
0200 C3        1043            clr     c
0201 9A        1044            subb    a,r2
0202 FA        1045            mov     r2,a
0203 E4        1046            clr     a
0204 9B        1047            subb    a,r3
0205 FB        1048            mov     r3,a
0206 7401      1049            mov     a,#0x01
0208 9C        1050            subb    a,r4
0209 E4        1051            clr     a
020A 9D        1052            subb    a,r5
020B 8A95      1053            mov     _SBRL1,r2
020D 8B96      1054            mov     (_SBRL1 >> 8),r3
020F           1055   ;        EFM8_JDY40_test.c:258: TI1 = 1; // indicate ready for TX
020F D2C9      1056            setb    _TI1
0211           1057   ;        EFM8_JDY40_test.c:259: SBCON1 |= 0x40;   // enable baud rate generator
0211 439440    1058            orl     _SBCON1,#0x40
0214           1059   ;        EFM8_JDY40_test.c:260: SFRPAGE = 0x00;
0214 75A700    1060            mov     _SFRPAGE,#0x00
0217 22        1061            ret
0218           1062   ;------------------------------------------------------------
0218           1063   ;Allocation info for local variables in function 'putchar1'
0218           1064   ;------------------------------------------------------------
0218           1065   ;c                         Allocated to registers r2 
0218           1066   ;------------------------------------------------------------
0218           1067   ;        EFM8_JDY40_test.c:263: void putchar1 (char c) 
0218           1068   ;        -----------------------------------------
0218           1069   ;         function putchar1
0218           1070   ;        -----------------------------------------
0218           1071   _putchar1:
0218 AA82      1072            mov     r2,dpl
021A           1073   ;        EFM8_JDY40_test.c:265: SFRPAGE = 0x20;
021A 75A720    1074            mov     _SFRPAGE,#0x20
021D           1075   ;        EFM8_JDY40_test.c:266: while (!TI1);
021D           1076   L014001?:
021D           1077   ;        EFM8_JDY40_test.c:267: TI1=0;
021D 10C930    1078            jbc     _TI1,L014008?
0220 8000      1079            sjmp    L014001?
0222           1080   L014008?:
0222           1081   ;        EFM8_JDY40_test.c:268: SBUF1 = c;
0222 8A92      1082            mov     _SBUF1,r2
0224           1083   ;        EFM8_JDY40_test.c:269: SFRPAGE = 0x00;
0224 75A700    1084            mov     _SFRPAGE,#0x00
0227 22        1085            ret
0228           1086   ;------------------------------------------------------------
0228           1087   ;Allocation info for local variables in function 'sendstr1'
0228           1088   ;------------------------------------------------------------
0228           1089   ;s                         Allocated to registers r2 r3 r4 
0228           1090   ;------------------------------------------------------------
0228           1091   ;        EFM8_JDY40_test.c:272: void sendstr1 (char * s)
0228           1092   ;        -----------------------------------------
0228           1093   ;         function sendstr1
0228           1094   ;        -----------------------------------------
0228           1095   _sendstr1:
0228 AA82      1096            mov     r2,dpl
022A AB83      1097            mov     r3,dph
022C ACF0      1098            mov     r4,b
022E           1099   ;        EFM8_JDY40_test.c:274: while(*s)
022E           1100   L015001?:
022E 8A82      1101            mov     dpl,r2
0230 8B83      1102            mov     dph,r3
0232 8CF0      1103            mov     b,r4
0234 120000    1104            lcall   __gptrget
0237 FD        1105            mov     r5,a
0238 6000      1106            jz      L015004?
023A           1107   ;        EFM8_JDY40_test.c:276: putchar1(*s);
023A 8D82      1108            mov     dpl,r5
023C C002      1109            push    ar2
023E C003      1110            push    ar3
0240 C004      1111            push    ar4
0242 120000    1112            lcall   _putchar1
0245 D004      1113            pop     ar4
0247 D003      1114            pop     ar3
0249 D002      1115            pop     ar2
024B           1116   ;        EFM8_JDY40_test.c:277: s++;     
024B 0A        1117            inc     r2
024C BA0070    1118            cjne    r2,#0x00,L015001?
024F 0B        1119            inc     r3
0250 8000      1120            sjmp    L015001?
0252           1121   L015004?:
0252 22        1122            ret
0253           1123   ;------------------------------------------------------------
0253           1124   ;Allocation info for local variables in function 'getchar1'
0253           1125   ;------------------------------------------------------------
0253           1126   ;c                         Allocated to registers 
0253           1127   ;------------------------------------------------------------
0253           1128   ;        EFM8_JDY40_test.c:281: char getchar1 (void)
0253           1129   ;        -----------------------------------------
0253           1130   ;         function getchar1
0253           1131   ;        -----------------------------------------
0253           1132   _getchar1:
0253           1133   ;        EFM8_JDY40_test.c:284: SFRPAGE = 0x20;
0253 75A720    1134            mov     _SFRPAGE,#0x20
0256           1135   ;        EFM8_JDY40_test.c:285: while (!RI1);
0256           1136   L016001?:
0256           1137   ;        EFM8_JDY40_test.c:286: RI1=0;
0256 10C870    1138            jbc     _RI1,L016008?
0259 8000      1139            sjmp    L016001?
025B           1140   L016008?:
025B           1141   ;        EFM8_JDY40_test.c:288: SCON1&=0b_0011_1111;
025B 53C83F    1142            anl     _SCON1,#0x3F
025E           1143   ;        EFM8_JDY40_test.c:289: c = SBUF1;
025E 859282    1144            mov     dpl,_SBUF1
0261           1145   ;        EFM8_JDY40_test.c:290: SFRPAGE = 0x00;
0261 75A700    1146            mov     _SFRPAGE,#0x00
0264           1147   ;        EFM8_JDY40_test.c:291: return (c);
0264 22        1148            ret
0265           1149   ;------------------------------------------------------------
0265           1150   ;Allocation info for local variables in function 'getchar1_with_timeout'
0265           1151   ;------------------------------------------------------------
0265           1152   ;c                         Allocated to registers 
0265           1153   ;timeout                   Allocated to registers r2 r3 
0265           1154   ;------------------------------------------------------------
0265           1155   ;        EFM8_JDY40_test.c:294: char getchar1_with_timeout (void)
0265           1156   ;        -----------------------------------------
0265           1157   ;         function getchar1_with_timeout
0265           1158   ;        -----------------------------------------
0265           1159   _getchar1_with_timeout:
0265           1160   ;        EFM8_JDY40_test.c:298: SFRPAGE = 0x20;
0265 75A720    1161            mov     _SFRPAGE,#0x20
0268           1162   ;        EFM8_JDY40_test.c:300: while (!RI1)
0268 7A00      1163            mov     r2,#0x00
026A 7B00      1164            mov     r3,#0x00
026C           1165   L017003?:
026C 20C8F0    1166            jb      _RI1,L017005?
026F           1167   ;        EFM8_JDY40_test.c:302: SFRPAGE = 0x00;
026F 75A700    1168            mov     _SFRPAGE,#0x00
0272           1169   ;        EFM8_JDY40_test.c:303: Timer3us(20);
0272 758214    1170            mov     dpl,#0x14
0275 C002      1171            push    ar2
0277 C003      1172            push    ar3
0279 120000    1173            lcall   _Timer3us
027C D003      1174            pop     ar3
027E D002      1175            pop     ar2
0280           1176   ;        EFM8_JDY40_test.c:304: SFRPAGE = 0x20;
0280 75A720    1177            mov     _SFRPAGE,#0x20
0283           1178   ;        EFM8_JDY40_test.c:305: timeout++;
0283 0A        1179            inc     r2
0284 BA0030    1180            cjne    r2,#0x00,L017012?
0287 0B        1181            inc     r3
0288           1182   L017012?:
0288           1183   ;        EFM8_JDY40_test.c:306: if(timeout==25000)
0288 BAA8B0    1184            cjne    r2,#0xA8,L017003?
028B BB61B0    1185            cjne    r3,#0x61,L017003?
028E           1186   ;        EFM8_JDY40_test.c:308: SFRPAGE = 0x00;
028E 75A700    1187            mov     _SFRPAGE,#0x00
0291           1188   ;        EFM8_JDY40_test.c:309: return ('\n'); // Timeout after half second
0291 75820A    1189            mov     dpl,#0x0A
0294 22        1190            ret
0295           1191   L017005?:
0295           1192   ;        EFM8_JDY40_test.c:312: RI1=0;
0295 C2C8      1193            clr     _RI1
0297           1194   ;        EFM8_JDY40_test.c:314: SCON1&=0b_0011_1111;
0297 53C83F    1195            anl     _SCON1,#0x3F
029A           1196   ;        EFM8_JDY40_test.c:315: c = SBUF1;
029A 859282    1197            mov     dpl,_SBUF1
029D           1198   ;        EFM8_JDY40_test.c:316: SFRPAGE = 0x00;
029D 75A700    1199            mov     _SFRPAGE,#0x00
02A0           1200   ;        EFM8_JDY40_test.c:317: return (c);
02A0 22        1201            ret
02A1           1202   ;------------------------------------------------------------
02A1           1203   ;Allocation info for local variables in function 'getstr1'
02A1           1204   ;------------------------------------------------------------
02A1           1205   ;s                         Allocated to registers r2 r3 r4 
02A1           1206   ;c                         Allocated to registers r5 
02A1           1207   ;------------------------------------------------------------
02A1           1208   ;        EFM8_JDY40_test.c:320: void getstr1 (char * s)
02A1           1209   ;        -----------------------------------------
02A1           1210   ;         function getstr1
02A1           1211   ;        -----------------------------------------
02A1           1212   _getstr1:
02A1 AA82      1213            mov     r2,dpl
02A3 AB83      1214            mov     r3,dph
02A5 ACF0      1215            mov     r4,b
02A7           1216   ;        EFM8_JDY40_test.c:324: while(1)
02A7           1217   L018004?:
02A7           1218   ;        EFM8_JDY40_test.c:326: c=getchar1_with_timeout();
02A7 C002      1219            push    ar2
02A9 C003      1220            push    ar3
02AB C004      1221            push    ar4
02AD 120000    1222            lcall   _getchar1_with_timeout
02B0 AD82      1223            mov     r5,dpl
02B2 D004      1224            pop     ar4
02B4 D003      1225            pop     ar3
02B6 D002      1226            pop     ar2
02B8           1227   ;        EFM8_JDY40_test.c:327: if(c=='\n')
02B8 BD0AB0    1228            cjne    r5,#0x0A,L018002?
02BB           1229   ;        EFM8_JDY40_test.c:329: *s=0;
02BB 8A82      1230            mov     dpl,r2
02BD 8B83      1231            mov     dph,r3
02BF 8CF0      1232            mov     b,r4
02C1 E4        1233            clr     a
02C2           1234   ;        EFM8_JDY40_test.c:330: return;
02C2 020000    1235            ljmp    __gptrput
02C5           1236   L018002?:
02C5           1237   ;        EFM8_JDY40_test.c:332: *s=c;
02C5 8A82      1238            mov     dpl,r2
02C7 8B83      1239            mov     dph,r3
02C9 8CF0      1240            mov     b,r4
02CB ED        1241            mov     a,r5
02CC 120000    1242            lcall   __gptrput
02CF A3        1243            inc     dptr
02D0 AA82      1244            mov     r2,dpl
02D2 AB83      1245            mov     r3,dph
02D4           1246   ;        EFM8_JDY40_test.c:333: s++;
02D4 8000      1247            sjmp    L018004?
02D6           1248   ;------------------------------------------------------------
02D6           1249   ;Allocation info for local variables in function 'RXU1'
02D6           1250   ;------------------------------------------------------------
02D6           1251   ;------------------------------------------------------------
02D6           1252   ;        EFM8_JDY40_test.c:338: bit RXU1 (void)
02D6           1253   ;        -----------------------------------------
02D6           1254   ;         function RXU1
02D6           1255   ;        -----------------------------------------
02D6           1256   _RXU1:
02D6           1257   ;        EFM8_JDY40_test.c:341: SFRPAGE = 0x20;
02D6 75A720    1258            mov     _SFRPAGE,#0x20
02D9           1259   ;        EFM8_JDY40_test.c:342: mybit=RI1;
02D9 A2C8      1260            mov     c,_RI1
02DB           1261   ;        EFM8_JDY40_test.c:343: SFRPAGE = 0x00;
02DB 75A700    1262            mov     _SFRPAGE,#0x00
02DE           1263   ;        EFM8_JDY40_test.c:344: return mybit;
02DE 22        1264            ret
02DF           1265   ;------------------------------------------------------------
02DF           1266   ;Allocation info for local variables in function 'waitms_or_RI1'
02DF           1267   ;------------------------------------------------------------
02DF           1268   ;ms                        Allocated to registers r2 r3 
02DF           1269   ;j                         Allocated to registers r4 r5 
02DF           1270   ;k                         Allocated to registers r6 
02DF           1271   ;------------------------------------------------------------
02DF           1272   ;        EFM8_JDY40_test.c:347: void waitms_or_RI1 (unsigned int ms)
02DF           1273   ;        -----------------------------------------
02DF           1274   ;         function waitms_or_RI1
02DF           1275   ;        -----------------------------------------
02DF           1276   _waitms_or_RI1:
02DF AA82      1277            mov     r2,dpl
02E1 AB83      1278            mov     r3,dph
02E3           1279   ;        EFM8_JDY40_test.c:351: for(j=0; j<ms; j++)
02E3 7C00      1280            mov     r4,#0x00
02E5 7D00      1281            mov     r5,#0x00
02E7           1282   L020007?:
02E7 C3        1283            clr     c
02E8 EC        1284            mov     a,r4
02E9 9A        1285            subb    a,r2
02EA ED        1286            mov     a,r5
02EB 9B        1287            subb    a,r3
02EC 5000      1288            jnc     L020011?
02EE           1289   ;        EFM8_JDY40_test.c:353: for (k=0; k<4; k++)
02EE 7E00      1290            mov     r6,#0x00
02F0           1291   L020003?:
02F0 BE04F0    1292            cjne    r6,#0x04,L020019?
02F3           1293   L020019?:
02F3 5000      1294            jnc     L020009?
02F5           1295   ;        EFM8_JDY40_test.c:355: if(RXU1()) return;
02F5 C002      1296            push    ar2
02F7 C003      1297            push    ar3
02F9 C004      1298            push    ar4
02FB C005      1299            push    ar5
02FD C006      1300            push    ar6
02FF 120000    1301            lcall   _RXU1
0302 E4        1302            clr     a
0303 33        1303            rlc     a
0304 D006      1304            pop     ar6
0306 D005      1305            pop     ar5
0308 D004      1306            pop     ar4
030A D003      1307            pop     ar3
030C D002      1308            pop     ar2
030E 6000      1309            jz      L020002?
0310 22        1310            ret
0311           1311   L020002?:
0311           1312   ;        EFM8_JDY40_test.c:356: Timer3us(250);
0311 7582FA    1313            mov     dpl,#0xFA
0314 C002      1314            push    ar2
0316 C003      1315            push    ar3
0318 C004      1316            push    ar4
031A C005      1317            push    ar5
031C C006      1318            push    ar6
031E 120000    1319            lcall   _Timer3us
0321 D006      1320            pop     ar6
0323 D005      1321            pop     ar5
0325 D004      1322            pop     ar4
0327 D003      1323            pop     ar3
0329 D002      1324            pop     ar2
032B           1325   ;        EFM8_JDY40_test.c:353: for (k=0; k<4; k++)
032B 0E        1326            inc     r6
032C 8000      1327            sjmp    L020003?
032E           1328   L020009?:
032E           1329   ;        EFM8_JDY40_test.c:351: for(j=0; j<ms; j++)
032E 0C        1330            inc     r4
032F BC0030    1331            cjne    r4,#0x00,L020007?
0332 0D        1332            inc     r5
0333 8000      1333            sjmp    L020007?
0335           1334   L020011?:
0335 22        1335            ret
0336           1336   ;------------------------------------------------------------
0336           1337   ;Allocation info for local variables in function 'SendATCommand'
0336           1338   ;------------------------------------------------------------
0336           1339   ;s                         Allocated to registers r2 r3 r4 
0336           1340   ;------------------------------------------------------------
0336           1341   ;        EFM8_JDY40_test.c:361: void SendATCommand (char * s)
0336           1342   ;        -----------------------------------------
0336           1343   ;         function SendATCommand
0336           1344   ;        -----------------------------------------
0336           1345   _SendATCommand:
0336 AA82      1346            mov     r2,dpl
0338 AB83      1347            mov     r3,dph
033A ACF0      1348            mov     r4,b
033C           1349   ;        EFM8_JDY40_test.c:363: printf("Command: %s", s);
033C C002      1350            push    ar2
033E C003      1351            push    ar3
0340 C004      1352            push    ar4
0342 C002      1353            push    ar2
0344 C003      1354            push    ar3
0346 C004      1355            push    ar4
0348 74B0      1356            mov     a,#__str_0
034A C0E0      1357            push    acc
034C 74C4      1358            mov     a,#(__str_0 >> 8)
034E C0E0      1359            push    acc
0350 7480      1360            mov     a,#0x80
0352 C0E0      1361            push    acc
0354 120000    1362            lcall   _printf
0357 E581      1363            mov     a,sp
0359 24FA      1364            add     a,#0xfa
035B F581      1365            mov     sp,a
035D           1366   ;        EFM8_JDY40_test.c:364: P3_0=0; // 'set' pin to 0 is 'AT' mode.
035D C2B0      1367            clr     _P3_0
035F           1368   ;        EFM8_JDY40_test.c:365: waitms(5);
035F 900005    1369            mov     dptr,#0x0005
0362 120000    1370            lcall   _waitms
0365 D004      1371            pop     ar4
0367 D003      1372            pop     ar3
0369 D002      1373            pop     ar2
036B           1374   ;        EFM8_JDY40_test.c:366: sendstr1(s);
036B 8A82      1375            mov     dpl,r2
036D 8B83      1376            mov     dph,r3
036F 8CF0      1377            mov     b,r4
0371 120000    1378            lcall   _sendstr1
0374           1379   ;        EFM8_JDY40_test.c:367: getstr1(buff);
0374 9018D0    1380            mov     dptr,#_buff
0377 75F040    1381            mov     b,#0x40
037A 120000    1382            lcall   _getstr1
037D           1383   ;        EFM8_JDY40_test.c:368: waitms(10);
037D 90000A    1384            mov     dptr,#0x000A
0380 120000    1385            lcall   _waitms
0383           1386   ;        EFM8_JDY40_test.c:369: P3_0=1; // 'set' pin to 1 is normal operation mode.
0383 D2B0      1387            setb    _P3_0
0385           1388   ;        EFM8_JDY40_test.c:370: printf("Response: %s\r\n", buff);
0385 74D0      1389            mov     a,#_buff
0387 C0E0      1390            push    acc
0389 7418      1391            mov     a,#(_buff >> 8)
038B C0E0      1392            push    acc
038D 7440      1393            mov     a,#0x40
038F C0E0      1394            push    acc
0391 7430      1395            mov     a,#__str_1
0393 C0E0      1396            push    acc
0395 74C5      1397            mov     a,#(__str_1 >> 8)
0397 C0E0      1398            push    acc
0399 7480      1399            mov     a,#0x80
039B C0E0      1400            push    acc
039D 120000    1401            lcall   _printf
03A0 E581      1402            mov     a,sp
03A2 24FA      1403            add     a,#0xfa
03A4 F581      1404            mov     sp,a
03A6 22        1405            ret
03A7           1406   ;------------------------------------------------------------
03A7           1407   ;Allocation info for local variables in function 'LCD_pulse'
03A7           1408   ;------------------------------------------------------------
03A7           1409   ;------------------------------------------------------------
03A7           1410   ;        EFM8_JDY40_test.c:375: void LCD_pulse (void)
03A7           1411   ;        -----------------------------------------
03A7           1412   ;         function LCD_pulse
03A7           1413   ;        -----------------------------------------
03A7           1414   _LCD_pulse:
03A7           1415   ;        EFM8_JDY40_test.c:377: LCD_E=1;
03A7 D2A0      1416            setb    _P2_0
03A9           1417   ;        EFM8_JDY40_test.c:378: Timer3us(40);
03A9 758228    1418            mov     dpl,#0x28
03AC 120000    1419            lcall   _Timer3us
03AF           1420   ;        EFM8_JDY40_test.c:379: LCD_E=0;
03AF C2A0      1421            clr     _P2_0
03B1 22        1422            ret
03B2           1423   ;------------------------------------------------------------
03B2           1424   ;Allocation info for local variables in function 'LCD_byte'
03B2           1425   ;------------------------------------------------------------
03B2           1426   ;x                         Allocated to registers r2 
03B2           1427   ;------------------------------------------------------------
03B2           1428   ;        EFM8_JDY40_test.c:382: void LCD_byte (unsigned char x)
03B2           1429   ;        -----------------------------------------
03B2           1430   ;         function LCD_byte
03B2           1431   ;        -----------------------------------------
03B2           1432   _LCD_byte:
03B2 AA82      1433            mov     r2,dpl
03B4           1434   ;        EFM8_JDY40_test.c:385: ACC=x; //Send high nible
03B4 8AE0      1435            mov     _ACC,r2
03B6           1436   ;        EFM8_JDY40_test.c:386: LCD_D7=ACC_7;
03B6 A2E7      1437            mov     c,_ACC_7
03B8 9290      1438            mov     _P1_0,c
03BA           1439   ;        EFM8_JDY40_test.c:387: LCD_D6=ACC_6;
03BA A2E6      1440            mov     c,_ACC_6
03BC 9291      1441            mov     _P1_1,c
03BE           1442   ;        EFM8_JDY40_test.c:388: LCD_D5=ACC_5;
03BE A2E5      1443            mov     c,_ACC_5
03C0 9292      1444            mov     _P1_2,c
03C2           1445   ;        EFM8_JDY40_test.c:389: LCD_D4=ACC_4;
03C2 A2E4      1446            mov     c,_ACC_4
03C4 9293      1447            mov     _P1_3,c
03C6           1448   ;        EFM8_JDY40_test.c:390: LCD_pulse();
03C6 C002      1449            push    ar2
03C8 120000    1450            lcall   _LCD_pulse
03CB           1451   ;        EFM8_JDY40_test.c:391: Timer3us(40);
03CB 758228    1452            mov     dpl,#0x28
03CE 120000    1453            lcall   _Timer3us
03D1 D002      1454            pop     ar2
03D3           1455   ;        EFM8_JDY40_test.c:392: ACC=x; //Send low nible
03D3 8AE0      1456            mov     _ACC,r2
03D5           1457   ;        EFM8_JDY40_test.c:393: LCD_D7=ACC_3;
03D5 A2E3      1458            mov     c,_ACC_3
03D7 9290      1459            mov     _P1_0,c
03D9           1460   ;        EFM8_JDY40_test.c:394: LCD_D6=ACC_2;
03D9 A2E2      1461            mov     c,_ACC_2
03DB 9291      1462            mov     _P1_1,c
03DD           1463   ;        EFM8_JDY40_test.c:395: LCD_D5=ACC_1;
03DD A2E1      1464            mov     c,_ACC_1
03DF 9292      1465            mov     _P1_2,c
03E1           1466   ;        EFM8_JDY40_test.c:396: LCD_D4=ACC_0;
03E1 A2E0      1467            mov     c,_ACC_0
03E3 9293      1468            mov     _P1_3,c
03E5           1469   ;        EFM8_JDY40_test.c:397: LCD_pulse();
03E5 020000    1470            ljmp    _LCD_pulse
03E8           1471   ;------------------------------------------------------------
03E8           1472   ;Allocation info for local variables in function 'WriteData'
03E8           1473   ;------------------------------------------------------------
03E8           1474   ;x                         Allocated to registers r2 
03E8           1475   ;------------------------------------------------------------
03E8           1476   ;        EFM8_JDY40_test.c:400: void WriteData (unsigned char x)
03E8           1477   ;        -----------------------------------------
03E8           1478   ;         function WriteData
03E8           1479   ;        -----------------------------------------
03E8           1480   _WriteData:
03E8 AA82      1481            mov     r2,dpl
03EA           1482   ;        EFM8_JDY40_test.c:402: LCD_RS=1;
03EA D297      1483            setb    _P1_7
03EC           1484   ;        EFM8_JDY40_test.c:403: LCD_byte(x);
03EC 8A82      1485            mov     dpl,r2
03EE 120000    1486            lcall   _LCD_byte
03F1           1487   ;        EFM8_JDY40_test.c:404: waitms(2);
03F1 900002    1488            mov     dptr,#0x0002
03F4 020000    1489            ljmp    _waitms
03F7           1490   ;------------------------------------------------------------
03F7           1491   ;Allocation info for local variables in function 'WriteCommand'
03F7           1492   ;------------------------------------------------------------
03F7           1493   ;x                         Allocated to registers r2 
03F7           1494   ;------------------------------------------------------------
03F7           1495   ;        EFM8_JDY40_test.c:407: void WriteCommand (unsigned char x)
03F7           1496   ;        -----------------------------------------
03F7           1497   ;         function WriteCommand
03F7           1498   ;        -----------------------------------------
03F7           1499   _WriteCommand:
03F7 AA82      1500            mov     r2,dpl
03F9           1501   ;        EFM8_JDY40_test.c:409: LCD_RS=0;
03F9 C297      1502            clr     _P1_7
03FB           1503   ;        EFM8_JDY40_test.c:410: LCD_byte(x);
03FB 8A82      1504            mov     dpl,r2
03FD 120000    1505            lcall   _LCD_byte
0400           1506   ;        EFM8_JDY40_test.c:411: waitms(5);
0400 900005    1507            mov     dptr,#0x0005
0403 020000    1508            ljmp    _waitms
0406           1509   ;------------------------------------------------------------
0406           1510   ;Allocation info for local variables in function 'LCD_4BIT'
0406           1511   ;------------------------------------------------------------
0406           1512   ;------------------------------------------------------------
0406           1513   ;        EFM8_JDY40_test.c:414: void LCD_4BIT (void)
0406           1514   ;        -----------------------------------------
0406           1515   ;         function LCD_4BIT
0406           1516   ;        -----------------------------------------
0406           1517   _LCD_4BIT:
0406           1518   ;        EFM8_JDY40_test.c:416: LCD_E=0; // Resting state of LCD's enable is zero
0406 C2A0      1519            clr     _P2_0
0408           1520   ;        EFM8_JDY40_test.c:418: waitms(20);
0408 900014    1521            mov     dptr,#0x0014
040B 120000    1522            lcall   _waitms
040E           1523   ;        EFM8_JDY40_test.c:420: WriteCommand(0x33);
040E 758233    1524            mov     dpl,#0x33
0411 120000    1525            lcall   _WriteCommand
0414           1526   ;        EFM8_JDY40_test.c:421: WriteCommand(0x33);
0414 758233    1527            mov     dpl,#0x33
0417 120000    1528            lcall   _WriteCommand
041A           1529   ;        EFM8_JDY40_test.c:422: WriteCommand(0x32); // Change to 4-bit mode
041A 758232    1530            mov     dpl,#0x32
041D 120000    1531            lcall   _WriteCommand
0420           1532   ;        EFM8_JDY40_test.c:425: WriteCommand(0x28);
0420 758228    1533            mov     dpl,#0x28
0423 120000    1534            lcall   _WriteCommand
0426           1535   ;        EFM8_JDY40_test.c:426: WriteCommand(0x0c);
0426 75820C    1536            mov     dpl,#0x0C
0429 120000    1537            lcall   _WriteCommand
042C           1538   ;        EFM8_JDY40_test.c:427: WriteCommand(0x01); // Clear screen command (takes some time)
042C 758201    1539            mov     dpl,#0x01
042F 120000    1540            lcall   _WriteCommand
0432           1541   ;        EFM8_JDY40_test.c:428: waitms(20); // Wait for clear screen command to finsih.
0432 900014    1542            mov     dptr,#0x0014
0435 020000    1543            ljmp    _waitms
0438           1544   ;------------------------------------------------------------
0438           1545   ;Allocation info for local variables in function 'LCDprint'
0438           1546   ;------------------------------------------------------------
0438           1547   ;line                      Allocated with name '_LCDprint_PARM_2'
0438           1548   ;string                    Allocated to registers r2 r3 r4 
0438           1549   ;j                         Allocated to registers r5 r6 
0438           1550   ;------------------------------------------------------------
0438           1551   ;        EFM8_JDY40_test.c:431: void LCDprint(char * string, unsigned char line, bit clear)
0438           1552   ;        -----------------------------------------
0438           1553   ;         function LCDprint
0438           1554   ;        -----------------------------------------
0438           1555   _LCDprint:
0438 AA82      1556            mov     r2,dpl
043A AB83      1557            mov     r3,dph
043C ACF0      1558            mov     r4,b
043E           1559   ;        EFM8_JDY40_test.c:435: WriteCommand(line==2?0xc0:0x80);
043E 7402      1560            mov     a,#0x02
0440 B52070    1561            cjne    a,_LCDprint_PARM_2,L027013?
0443 7DC0      1562            mov     r5,#0xC0
0445 8000      1563            sjmp    L027014?
0447           1564   L027013?:
0447 7D80      1565            mov     r5,#0x80
0449           1566   L027014?:
0449 8D82      1567            mov     dpl,r5
044B C002      1568            push    ar2
044D C003      1569            push    ar3
044F C004      1570            push    ar4
0451 120000    1571            lcall   _WriteCommand
0454           1572   ;        EFM8_JDY40_test.c:436: waitms(5);
0454 900005    1573            mov     dptr,#0x0005
0457 120000    1574            lcall   _waitms
045A D004      1575            pop     ar4
045C D003      1576            pop     ar3
045E D002      1577            pop     ar2
0460           1578   ;        EFM8_JDY40_test.c:437: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
0460 7D00      1579            mov     r5,#0x00
0462 7E00      1580            mov     r6,#0x00
0464           1581   L027003?:
0464 ED        1582            mov     a,r5
0465 2A        1583            add     a,r2
0466 FF        1584            mov     r7,a
0467 EE        1585            mov     a,r6
0468 3B        1586            addc    a,r3
0469 F8        1587            mov     r0,a
046A 8C01      1588            mov     ar1,r4
046C 8F82      1589            mov     dpl,r7
046E 8883      1590            mov     dph,r0
0470 89F0      1591            mov     b,r1
0472 120000    1592            lcall   __gptrget
0475 FF        1593            mov     r7,a
0476 6000      1594            jz      L027006?
0478 8F82      1595            mov     dpl,r7
047A C002      1596            push    ar2
047C C003      1597            push    ar3
047E C004      1598            push    ar4
0480 C005      1599            push    ar5
0482 C006      1600            push    ar6
0484 120000    1601            lcall   _WriteData
0487 D006      1602            pop     ar6
0489 D005      1603            pop     ar5
048B D004      1604            pop     ar4
048D D003      1605            pop     ar3
048F D002      1606            pop     ar2
0491 0D        1607            inc     r5
0492 BD00F0    1608            cjne    r5,#0x00,L027003?
0495 0E        1609            inc     r6
0496 8000      1610            sjmp    L027003?
0498           1611   L027006?:
0498           1612   ;        EFM8_JDY40_test.c:438: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0498 309070    1613            jnb     _LCDprint_PARM_3,L027011?
049B 8D02      1614            mov     ar2,r5
049D 8E03      1615            mov     ar3,r6
049F           1616   L027007?:
049F C3        1617            clr     c
04A0 EA        1618            mov     a,r2
04A1 9410      1619            subb    a,#0x10
04A3 EB        1620            mov     a,r3
04A4 6480      1621            xrl     a,#0x80
04A6 9480      1622            subb    a,#0x80
04A8 5000      1623            jnc     L027011?
04AA 758220    1624            mov     dpl,#0x20
04AD C002      1625            push    ar2
04AF C003      1626            push    ar3
04B1 120000    1627            lcall   _WriteData
04B4 D003      1628            pop     ar3
04B6 D002      1629            pop     ar2
04B8 0A        1630            inc     r2
04B9 BA00B0    1631            cjne    r2,#0x00,L027007?
04BC 0B        1632            inc     r3
04BD 8000      1633            sjmp    L027007?
04BF           1634   L027011?:
04BF 22        1635            ret
04C0           1636   ;------------------------------------------------------------
04C0           1637   ;Allocation info for local variables in function 'main'
04C0           1638   ;------------------------------------------------------------
04C0           1639   ;cnt                       Allocated to registers 
04C0           1640   ;volt_x                    Allocated with name '_main_volt_x_1_145'
04C0           1641   ;volt_y                    Allocated to registers r4 r5 
04C0           1642   ;------------------------------------------------------------
04C0           1643   ;        EFM8_JDY40_test.c:441: void main (void)
04C0           1644   ;        -----------------------------------------
04C0           1645   ;         function main
04C0           1646   ;        -----------------------------------------
04C0           1647   _main:
04C0           1648   ;        EFM8_JDY40_test.c:455: InitADC();
04C0 120000    1649            lcall   _InitADC
04C3           1650   ;        EFM8_JDY40_test.c:456: waitms(500);
04C3 9001F4    1651            mov     dptr,#0x01F4
04C6 120000    1652            lcall   _waitms
04C9           1653   ;        EFM8_JDY40_test.c:457: printf("\r\nJDY-40 test\r\n");
04C9 74F0      1654            mov     a,#__str_2
04CB C0E0      1655            push    acc
04CD 74C6      1656            mov     a,#(__str_2 >> 8)
04CF C0E0      1657            push    acc
04D1 7480      1658            mov     a,#0x80
04D3 C0E0      1659            push    acc
04D5 120000    1660            lcall   _printf
04D8 1581      1661            dec     sp
04DA 1581      1662            dec     sp
04DC 1581      1663            dec     sp
04DE           1664   ;        EFM8_JDY40_test.c:458: UART1_Init(9600);
04DE 902580    1665            mov     dptr,#0x2580
04E1 E4        1666            clr     a
04E2 F5F0      1667            mov     b,a
04E4 120000    1668            lcall   _UART1_Init
04E7           1669   ;        EFM8_JDY40_test.c:459: InitPinADC(2,4); //for y remote
04E7 756004    1670            mov     _InitPinADC_PARM_2,#0x04
04EA 758202    1671            mov     dpl,#0x02
04ED 120000    1672            lcall   _InitPinADC
04F0           1673   ;        EFM8_JDY40_test.c:460: InitPinADC(2,5); //for x remote
04F0 756005    1674            mov     _InitPinADC_PARM_2,#0x05
04F3 758202    1675            mov     dpl,#0x02
04F6 120000    1676            lcall   _InitPinADC
04F9           1677   ;        EFM8_JDY40_test.c:465: LCD_4BIT();
04F9 120000    1678            lcall   _LCD_4BIT
04FC           1679   ;        EFM8_JDY40_test.c:483: SendATCommand("AT+DVID9944\r\n");  
04FC 90C730    1680            mov     dptr,#__str_3
04FF 75F080    1681            mov     b,#0x80
0502 120000    1682            lcall   _SendATCommand
0505           1683   ;        EFM8_JDY40_test.c:486: SendATCommand("AT+VER\r\n");
0505 90C770    1684            mov     dptr,#__str_4
0508 75F080    1685            mov     b,#0x80
050B 120000    1686            lcall   _SendATCommand
050E           1687   ;        EFM8_JDY40_test.c:487: SendATCommand("AT+BAUD\r\n");
050E 90C7B0    1688            mov     dptr,#__str_5
0511 75F080    1689            mov     b,#0x80
0514 120000    1690            lcall   _SendATCommand
0517           1691   ;        EFM8_JDY40_test.c:488: SendATCommand("AT+RFID\r\n");
0517 90C7F0    1692            mov     dptr,#__str_6
051A 75F080    1693            mov     b,#0x80
051D 120000    1694            lcall   _SendATCommand
0520           1695   ;        EFM8_JDY40_test.c:489: SendATCommand("AT+DVID\r\n");
0520 90C830    1696            mov     dptr,#__str_7
0523 75F080    1697            mov     b,#0x80
0526 120000    1698            lcall   _SendATCommand
0529           1699   ;        EFM8_JDY40_test.c:490: SendATCommand("AT+RFC\r\n");
0529 90C870    1700            mov     dptr,#__str_8
052C 75F080    1701            mov     b,#0x80
052F 120000    1702            lcall   _SendATCommand
0532           1703   ;        EFM8_JDY40_test.c:491: SendATCommand("AT+POWE\r\n");
0532 90C8B0    1704            mov     dptr,#__str_9
0535 75F080    1705            mov     b,#0x80
0538 120000    1706            lcall   _SendATCommand
053B           1707   ;        EFM8_JDY40_test.c:492: SendATCommand("AT+CLSS\r\n");
053B 90C8F0    1708            mov     dptr,#__str_10
053E 75F080    1709            mov     b,#0x80
0541 120000    1710            lcall   _SendATCommand
0544           1711   ;        EFM8_JDY40_test.c:494: printf("\r\nPress and hold the BOOT button to transmit.\r\n");
0544 7430      1712            mov     a,#__str_11
0546 C0E0      1713            push    acc
0548 74C9      1714            mov     a,#(__str_11 >> 8)
054A C0E0      1715            push    acc
054C 7480      1716            mov     a,#0x80
054E C0E0      1717            push    acc
0550 120000    1718            lcall   _printf
0553 1581      1719            dec     sp
0555 1581      1720            dec     sp
0557 1581      1721            dec     sp
0559           1722   ;        EFM8_JDY40_test.c:497: while(1)
0559 7A00      1723            mov     r2,#0x00
055B 7B00      1724            mov     r3,#0x00
055D           1725   L028006?:
055D           1726   ;        EFM8_JDY40_test.c:503: volt_x = 10*(Volts_at_Pin(QFP32_MUX_P1_4));
055D 75820A    1727            mov     dpl,#0x0A
0560 C002      1728            push    ar2
0562 C003      1729            push    ar3
0564 120000    1730            lcall   _Volts_at_Pin
0567 AC82      1731            mov     r4,dpl
0569 AD83      1732            mov     r5,dph
056B AEF0      1733            mov     r6,b
056D FF        1734            mov     r7,a
056E C004      1735            push    ar4
0570 C005      1736            push    ar5
0572 C006      1737            push    ar6
0574 C007      1738            push    ar7
0576 900000    1739            mov     dptr,#0x0000
0579 75F020    1740            mov     b,#0x20
057C 7441      1741            mov     a,#0x41
057E 120000    1742            lcall   ___fsmul
0581 AC82      1743            mov     r4,dpl
0583 AD83      1744            mov     r5,dph
0585 AEF0      1745            mov     r6,b
0587 FF        1746            mov     r7,a
0588 E581      1747            mov     a,sp
058A 24FC      1748            add     a,#0xfc
058C F581      1749            mov     sp,a
058E 8C82      1750            mov     dpl,r4
0590 8D83      1751            mov     dph,r5
0592 8EF0      1752            mov     b,r6
0594 EF        1753            mov     a,r7
0595 120000    1754            lcall   ___fs2sint
0598 8582E0    1755            mov     _main_volt_x_1_145,dpl
059B 8583E1    1756            mov     (_main_volt_x_1_145 + 1),dph
059E           1757   ;        EFM8_JDY40_test.c:504: volt_y = 10*(Volts_at_Pin(QFP32_MUX_P1_5));
059E 75820B    1758            mov     dpl,#0x0B
05A1 120000    1759            lcall   _Volts_at_Pin
05A4 AE82      1760            mov     r6,dpl
05A6 AF83      1761            mov     r7,dph
05A8 ACF0      1762            mov     r4,b
05AA FD        1763            mov     r5,a
05AB C006      1764            push    ar6
05AD C007      1765            push    ar7
05AF C004      1766            push    ar4
05B1 C005      1767            push    ar5
05B3 900000    1768            mov     dptr,#0x0000
05B6 75F020    1769            mov     b,#0x20
05B9 7441      1770            mov     a,#0x41
05BB 120000    1771            lcall   ___fsmul
05BE AC82      1772            mov     r4,dpl
05C0 AD83      1773            mov     r5,dph
05C2 AEF0      1774            mov     r6,b
05C4 FF        1775            mov     r7,a
05C5 E581      1776            mov     a,sp
05C7 24FC      1777            add     a,#0xfc
05C9 F581      1778            mov     sp,a
05CB 8C82      1779            mov     dpl,r4
05CD 8D83      1780            mov     dph,r5
05CF 8EF0      1781            mov     b,r6
05D1 EF        1782            mov     a,r7
05D2 120000    1783            lcall   ___fs2sint
05D5 AC82      1784            mov     r4,dpl
05D7 AD83      1785            mov     r5,dph
05D9           1786   ;        EFM8_JDY40_test.c:505: printf("x: %d\r\n",volt_x);
05D9 C004      1787            push    ar4
05DB C005      1788            push    ar5
05DD C0E0      1789            push    _main_volt_x_1_145
05DF C0E1      1790            push    (_main_volt_x_1_145 + 1)
05E1 74F0      1791            mov     a,#__str_12
05E3 C0E0      1792            push    acc
05E5 74C9      1793            mov     a,#(__str_12 >> 8)
05E7 C0E0      1794            push    acc
05E9 7480      1795            mov     a,#0x80
05EB C0E0      1796            push    acc
05ED 120000    1797            lcall   _printf
05F0 E581      1798            mov     a,sp
05F2 24FB      1799            add     a,#0xfb
05F4 F581      1800            mov     sp,a
05F6 D005      1801            pop     ar5
05F8 D004      1802            pop     ar4
05FA           1803   ;        EFM8_JDY40_test.c:506: printf("y: %d\r\n",volt_y);
05FA C004      1804            push    ar4
05FC C005      1805            push    ar5
05FE C004      1806            push    ar4
0600 C005      1807            push    ar5
0602 7430      1808            mov     a,#__str_13
0604 C0E0      1809            push    acc
0606 74CA      1810            mov     a,#(__str_13 >> 8)
0608 C0E0      1811            push    acc
060A 7480      1812            mov     a,#0x80
060C C0E0      1813            push    acc
060E 120000    1814            lcall   _printf
0611 E581      1815            mov     a,sp
0613 24FB      1816            add     a,#0xfb
0615 F581      1817            mov     sp,a
0617           1818   ;        EFM8_JDY40_test.c:510: sprintf(buff, "%d %d\r\n", volt_x, volt_y);
0617 C0E0      1819            push    _main_volt_x_1_145
0619 C0E1      1820            push    (_main_volt_x_1_145 + 1)
061B 7470      1821            mov     a,#__str_14
061D C0E0      1822            push    acc
061F 74CA      1823            mov     a,#(__str_14 >> 8)
0621 C0E0      1824            push    acc
0623 7480      1825            mov     a,#0x80
0625 C0E0      1826            push    acc
0627 74D0      1827            mov     a,#_buff
0629 C0E0      1828            push    acc
062B 7418      1829            mov     a,#(_buff >> 8)
062D C0E0      1830            push    acc
062F 7440      1831            mov     a,#0x40
0631 C0E0      1832            push    acc
0633 120000    1833            lcall   _sprintf
0636 E581      1834            mov     a,sp
0638 24F6      1835            add     a,#0xf6
063A F581      1836            mov     sp,a
063C           1837   ;        EFM8_JDY40_test.c:511: sendstr1(buff);
063C 9018D0    1838            mov     dptr,#_buff
063F 75F040    1839            mov     b,#0x40
0642 120000    1840            lcall   _sendstr1
0645           1841   ;        EFM8_JDY40_test.c:512: waitms_or_RI1(200);
0645 9000C8    1842            mov     dptr,#0x00C8
0648 120000    1843            lcall   _waitms_or_RI1
064B D003      1844            pop     ar3
064D D002      1845            pop     ar2
064F           1846   ;        EFM8_JDY40_test.c:535: if(P3_7==0)
064F 20B7F0    1847            jb      _P3_7,L028002?
0652           1848   ;        EFM8_JDY40_test.c:537: sprintf(buff, "JDY40 test %d\r\n", cnt++);
0652 8A04      1849            mov     ar4,r2
0654 8B05      1850            mov     ar5,r3
0656 0A        1851            inc     r2
0657 BA0030    1852            cjne    r2,#0x00,L028014?
065A 0B        1853            inc     r3
065B           1854   L028014?:
065B C002      1855            push    ar2
065D C003      1856            push    ar3
065F C004      1857            push    ar4
0661 C005      1858            push    ar5
0663 7470      1859            mov     a,#__str_15
0665 C0E0      1860            push    acc
0667 74CB      1861            mov     a,#(__str_15 >> 8)
0669 C0E0      1862            push    acc
066B 7480      1863            mov     a,#0x80
066D C0E0      1864            push    acc
066F 74D0      1865            mov     a,#_buff
0671 C0E0      1866            push    acc
0673 7418      1867            mov     a,#(_buff >> 8)
0675 C0E0      1868            push    acc
0677 7440      1869            mov     a,#0x40
0679 C0E0      1870            push    acc
067B 120000    1871            lcall   _sprintf
067E E581      1872            mov     a,sp
0680 24F8      1873            add     a,#0xf8
0682 F581      1874            mov     sp,a
0684           1875   ;        EFM8_JDY40_test.c:538: sendstr1(buff);
0684 9018D0    1876            mov     dptr,#_buff
0687 75F040    1877            mov     b,#0x40
068A 120000    1878            lcall   _sendstr1
068D           1879   ;        EFM8_JDY40_test.c:539: putchar('.');
068D 75822E    1880            mov     dpl,#0x2E
0690 120000    1881            lcall   _putchar
0693           1882   ;        EFM8_JDY40_test.c:540: waitms_or_RI1(200);
0693 9000C8    1883            mov     dptr,#0x00C8
0696 120000    1884            lcall   _waitms_or_RI1
0699 D003      1885            pop     ar3
069B D002      1886            pop     ar2
069D           1887   L028002?:
069D           1888   ;        EFM8_JDY40_test.c:545: if(RXU1())
069D C002      1889            push    ar2
069F C003      1890            push    ar3
06A1 120000    1891            lcall   _RXU1
06A4 D003      1892            pop     ar3
06A6 D002      1893            pop     ar2
06A8 4000      1894            jc      L028015?
06AA 020000    1895            ljmp    L028006?
06AD           1896   L028015?:
06AD           1897   ;        EFM8_JDY40_test.c:548: getstr1(buff);
06AD 9018D0    1898            mov     dptr,#_buff
06B0 75F040    1899            mov     b,#0x40
06B3 C002      1900            push    ar2
06B5 C003      1901            push    ar3
06B7 120000    1902            lcall   _getstr1
06BA           1903   ;        EFM8_JDY40_test.c:556: printf("%s\r\n",buff);
06BA 74D0      1904            mov     a,#_buff
06BC C0E0      1905            push    acc
06BE 7418      1906            mov     a,#(_buff >> 8)
06C0 C0E0      1907            push    acc
06C2 7440      1908            mov     a,#0x40
06C4 C0E0      1909            push    acc
06C6 7430      1910            mov     a,#__str_16
06C8 C0E0      1911            push    acc
06CA 74CC      1912            mov     a,#(__str_16 >> 8)
06CC C0E0      1913            push    acc
06CE 7480      1914            mov     a,#0x80
06D0 C0E0      1915            push    acc
06D2 120000    1916            lcall   _printf
06D5 E581      1917            mov     a,sp
06D7 24FA      1918            add     a,#0xfa
06D9 F581      1919            mov     sp,a
06DB D003      1920            pop     ar3
06DD D002      1921            pop     ar2
06DF 020000    1922            ljmp    L028006?
06E2           1923            rseg R_CSEG
06E2           1924   
0000           1925            rseg R_XINIT
0000           1926   
0000           1927            rseg R_CONST
0000           1928   __str_0:
0000 436F6D6D  1929            db 'Command: %s'
     616E643A
     202573
000B 00        1930            db 0x00
000C           1931   __str_1:
000C 52657370  1932            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1933            db 0x0D
0019 0A        1934            db 0x0A
001A 00        1935            db 0x00
001B           1936   __str_2:
001B 0D        1937            db 0x0D
001C 0A        1938            db 0x0A
001D 4A44592D  1939            db 'JDY-40 test'
     34302074
     657374
0028 0D        1940            db 0x0D
0029 0A        1941            db 0x0A
002A 00        1942            db 0x00
002B           1943   __str_3:
002B 41542B44  1944            db 'AT+DVID9944'
     56494439
     393434
0036 0D        1945            db 0x0D
0037 0A        1946            db 0x0A
0038 00        1947            db 0x00
0039           1948   __str_4:
0039 41542B56  1949            db 'AT+VER'
     4552
003F 0D        1950            db 0x0D
0040 0A        1951            db 0x0A
0041 00        1952            db 0x00
0042           1953   __str_5:
0042 41542B42  1954            db 'AT+BAUD'
     415544
0049 0D        1955            db 0x0D
004A 0A        1956            db 0x0A
004B 00        1957            db 0x00
004C           1958   __str_6:
004C 41542B52  1959            db 'AT+RFID'
     464944
0053 0D        1960            db 0x0D
0054 0A        1961            db 0x0A
0055 00        1962            db 0x00
0056           1963   __str_7:
0056 41542B44  1964            db 'AT+DVID'
     564944
005D 0D        1965            db 0x0D
005E 0A        1966            db 0x0A
005F 00        1967            db 0x00
0060           1968   __str_8:
0060 41542B52  1969            db 'AT+RFC'
     4643
0066 0D        1970            db 0x0D
0067 0A        1971            db 0x0A
0068 00        1972            db 0x00
0069           1973   __str_9:
0069 41542B50  1974            db 'AT+POWE'
     4F5745
0070 0D        1975            db 0x0D
0071 0A        1976            db 0x0A
0072 00        1977            db 0x00
0073           1978   __str_10:
0073 41542B43  1979            db 'AT+CLSS'
     4C5353
007A 0D        1980            db 0x0D
007B 0A        1981            db 0x0A
007C 00        1982            db 0x00
007D           1983   __str_11:
007D 0D        1984            db 0x0D
007E 0A        1985            db 0x0A
007F 50726573  1986            db 'Press and hold the BOOT button to transmit.'
     7320616E
     6420686F
     6C642074
     68652042
     4F4F5420
     62757474
     6F6E2074
     6F207472
     616E736D
     69742E
00AA 0D        1987            db 0x0D
00AB 0A        1988            db 0x0A
00AC 00        1989            db 0x00
00AD           1990   __str_12:
00AD 783A2025  1991            db 'x: %d'
     64
00B2 0D        1992            db 0x0D
00B3 0A        1993            db 0x0A
00B4 00        1994            db 0x00
00B5           1995   __str_13:
00B5 793A2025  1996            db 'y: %d'
     64
00BA 0D        1997            db 0x0D
00BB 0A        1998            db 0x0A
00BC 00        1999            db 0x00
00BD           2000   __str_14:
00BD 25642025  2001            db '%d %d'
     64
00C2 0D        2002            db 0x0D
00C3 0A        2003            db 0x0A
00C4 00        2004            db 0x00
00C5           2005   __str_15:
00C5 4A445934  2006            db 'JDY40 test %d'
     30207465
     73742025
     64
00D2 0D        2007            db 0x0D
00D3 0A        2008            db 0x0A
00D4 00        2009            db 0x00
00D5           2010   __str_16:
00D5 2573      2011            db '%s'
00D7 0D        2012            db 0x0D
00D8 0A        2013            db 0x0A
00D9 00        2014            db 0x00
00DA           2015   
0003           2016            CSEG
0003           2017   
0003           2018   end
