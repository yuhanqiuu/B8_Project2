0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 22 17:16:22 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _LCDprint
0000             30            public _LCD_4BIT
0000             31            public _WriteCommand
0000             32            public _WriteData
0000             33            public _LCD_byte
0000             34            public _LCD_pulse
0000             35            public _SendATCommand
0000             36            public _waitms_or_RI1
0000             37            public _RXU1
0000             38            public _getstr1
0000             39            public _getchar1_with_timeout
0000             40            public _getchar1
0000             41            public _sendstr1
0000             42            public _putchar1
0000             43            public _UART1_Init
0000             44            public _Volts_at_Pin
0000             45            public _Get_ADC
0000             46            public _ADC_at_Pin
0000             47            public _InitPinADC
0000             48            public _waitms
0000             49            public _Timer2_ISR
0000             50            public _TIMER2_Init
0000             51            public _TIMER0_Init
0000             52            public _Timer3us
0000             53            public _InitADC
0000             54            public __c51_external_startup
0000             55            public _LCDprint_PARM_3
0000             56            public _buff
0000             57            public _LCDprint_PARM_2
0000             58   ;--------------------------------------------------------
0000             59   ; Special Function Registers
0000             60   ;--------------------------------------------------------
0000             61   _ACC            DATA 0xe0
0000             62   _ADC0ASAH       DATA 0xb6
0000             63   _ADC0ASAL       DATA 0xb5
0000             64   _ADC0ASCF       DATA 0xa1
0000             65   _ADC0ASCT       DATA 0xc7
0000             66   _ADC0CF0        DATA 0xbc
0000             67   _ADC0CF1        DATA 0xb9
0000             68   _ADC0CF2        DATA 0xdf
0000             69   _ADC0CN0        DATA 0xe8
0000             70   _ADC0CN1        DATA 0xb2
0000             71   _ADC0CN2        DATA 0xb3
0000             72   _ADC0GTH        DATA 0xc4
0000             73   _ADC0GTL        DATA 0xc3
0000             74   _ADC0H          DATA 0xbe
0000             75   _ADC0L          DATA 0xbd
0000             76   _ADC0LTH        DATA 0xc6
0000             77   _ADC0LTL        DATA 0xc5
0000             78   _ADC0MX         DATA 0xbb
0000             79   _B              DATA 0xf0
0000             80   _CKCON0         DATA 0x8e
0000             81   _CKCON1         DATA 0xa6
0000             82   _CLEN0          DATA 0xc6
0000             83   _CLIE0          DATA 0xc7
0000             84   _CLIF0          DATA 0xe8
0000             85   _CLKSEL         DATA 0xa9
0000             86   _CLOUT0         DATA 0xd1
0000             87   _CLU0CF         DATA 0xb1
0000             88   _CLU0FN         DATA 0xaf
0000             89   _CLU0MX         DATA 0x84
0000             90   _CLU1CF         DATA 0xb3
0000             91   _CLU1FN         DATA 0xb2
0000             92   _CLU1MX         DATA 0x85
0000             93   _CLU2CF         DATA 0xb6
0000             94   _CLU2FN         DATA 0xb5
0000             95   _CLU2MX         DATA 0x91
0000             96   _CLU3CF         DATA 0xbf
0000             97   _CLU3FN         DATA 0xbe
0000             98   _CLU3MX         DATA 0xae
0000             99   _CMP0CN0        DATA 0x9b
0000            100   _CMP0CN1        DATA 0x99
0000            101   _CMP0MD         DATA 0x9d
0000            102   _CMP0MX         DATA 0x9f
0000            103   _CMP1CN0        DATA 0xbf
0000            104   _CMP1CN1        DATA 0xac
0000            105   _CMP1MD         DATA 0xab
0000            106   _CMP1MX         DATA 0xaa
0000            107   _CRC0CN0        DATA 0xce
0000            108   _CRC0CN1        DATA 0x86
0000            109   _CRC0CNT        DATA 0xd3
0000            110   _CRC0DAT        DATA 0xcb
0000            111   _CRC0FLIP       DATA 0xcf
0000            112   _CRC0IN         DATA 0xca
0000            113   _CRC0ST         DATA 0xd2
0000            114   _DAC0CF0        DATA 0x91
0000            115   _DAC0CF1        DATA 0x92
0000            116   _DAC0H          DATA 0x85
0000            117   _DAC0L          DATA 0x84
0000            118   _DAC1CF0        DATA 0x93
0000            119   _DAC1CF1        DATA 0x94
0000            120   _DAC1H          DATA 0x8a
0000            121   _DAC1L          DATA 0x89
0000            122   _DAC2CF0        DATA 0x95
0000            123   _DAC2CF1        DATA 0x96
0000            124   _DAC2H          DATA 0x8c
0000            125   _DAC2L          DATA 0x8b
0000            126   _DAC3CF0        DATA 0x9a
0000            127   _DAC3CF1        DATA 0x9c
0000            128   _DAC3H          DATA 0x8e
0000            129   _DAC3L          DATA 0x8d
0000            130   _DACGCF0        DATA 0x88
0000            131   _DACGCF1        DATA 0x98
0000            132   _DACGCF2        DATA 0xa2
0000            133   _DERIVID        DATA 0xad
0000            134   _DEVICEID       DATA 0xb5
0000            135   _DPH            DATA 0x83
0000            136   _DPL            DATA 0x82
0000            137   _EIE1           DATA 0xe6
0000            138   _EIE2           DATA 0xf3
0000            139   _EIP1           DATA 0xbb
0000            140   _EIP1H          DATA 0xee
0000            141   _EIP2           DATA 0xed
0000            142   _EIP2H          DATA 0xf6
0000            143   _EMI0CN         DATA 0xe7
0000            144   _FLKEY          DATA 0xb7
0000            145   _HFO0CAL        DATA 0xc7
0000            146   _HFO1CAL        DATA 0xd6
0000            147   _HFOCN          DATA 0xef
0000            148   _I2C0ADM        DATA 0xff
0000            149   _I2C0CN0        DATA 0xba
0000            150   _I2C0DIN        DATA 0xbc
0000            151   _I2C0DOUT       DATA 0xbb
0000            152   _I2C0FCN0       DATA 0xad
0000            153   _I2C0FCN1       DATA 0xab
0000            154   _I2C0FCT        DATA 0xf5
0000            155   _I2C0SLAD       DATA 0xbd
0000            156   _I2C0STAT       DATA 0xb9
0000            157   _IE             DATA 0xa8
0000            158   _IP             DATA 0xb8
0000            159   _IPH            DATA 0xf2
0000            160   _IT01CF         DATA 0xe4
0000            161   _LFO0CN         DATA 0xb1
0000            162   _P0             DATA 0x80
0000            163   _P0MASK         DATA 0xfe
0000            164   _P0MAT          DATA 0xfd
0000            165   _P0MDIN         DATA 0xf1
0000            166   _P0MDOUT        DATA 0xa4
0000            167   _P0SKIP         DATA 0xd4
0000            168   _P1             DATA 0x90
0000            169   _P1MASK         DATA 0xee
0000            170   _P1MAT          DATA 0xed
0000            171   _P1MDIN         DATA 0xf2
0000            172   _P1MDOUT        DATA 0xa5
0000            173   _P1SKIP         DATA 0xd5
0000            174   _P2             DATA 0xa0
0000            175   _P2MASK         DATA 0xfc
0000            176   _P2MAT          DATA 0xfb
0000            177   _P2MDIN         DATA 0xf3
0000            178   _P2MDOUT        DATA 0xa6
0000            179   _P2SKIP         DATA 0xcc
0000            180   _P3             DATA 0xb0
0000            181   _P3MDIN         DATA 0xf4
0000            182   _P3MDOUT        DATA 0x9c
0000            183   _PCA0CENT       DATA 0x9e
0000            184   _PCA0CLR        DATA 0x9c
0000            185   _PCA0CN0        DATA 0xd8
0000            186   _PCA0CPH0       DATA 0xfc
0000            187   _PCA0CPH1       DATA 0xea
0000            188   _PCA0CPH2       DATA 0xec
0000            189   _PCA0CPH3       DATA 0xf5
0000            190   _PCA0CPH4       DATA 0x85
0000            191   _PCA0CPH5       DATA 0xde
0000            192   _PCA0CPL0       DATA 0xfb
0000            193   _PCA0CPL1       DATA 0xe9
0000            194   _PCA0CPL2       DATA 0xeb
0000            195   _PCA0CPL3       DATA 0xf4
0000            196   _PCA0CPL4       DATA 0x84
0000            197   _PCA0CPL5       DATA 0xdd
0000            198   _PCA0CPM0       DATA 0xda
0000            199   _PCA0CPM1       DATA 0xdb
0000            200   _PCA0CPM2       DATA 0xdc
0000            201   _PCA0CPM3       DATA 0xae
0000            202   _PCA0CPM4       DATA 0xaf
0000            203   _PCA0CPM5       DATA 0xcc
0000            204   _PCA0H          DATA 0xfa
0000            205   _PCA0L          DATA 0xf9
0000            206   _PCA0MD         DATA 0xd9
0000            207   _PCA0POL        DATA 0x96
0000            208   _PCA0PWM        DATA 0xf7
0000            209   _PCON0          DATA 0x87
0000            210   _PCON1          DATA 0xcd
0000            211   _PFE0CN         DATA 0xc1
0000            212   _PRTDRV         DATA 0xf6
0000            213   _PSCTL          DATA 0x8f
0000            214   _PSTAT0         DATA 0xaa
0000            215   _PSW            DATA 0xd0
0000            216   _REF0CN         DATA 0xd1
0000            217   _REG0CN         DATA 0xc9
0000            218   _REVID          DATA 0xb6
0000            219   _RSTSRC         DATA 0xef
0000            220   _SBCON1         DATA 0x94
0000            221   _SBRLH1         DATA 0x96
0000            222   _SBRLL1         DATA 0x95
0000            223   _SBUF           DATA 0x99
0000            224   _SBUF0          DATA 0x99
0000            225   _SBUF1          DATA 0x92
0000            226   _SCON           DATA 0x98
0000            227   _SCON0          DATA 0x98
0000            228   _SCON1          DATA 0xc8
0000            229   _SFRPAGE        DATA 0xa7
0000            230   _SFRPGCN        DATA 0xbc
0000            231   _SFRSTACK       DATA 0xd7
0000            232   _SMB0ADM        DATA 0xd6
0000            233   _SMB0ADR        DATA 0xd7
0000            234   _SMB0CF         DATA 0xc1
0000            235   _SMB0CN0        DATA 0xc0
0000            236   _SMB0DAT        DATA 0xc2
0000            237   _SMB0FCN0       DATA 0xc3
0000            238   _SMB0FCN1       DATA 0xc4
0000            239   _SMB0FCT        DATA 0xef
0000            240   _SMB0RXLN       DATA 0xc5
0000            241   _SMB0TC         DATA 0xac
0000            242   _SMOD1          DATA 0x93
0000            243   _SP             DATA 0x81
0000            244   _SPI0CFG        DATA 0xa1
0000            245   _SPI0CKR        DATA 0xa2
0000            246   _SPI0CN0        DATA 0xf8
0000            247   _SPI0DAT        DATA 0xa3
0000            248   _SPI0FCN0       DATA 0x9a
0000            249   _SPI0FCN1       DATA 0x9b
0000            250   _SPI0FCT        DATA 0xf7
0000            251   _SPI0PCF        DATA 0xdf
0000            252   _TCON           DATA 0x88
0000            253   _TH0            DATA 0x8c
0000            254   _TH1            DATA 0x8d
0000            255   _TL0            DATA 0x8a
0000            256   _TL1            DATA 0x8b
0000            257   _TMOD           DATA 0x89
0000            258   _TMR2CN0        DATA 0xc8
0000            259   _TMR2CN1        DATA 0xfd
0000            260   _TMR2H          DATA 0xcf
0000            261   _TMR2L          DATA 0xce
0000            262   _TMR2RLH        DATA 0xcb
0000            263   _TMR2RLL        DATA 0xca
0000            264   _TMR3CN0        DATA 0x91
0000            265   _TMR3CN1        DATA 0xfe
0000            266   _TMR3H          DATA 0x95
0000            267   _TMR3L          DATA 0x94
0000            268   _TMR3RLH        DATA 0x93
0000            269   _TMR3RLL        DATA 0x92
0000            270   _TMR4CN0        DATA 0x98
0000            271   _TMR4CN1        DATA 0xff
0000            272   _TMR4H          DATA 0xa5
0000            273   _TMR4L          DATA 0xa4
0000            274   _TMR4RLH        DATA 0xa3
0000            275   _TMR4RLL        DATA 0xa2
0000            276   _TMR5CN0        DATA 0xc0
0000            277   _TMR5CN1        DATA 0xf1
0000            278   _TMR5H          DATA 0xd5
0000            279   _TMR5L          DATA 0xd4
0000            280   _TMR5RLH        DATA 0xd3
0000            281   _TMR5RLL        DATA 0xd2
0000            282   _UART0PCF       DATA 0xd9
0000            283   _UART1FCN0      DATA 0x9d
0000            284   _UART1FCN1      DATA 0xd8
0000            285   _UART1FCT       DATA 0xfa
0000            286   _UART1LIN       DATA 0x9e
0000            287   _UART1PCF       DATA 0xda
0000            288   _VDM0CN         DATA 0xff
0000            289   _WDTCN          DATA 0x97
0000            290   _XBR0           DATA 0xe1
0000            291   _XBR1           DATA 0xe2
0000            292   _XBR2           DATA 0xe3
0000            293   _XOSC0CN        DATA 0x86
0000            294   _DPTR           DATA 0x8382
0000            295   _TMR2RL         DATA 0xcbca
0000            296   _TMR3RL         DATA 0x9392
0000            297   _TMR4RL         DATA 0xa3a2
0000            298   _TMR5RL         DATA 0xd3d2
0000            299   _TMR0           DATA 0x8c8a
0000            300   _TMR1           DATA 0x8d8b
0000            301   _TMR2           DATA 0xcfce
0000            302   _TMR3           DATA 0x9594
0000            303   _TMR4           DATA 0xa5a4
0000            304   _TMR5           DATA 0xd5d4
0000            305   _SBRL1          DATA 0x9695
0000            306   _PCA0           DATA 0xfaf9
0000            307   _PCA0CP0        DATA 0xfcfb
0000            308   _PCA0CP1        DATA 0xeae9
0000            309   _PCA0CP2        DATA 0xeceb
0000            310   _PCA0CP3        DATA 0xf5f4
0000            311   _PCA0CP4        DATA 0x8584
0000            312   _PCA0CP5        DATA 0xdedd
0000            313   _ADC0ASA        DATA 0xb6b5
0000            314   _ADC0GT         DATA 0xc4c3
0000            315   _ADC0           DATA 0xbebd
0000            316   _ADC0LT         DATA 0xc6c5
0000            317   _DAC0           DATA 0x8584
0000            318   _DAC1           DATA 0x8a89
0000            319   _DAC2           DATA 0x8c8b
0000            320   _DAC3           DATA 0x8e8d
0000            321   ;--------------------------------------------------------
0000            322   ; special function bits
0000            323   ;--------------------------------------------------------
0000            324   _ACC_0          BIT 0xe0
0000            325   _ACC_1          BIT 0xe1
0000            326   _ACC_2          BIT 0xe2
0000            327   _ACC_3          BIT 0xe3
0000            328   _ACC_4          BIT 0xe4
0000            329   _ACC_5          BIT 0xe5
0000            330   _ACC_6          BIT 0xe6
0000            331   _ACC_7          BIT 0xe7
0000            332   _TEMPE          BIT 0xe8
0000            333   _ADGN0          BIT 0xe9
0000            334   _ADGN1          BIT 0xea
0000            335   _ADWINT         BIT 0xeb
0000            336   _ADBUSY         BIT 0xec
0000            337   _ADINT          BIT 0xed
0000            338   _IPOEN          BIT 0xee
0000            339   _ADEN           BIT 0xef
0000            340   _B_0            BIT 0xf0
0000            341   _B_1            BIT 0xf1
0000            342   _B_2            BIT 0xf2
0000            343   _B_3            BIT 0xf3
0000            344   _B_4            BIT 0xf4
0000            345   _B_5            BIT 0xf5
0000            346   _B_6            BIT 0xf6
0000            347   _B_7            BIT 0xf7
0000            348   _C0FIF          BIT 0xe8
0000            349   _C0RIF          BIT 0xe9
0000            350   _C1FIF          BIT 0xea
0000            351   _C1RIF          BIT 0xeb
0000            352   _C2FIF          BIT 0xec
0000            353   _C2RIF          BIT 0xed
0000            354   _C3FIF          BIT 0xee
0000            355   _C3RIF          BIT 0xef
0000            356   _D1SRC0         BIT 0x88
0000            357   _D1SRC1         BIT 0x89
0000            358   _D1AMEN         BIT 0x8a
0000            359   _D01REFSL       BIT 0x8b
0000            360   _D3SRC0         BIT 0x8c
0000            361   _D3SRC1         BIT 0x8d
0000            362   _D3AMEN         BIT 0x8e
0000            363   _D23REFSL       BIT 0x8f
0000            364   _D0UDIS         BIT 0x98
0000            365   _D1UDIS         BIT 0x99
0000            366   _D2UDIS         BIT 0x9a
0000            367   _D3UDIS         BIT 0x9b
0000            368   _EX0            BIT 0xa8
0000            369   _ET0            BIT 0xa9
0000            370   _EX1            BIT 0xaa
0000            371   _ET1            BIT 0xab
0000            372   _ES0            BIT 0xac
0000            373   _ET2            BIT 0xad
0000            374   _ESPI0          BIT 0xae
0000            375   _EA             BIT 0xaf
0000            376   _PX0            BIT 0xb8
0000            377   _PT0            BIT 0xb9
0000            378   _PX1            BIT 0xba
0000            379   _PT1            BIT 0xbb
0000            380   _PS0            BIT 0xbc
0000            381   _PT2            BIT 0xbd
0000            382   _PSPI0          BIT 0xbe
0000            383   _P0_0           BIT 0x80
0000            384   _P0_1           BIT 0x81
0000            385   _P0_2           BIT 0x82
0000            386   _P0_3           BIT 0x83
0000            387   _P0_4           BIT 0x84
0000            388   _P0_5           BIT 0x85
0000            389   _P0_6           BIT 0x86
0000            390   _P0_7           BIT 0x87
0000            391   _P1_0           BIT 0x90
0000            392   _P1_1           BIT 0x91
0000            393   _P1_2           BIT 0x92
0000            394   _P1_3           BIT 0x93
0000            395   _P1_4           BIT 0x94
0000            396   _P1_5           BIT 0x95
0000            397   _P1_6           BIT 0x96
0000            398   _P1_7           BIT 0x97
0000            399   _P2_0           BIT 0xa0
0000            400   _P2_1           BIT 0xa1
0000            401   _P2_2           BIT 0xa2
0000            402   _P2_3           BIT 0xa3
0000            403   _P2_4           BIT 0xa4
0000            404   _P2_5           BIT 0xa5
0000            405   _P2_6           BIT 0xa6
0000            406   _P3_0           BIT 0xb0
0000            407   _P3_1           BIT 0xb1
0000            408   _P3_2           BIT 0xb2
0000            409   _P3_3           BIT 0xb3
0000            410   _P3_4           BIT 0xb4
0000            411   _P3_7           BIT 0xb7
0000            412   _CCF0           BIT 0xd8
0000            413   _CCF1           BIT 0xd9
0000            414   _CCF2           BIT 0xda
0000            415   _CCF3           BIT 0xdb
0000            416   _CCF4           BIT 0xdc
0000            417   _CCF5           BIT 0xdd
0000            418   _CR             BIT 0xde
0000            419   _CF             BIT 0xdf
0000            420   _PARITY         BIT 0xd0
0000            421   _F1             BIT 0xd1
0000            422   _OV             BIT 0xd2
0000            423   _RS0            BIT 0xd3
0000            424   _RS1            BIT 0xd4
0000            425   _F0             BIT 0xd5
0000            426   _AC             BIT 0xd6
0000            427   _CY             BIT 0xd7
0000            428   _RI             BIT 0x98
0000            429   _TI             BIT 0x99
0000            430   _RB8            BIT 0x9a
0000            431   _TB8            BIT 0x9b
0000            432   _REN            BIT 0x9c
0000            433   _CE             BIT 0x9d
0000            434   _SMODE          BIT 0x9e
0000            435   _RI1            BIT 0xc8
0000            436   _TI1            BIT 0xc9
0000            437   _RBX1           BIT 0xca
0000            438   _TBX1           BIT 0xcb
0000            439   _REN1           BIT 0xcc
0000            440   _PERR1          BIT 0xcd
0000            441   _OVR1           BIT 0xce
0000            442   _SI             BIT 0xc0
0000            443   _ACK            BIT 0xc1
0000            444   _ARBLOST        BIT 0xc2
0000            445   _ACKRQ          BIT 0xc3
0000            446   _STO            BIT 0xc4
0000            447   _STA            BIT 0xc5
0000            448   _TXMODE         BIT 0xc6
0000            449   _MASTER         BIT 0xc7
0000            450   _SPIEN          BIT 0xf8
0000            451   _TXNF           BIT 0xf9
0000            452   _NSSMD0         BIT 0xfa
0000            453   _NSSMD1         BIT 0xfb
0000            454   _RXOVRN         BIT 0xfc
0000            455   _MODF           BIT 0xfd
0000            456   _WCOL           BIT 0xfe
0000            457   _SPIF           BIT 0xff
0000            458   _IT0            BIT 0x88
0000            459   _IE0            BIT 0x89
0000            460   _IT1            BIT 0x8a
0000            461   _IE1            BIT 0x8b
0000            462   _TR0            BIT 0x8c
0000            463   _TF0            BIT 0x8d
0000            464   _TR1            BIT 0x8e
0000            465   _TF1            BIT 0x8f
0000            466   _T2XCLK0        BIT 0xc8
0000            467   _T2XCLK1        BIT 0xc9
0000            468   _TR2            BIT 0xca
0000            469   _T2SPLIT        BIT 0xcb
0000            470   _TF2CEN         BIT 0xcc
0000            471   _TF2LEN         BIT 0xcd
0000            472   _TF2L           BIT 0xce
0000            473   _TF2H           BIT 0xcf
0000            474   _T4XCLK0        BIT 0x98
0000            475   _T4XCLK1        BIT 0x99
0000            476   _TR4            BIT 0x9a
0000            477   _T4SPLIT        BIT 0x9b
0000            478   _TF4CEN         BIT 0x9c
0000            479   _TF4LEN         BIT 0x9d
0000            480   _TF4L           BIT 0x9e
0000            481   _TF4H           BIT 0x9f
0000            482   _T5XCLK0        BIT 0xc0
0000            483   _T5XCLK1        BIT 0xc1
0000            484   _TR5            BIT 0xc2
0000            485   _T5SPLIT        BIT 0xc3
0000            486   _TF5CEN         BIT 0xc4
0000            487   _TF5LEN         BIT 0xc5
0000            488   _TF5L           BIT 0xc6
0000            489   _TF5H           BIT 0xc7
0000            490   _RIE            BIT 0xd8
0000            491   _RXTO0          BIT 0xd9
0000            492   _RXTO1          BIT 0xda
0000            493   _RFRQ           BIT 0xdb
0000            494   _TIE            BIT 0xdc
0000            495   _TXHOLD         BIT 0xdd
0000            496   _TXNF1          BIT 0xde
0000            497   _TFRQ           BIT 0xdf
0000            498   ;--------------------------------------------------------
0000            499   ; overlayable register banks
0000            500   ;--------------------------------------------------------
0000            501            rbank0 segment data overlay
0000            502   ;--------------------------------------------------------
0000            503   ; internal ram data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_DSEG
0000            506   _LCDprint_PARM_2:
0000            507            ds 1
0001            508   _main_volt_x_1_123:
0001            509            ds 4
0005            510   ;--------------------------------------------------------
0005            511   ; overlayable items in internal ram 
0005            512   ;--------------------------------------------------------
0000            513            rseg    R_OSEG
0000            514            rseg    R_OSEG
0000            515   _InitPinADC_PARM_2:
0000            516            ds 1
0001            517            rseg    R_OSEG
0001            518            rseg    R_OSEG
0001            519            rseg    R_OSEG
0001            520   ;--------------------------------------------------------
0001            521   ; indirectly addressable internal ram data
0001            522   ;--------------------------------------------------------
0000            523            rseg R_ISEG
0000            524   _buff:
0000            525            ds 20
0014            526   ;--------------------------------------------------------
0014            527   ; absolute internal ram data
0014            528   ;--------------------------------------------------------
0000            529            DSEG
0000            530   ;--------------------------------------------------------
0000            531   ; bit data
0000            532   ;--------------------------------------------------------
0000            533            rseg R_BSEG
0000            534   _LCDprint_PARM_3:
0000            535            DBIT    1
0001            536   ;--------------------------------------------------------
0001            537   ; paged external ram data
0001            538   ;--------------------------------------------------------
0000            539            rseg R_PSEG
0000            540   ;--------------------------------------------------------
0000            541   ; external ram data
0000            542   ;--------------------------------------------------------
0000            543            rseg R_XSEG
0000            544   ;--------------------------------------------------------
0000            545   ; absolute external ram data
0000            546   ;--------------------------------------------------------
0000            547            XSEG
0000            548   ;--------------------------------------------------------
0000            549   ; external initialized ram data
0000            550   ;--------------------------------------------------------
0000            551            rseg R_IXSEG
0000            552            rseg R_HOME
0000            553            rseg R_GSINIT
0000            554            rseg R_CSEG
0000            555   ;--------------------------------------------------------
0000            556   ; Reset entry point and interrupt vectors
0000            557   ;--------------------------------------------------------
0000            558            CSEG at 0x0000
0000 020000     559            ljmp    _crt0
0003            560   ;--------------------------------------------------------
0003            561   ; global & static initialisations
0003            562   ;--------------------------------------------------------
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_GSINIT
0000            566   ;--------------------------------------------------------
0000            567   ; data variables initialization
0000            568   ;--------------------------------------------------------
0000            569            rseg R_DINIT
0000            570            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            571   ;--------------------------------------------------------
0000            572   ; code
0000            573   ;--------------------------------------------------------
0000            574            rseg R_CSEG
0000            575   ;------------------------------------------------------------
0000            576   ;Allocation info for local variables in function '_c51_external_startup'
0000            577   ;------------------------------------------------------------
0000            578   ;------------------------------------------------------------
0000            579   ;        EFM8_JDY40_test.c:35: char _c51_external_startup (void)
0000            580   ;        -----------------------------------------
0000            581   ;         function _c51_external_startup
0000            582   ;        -----------------------------------------
0000            583   __c51_external_startup:
0000            584            using   0
0000            585   ;        EFM8_JDY40_test.c:38: SFRPAGE = 0x00;
0000 75A700     586            mov     _SFRPAGE,#0x00
0003            587   ;        EFM8_JDY40_test.c:39: WDTCN = 0xDE; //First key
0003 7597DE     588            mov     _WDTCN,#0xDE
0006            589   ;        EFM8_JDY40_test.c:40: WDTCN = 0xAD; //Second key
0006 7597AD     590            mov     _WDTCN,#0xAD
0009            591   ;        EFM8_JDY40_test.c:42: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     592            mov     _VDM0CN,#0x80
000C            593   ;        EFM8_JDY40_test.c:43: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     594            mov     _RSTSRC,#0x06
000F            595   ;        EFM8_JDY40_test.c:50: SFRPAGE = 0x10;
000F 75A710     596            mov     _SFRPAGE,#0x10
0012            597   ;        EFM8_JDY40_test.c:51: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     598            mov     _PFE0CN,#0x20
0015            599   ;        EFM8_JDY40_test.c:52: SFRPAGE = 0x00;
0015 75A700     600            mov     _SFRPAGE,#0x00
0018            601   ;        EFM8_JDY40_test.c:73: CLKSEL = 0x00;
0018 75A900     602            mov     _CLKSEL,#0x00
001B            603   ;        EFM8_JDY40_test.c:74: CLKSEL = 0x00;
001B 75A900     604            mov     _CLKSEL,#0x00
001E            605   ;        EFM8_JDY40_test.c:75: while ((CLKSEL & 0x80) == 0);
001E            606   L002001?:
001E E5A9       607            mov     a,_CLKSEL
0020 30E760     608            jnb     acc.7,L002001?
0023            609   ;        EFM8_JDY40_test.c:76: CLKSEL = 0x03;
0023 75A903     610            mov     _CLKSEL,#0x03
0026            611   ;        EFM8_JDY40_test.c:77: CLKSEL = 0x03;
0026 75A903     612            mov     _CLKSEL,#0x03
0029            613   ;        EFM8_JDY40_test.c:78: while ((CLKSEL & 0x80) == 0);
0029            614   L002004?:
0029 E5A9       615            mov     a,_CLKSEL
002B 30E7E0     616            jnb     acc.7,L002004?
002E            617   ;        EFM8_JDY40_test.c:83: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     618            orl     _P0MDOUT,#0x11
0031            619   ;        EFM8_JDY40_test.c:84: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     620            orl     _P2MDOUT,#0x01
0034            621   ;        EFM8_JDY40_test.c:85: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     622            mov     _XBR0,#0x01
0037            623   ;        EFM8_JDY40_test.c:86: XBR1     = 0X00;
0037 75E200     624            mov     _XBR1,#0x00
003A            625   ;        EFM8_JDY40_test.c:87: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     626            mov     _XBR2,#0x41
003D            627   ;        EFM8_JDY40_test.c:93: SCON0 = 0x10;
003D 759810     628            mov     _SCON0,#0x10
0040            629   ;        EFM8_JDY40_test.c:94: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     630            mov     _TH1,#0xE6
0043            631   ;        EFM8_JDY40_test.c:95: TL1 = TH1;      // Init Timer1
0043 858D8B     632            mov     _TL1,_TH1
0046            633   ;        EFM8_JDY40_test.c:96: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     634            anl     _TMOD,#0x0F
0049            635   ;        EFM8_JDY40_test.c:97: TMOD |=  0x20;                       
0049 438920     636            orl     _TMOD,#0x20
004C            637   ;        EFM8_JDY40_test.c:98: TR1 = 1; // START Timer1
004C D28E       638            setb    _TR1
004E            639   ;        EFM8_JDY40_test.c:99: TI = 1;  // Indicate TX0 ready
004E D299       640            setb    _TI
0050            641   ;        EFM8_JDY40_test.c:101: return 0;
0050 758200     642            mov     dpl,#0x00
0053 22         643            ret
0054            644   ;------------------------------------------------------------
0054            645   ;Allocation info for local variables in function 'InitADC'
0054            646   ;------------------------------------------------------------
0054            647   ;------------------------------------------------------------
0054            648   ;        EFM8_JDY40_test.c:104: void InitADC (void)
0054            649   ;        -----------------------------------------
0054            650   ;         function InitADC
0054            651   ;        -----------------------------------------
0054            652   _InitADC:
0054            653   ;        EFM8_JDY40_test.c:106: SFRPAGE = 0x00;
0054 75A700     654            mov     _SFRPAGE,#0x00
0057            655   ;        EFM8_JDY40_test.c:107: ADEN=0; // Disable ADC
0057 C2EF       656            clr     _ADEN
0059            657   ;        EFM8_JDY40_test.c:112: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     658            mov     _ADC0CN1,#0x80
005C            659   ;        EFM8_JDY40_test.c:116: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     660            mov     _ADC0CF0,#0x20
005F            661   ;        EFM8_JDY40_test.c:120: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     662            mov     _ADC0CF1,#0x1E
0062            663   ;        EFM8_JDY40_test.c:129: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     664            mov     _ADC0CN0,#0x00
0065            665   ;        EFM8_JDY40_test.c:134: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     666            mov     _ADC0CF2,#0x3F
0068            667   ;        EFM8_JDY40_test.c:138: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     668            mov     _ADC0CN2,#0x00
006B            669   ;        EFM8_JDY40_test.c:140: ADEN=1; // Enable ADC
006B D2EF       670            setb    _ADEN
006D 22         671            ret
006E            672   ;------------------------------------------------------------
006E            673   ;Allocation info for local variables in function 'Timer3us'
006E            674   ;------------------------------------------------------------
006E            675   ;us                        Allocated to registers r2 
006E            676   ;i                         Allocated to registers r3 
006E            677   ;------------------------------------------------------------
006E            678   ;        EFM8_JDY40_test.c:145: void Timer3us(unsigned char us)
006E            679   ;        -----------------------------------------
006E            680   ;         function Timer3us
006E            681   ;        -----------------------------------------
006E            682   _Timer3us:
006E AA82       683            mov     r2,dpl
0070            684   ;        EFM8_JDY40_test.c:150: CKCON0|=0b_0100_0000;
0070 438E40     685            orl     _CKCON0,#0x40
0073            686   ;        EFM8_JDY40_test.c:152: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     687            mov     _TMR3RL,#0xB8
0076 7593FF     688            mov     (_TMR3RL >> 8),#0xFF
0079            689   ;        EFM8_JDY40_test.c:153: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     690            mov     _TMR3,_TMR3RL
007C 859395     691            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            692   ;        EFM8_JDY40_test.c:155: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     693            mov     _TMR3CN0,#0x04
0082            694   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       695            mov     r3,#0x00
0084            696   L004004?:
0084 C3         697            clr     c
0085 EB         698            mov     a,r3
0086 9A         699            subb    a,r2
0087 5000       700            jnc     L004007?
0089            701   ;        EFM8_JDY40_test.c:158: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            702   L004001?:
0089 E591       703            mov     a,_TMR3CN0
008B 30E7E0     704            jnb     acc.7,L004001?
008E            705   ;        EFM8_JDY40_test.c:159: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     706            anl     _TMR3CN0,#0x7F
0091            707   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         708            inc     r3
0092 8000       709            sjmp    L004004?
0094            710   L004007?:
0094            711   ;        EFM8_JDY40_test.c:161: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     712            mov     _TMR3CN0,#0x00
0097 22         713            ret
0098            714   ;------------------------------------------------------------
0098            715   ;Allocation info for local variables in function 'TIMER0_Init'
0098            716   ;------------------------------------------------------------
0098            717   ;------------------------------------------------------------
0098            718   ;        EFM8_JDY40_test.c:164: void TIMER0_Init(void)
0098            719   ;        -----------------------------------------
0098            720   ;         function TIMER0_Init
0098            721   ;        -----------------------------------------
0098            722   _TIMER0_Init:
0098            723   ;        EFM8_JDY40_test.c:166: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0098 5389F0     724            anl     _TMOD,#0xF0
009B            725   ;        EFM8_JDY40_test.c:167: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
009B 438901     726            orl     _TMOD,#0x01
009E            727   ;        EFM8_JDY40_test.c:168: TR0=0; // Stop Timer/Counter 0
009E C28C       728            clr     _TR0
00A0 22         729            ret
00A1            730   ;------------------------------------------------------------
00A1            731   ;Allocation info for local variables in function 'TIMER2_Init'
00A1            732   ;------------------------------------------------------------
00A1            733   ;------------------------------------------------------------
00A1            734   ;        EFM8_JDY40_test.c:174: void TIMER2_Init(void){
00A1            735   ;        -----------------------------------------
00A1            736   ;         function TIMER2_Init
00A1            737   ;        -----------------------------------------
00A1            738   _TIMER2_Init:
00A1            739   ;        EFM8_JDY40_test.c:176: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
00A1 75C800     740            mov     _TMR2CN0,#0x00
00A4            741   ;        EFM8_JDY40_test.c:177: CKCON0|=0b_0001_0000;
00A4 438E10     742            orl     _CKCON0,#0x10
00A7            743   ;        EFM8_JDY40_test.c:178: TMR2RL=(-(SYSCLK/(2*DEFAULT_F))); // Initialize reload value
00A7 75CAEE     744            mov     _TMR2RL,#0xEE
00AA 75CBF6     745            mov     (_TMR2RL >> 8),#0xF6
00AD            746   ;        EFM8_JDY40_test.c:179: TMR2=0xffff;   // Set to reload immediately
00AD 75CEFF     747            mov     _TMR2,#0xFF
00B0 75CFFF     748            mov     (_TMR2 >> 8),#0xFF
00B3            749   ;        EFM8_JDY40_test.c:180: ET2=1;         // Enable Timer2 interrupts
00B3 D2AD       750            setb    _ET2
00B5            751   ;        EFM8_JDY40_test.c:181: TR2=1;         // Start Timer2
00B5 D2CA       752            setb    _TR2
00B7            753   ;        EFM8_JDY40_test.c:182: EA=1; // Global interrupt enable
00B7 D2AF       754            setb    _EA
00B9 22         755            ret
00BA            756   ;------------------------------------------------------------
00BA            757   ;Allocation info for local variables in function 'Timer2_ISR'
00BA            758   ;------------------------------------------------------------
00BA            759   ;------------------------------------------------------------
00BA            760   ;        EFM8_JDY40_test.c:185: void Timer2_ISR (void) //interrupt INTERRUPT_TIMER2
00BA            761   ;        -----------------------------------------
00BA            762   ;         function Timer2_ISR
00BA            763   ;        -----------------------------------------
00BA            764   _Timer2_ISR:
00BA            765   ;        EFM8_JDY40_test.c:187: TF2H = 0; // Clear Timer2 interrupt flag
00BA C2CF       766            clr     _TF2H
00BC            767   ;        EFM8_JDY40_test.c:188: OUT0=!OUT0;
00BC B2B3       768            cpl     _P3_3
00BE 22         769            ret
00BF            770   ;------------------------------------------------------------
00BF            771   ;Allocation info for local variables in function 'waitms'
00BF            772   ;------------------------------------------------------------
00BF            773   ;ms                        Allocated to registers r2 r3 
00BF            774   ;j                         Allocated to registers r4 r5 
00BF            775   ;k                         Allocated to registers r6 
00BF            776   ;------------------------------------------------------------
00BF            777   ;        EFM8_JDY40_test.c:192: void waitms (unsigned int ms)
00BF            778   ;        -----------------------------------------
00BF            779   ;         function waitms
00BF            780   ;        -----------------------------------------
00BF            781   _waitms:
00BF AA82       782            mov     r2,dpl
00C1 AB83       783            mov     r3,dph
00C3            784   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00C3 7C00       785            mov     r4,#0x00
00C5 7D00       786            mov     r5,#0x00
00C7            787   L008005?:
00C7 C3         788            clr     c
00C8 EC         789            mov     a,r4
00C9 9A         790            subb    a,r2
00CA ED         791            mov     a,r5
00CB 9B         792            subb    a,r3
00CC 5000       793            jnc     L008009?
00CE            794   ;        EFM8_JDY40_test.c:197: for (k=0; k<4; k++) Timer3us(250);
00CE 7E00       795            mov     r6,#0x00
00D0            796   L008001?:
00D0 BE0420     797            cjne    r6,#0x04,L008018?
00D3            798   L008018?:
00D3 5000       799            jnc     L008007?
00D5 7582FA     800            mov     dpl,#0xFA
00D8 C002       801            push    ar2
00DA C003       802            push    ar3
00DC C004       803            push    ar4
00DE C005       804            push    ar5
00E0 C006       805            push    ar6
00E2 120000     806            lcall   _Timer3us
00E5 D006       807            pop     ar6
00E7 D005       808            pop     ar5
00E9 D004       809            pop     ar4
00EB D003       810            pop     ar3
00ED D002       811            pop     ar2
00EF 0E         812            inc     r6
00F0 8000       813            sjmp    L008001?
00F2            814   L008007?:
00F2            815   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00F2 0C         816            inc     r4
00F3 BC0060     817            cjne    r4,#0x00,L008005?
00F6 0D         818            inc     r5
00F7 8000       819            sjmp    L008005?
00F9            820   L008009?:
00F9 22         821            ret
00FA            822   ;------------------------------------------------------------
00FA            823   ;Allocation info for local variables in function 'InitPinADC'
00FA            824   ;------------------------------------------------------------
00FA            825   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00FA            826   ;portno                    Allocated to registers r2 
00FA            827   ;mask                      Allocated to registers r3 
00FA            828   ;------------------------------------------------------------
00FA            829   ;        EFM8_JDY40_test.c:200: void InitPinADC (unsigned char portno, unsigned char pinno)
00FA            830   ;        -----------------------------------------
00FA            831   ;         function InitPinADC
00FA            832   ;        -----------------------------------------
00FA            833   _InitPinADC:
00FA AA82       834            mov     r2,dpl
00FC            835   ;        EFM8_JDY40_test.c:204: mask=1<<pinno;
00FC 8560F0     836            mov     b,_InitPinADC_PARM_2
00FF 05F0       837            inc     b
0101 7401       838            mov     a,#0x01
0103 8000       839            sjmp    L009013?
0105            840   L009011?:
0105 25E0       841            add     a,acc
0107            842   L009013?:
0107 D5F020     843            djnz    b,L009011?
010A FB         844            mov     r3,a
010B            845   ;        EFM8_JDY40_test.c:206: SFRPAGE = 0x20;
010B 75A720     846            mov     _SFRPAGE,#0x20
010E            847   ;        EFM8_JDY40_test.c:207: switch (portno)
010E BA0060     848            cjne    r2,#0x00,L009014?
0111 8000       849            sjmp    L009001?
0113            850   L009014?:
0113 BA01E0     851            cjne    r2,#0x01,L009015?
0116 8000       852            sjmp    L009002?
0118            853   L009015?:
0118            854   ;        EFM8_JDY40_test.c:209: case 0:
0118 BA0260     855            cjne    r2,#0x02,L009005?
011B 8000       856            sjmp    L009003?
011D            857   L009001?:
011D            858   ;        EFM8_JDY40_test.c:210: P0MDIN &= (~mask); // Set pin as analog input
011D EB         859            mov     a,r3
011E F4         860            cpl     a
011F FA         861            mov     r2,a
0120 52F1       862            anl     _P0MDIN,a
0122            863   ;        EFM8_JDY40_test.c:211: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0122 EB         864            mov     a,r3
0123 42D4       865            orl     _P0SKIP,a
0125            866   ;        EFM8_JDY40_test.c:212: break;
0125            867   ;        EFM8_JDY40_test.c:213: case 1:
0125 8000       868            sjmp    L009005?
0127            869   L009002?:
0127            870   ;        EFM8_JDY40_test.c:214: P1MDIN &= (~mask); // Set pin as analog input
0127 EB         871            mov     a,r3
0128 F4         872            cpl     a
0129 FA         873            mov     r2,a
012A 52F2       874            anl     _P1MDIN,a
012C            875   ;        EFM8_JDY40_test.c:215: P1SKIP |= mask; // Skip Crossbar decoding for this pin
012C EB         876            mov     a,r3
012D 42D5       877            orl     _P1SKIP,a
012F            878   ;        EFM8_JDY40_test.c:216: break;
012F            879   ;        EFM8_JDY40_test.c:217: case 2:
012F 8000       880            sjmp    L009005?
0131            881   L009003?:
0131            882   ;        EFM8_JDY40_test.c:218: P2MDIN &= (~mask); // Set pin as analog input
0131 EB         883            mov     a,r3
0132 F4         884            cpl     a
0133 FA         885            mov     r2,a
0134 52F3       886            anl     _P2MDIN,a
0136            887   ;        EFM8_JDY40_test.c:219: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0136 EB         888            mov     a,r3
0137 42CC       889            orl     _P2SKIP,a
0139            890   ;        EFM8_JDY40_test.c:223: }
0139            891   L009005?:
0139            892   ;        EFM8_JDY40_test.c:224: SFRPAGE = 0x00;
0139 75A700     893            mov     _SFRPAGE,#0x00
013C 22         894            ret
013D            895   ;------------------------------------------------------------
013D            896   ;Allocation info for local variables in function 'ADC_at_Pin'
013D            897   ;------------------------------------------------------------
013D            898   ;pin                       Allocated to registers 
013D            899   ;------------------------------------------------------------
013D            900   ;        EFM8_JDY40_test.c:227: unsigned int ADC_at_Pin(unsigned char pin)
013D            901   ;        -----------------------------------------
013D            902   ;         function ADC_at_Pin
013D            903   ;        -----------------------------------------
013D            904   _ADC_at_Pin:
013D 8582BB     905            mov     _ADC0MX,dpl
0140            906   ;        EFM8_JDY40_test.c:230: ADINT = 0;
0140 C2ED       907            clr     _ADINT
0142            908   ;        EFM8_JDY40_test.c:231: ADBUSY = 1;     // Convert voltage at the pin
0142 D2EC       909            setb    _ADBUSY
0144            910   ;        EFM8_JDY40_test.c:232: while (!ADINT); // Wait for conversion to complete
0144            911   L010001?:
0144 30EDE0     912            jnb     _ADINT,L010001?
0147            913   ;        EFM8_JDY40_test.c:233: return (ADC0);
0147 85BD82     914            mov     dpl,_ADC0
014A 85BE83     915            mov     dph,(_ADC0 >> 8)
014D 22         916            ret
014E            917   ;------------------------------------------------------------
014E            918   ;Allocation info for local variables in function 'Get_ADC'
014E            919   ;------------------------------------------------------------
014E            920   ;------------------------------------------------------------
014E            921   ;        EFM8_JDY40_test.c:236: unsigned int Get_ADC (void)
014E            922   ;        -----------------------------------------
014E            923   ;         function Get_ADC
014E            924   ;        -----------------------------------------
014E            925   _Get_ADC:
014E            926   ;        EFM8_JDY40_test.c:238: ADINT = 0;
014E C2ED       927            clr     _ADINT
0150            928   ;        EFM8_JDY40_test.c:239: ADBUSY = 1;
0150 D2EC       929            setb    _ADBUSY
0152            930   ;        EFM8_JDY40_test.c:240: while (!ADINT); // Wait for conversion to complete
0152            931   L011001?:
0152 30ED20     932            jnb     _ADINT,L011001?
0155            933   ;        EFM8_JDY40_test.c:241: return (ADC0);
0155 85BD82     934            mov     dpl,_ADC0
0158 85BE83     935            mov     dph,(_ADC0 >> 8)
015B 22         936            ret
015C            937   ;------------------------------------------------------------
015C            938   ;Allocation info for local variables in function 'Volts_at_Pin'
015C            939   ;------------------------------------------------------------
015C            940   ;pin                       Allocated to registers r2 
015C            941   ;------------------------------------------------------------
015C            942   ;        EFM8_JDY40_test.c:245: float Volts_at_Pin(unsigned char pin)
015C            943   ;        -----------------------------------------
015C            944   ;         function Volts_at_Pin
015C            945   ;        -----------------------------------------
015C            946   _Volts_at_Pin:
015C            947   ;        EFM8_JDY40_test.c:247: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
015C 120000     948            lcall   _ADC_at_Pin
015F 120000     949            lcall   ___uint2fs
0162 AA82       950            mov     r2,dpl
0164 AB83       951            mov     r3,dph
0166 ACF0       952            mov     r4,b
0168 FD         953            mov     r5,a
0169 C002       954            push    ar2
016B C003       955            push    ar3
016D C004       956            push    ar4
016F C005       957            push    ar5
0171 903333     958            mov     dptr,#0x3333
0174 75F09B     959            mov     b,#0x9B
0177 7440       960            mov     a,#0x40
0179 120000     961            lcall   ___fsmul
017C AA82       962            mov     r2,dpl
017E AB83       963            mov     r3,dph
0180 ACF0       964            mov     r4,b
0182 FD         965            mov     r5,a
0183 E581       966            mov     a,sp
0185 24FC       967            add     a,#0xfc
0187 F581       968            mov     sp,a
0189 E4         969            clr     a
018A C0E0       970            push    acc
018C 74FC       971            mov     a,#0xFC
018E C0E0       972            push    acc
0190 747F       973            mov     a,#0x7F
0192 C0E0       974            push    acc
0194 7446       975            mov     a,#0x46
0196 C0E0       976            push    acc
0198 8A82       977            mov     dpl,r2
019A 8B83       978            mov     dph,r3
019C 8CF0       979            mov     b,r4
019E ED         980            mov     a,r5
019F 120000     981            lcall   ___fsdiv
01A2 AA82       982            mov     r2,dpl
01A4 AB83       983            mov     r3,dph
01A6 ACF0       984            mov     r4,b
01A8 FD         985            mov     r5,a
01A9 E581       986            mov     a,sp
01AB 24FC       987            add     a,#0xfc
01AD F581       988            mov     sp,a
01AF 8A82       989            mov     dpl,r2
01B1 8B83       990            mov     dph,r3
01B3 8CF0       991            mov     b,r4
01B5 ED         992            mov     a,r5
01B6 22         993            ret
01B7            994   ;------------------------------------------------------------
01B7            995   ;Allocation info for local variables in function 'UART1_Init'
01B7            996   ;------------------------------------------------------------
01B7            997   ;baudrate                  Allocated to registers r2 r3 r4 r5 
01B7            998   ;------------------------------------------------------------
01B7            999   ;        EFM8_JDY40_test.c:250: void UART1_Init (unsigned long baudrate)
01B7           1000   ;        -----------------------------------------
01B7           1001   ;         function UART1_Init
01B7           1002   ;        -----------------------------------------
01B7           1003   _UART1_Init:
01B7 AA82      1004            mov     r2,dpl
01B9 AB83      1005            mov     r3,dph
01BB ACF0      1006            mov     r4,b
01BD FD        1007            mov     r5,a
01BE           1008   ;        EFM8_JDY40_test.c:252: SFRPAGE = 0x20;
01BE 75A720    1009            mov     _SFRPAGE,#0x20
01C1           1010   ;        EFM8_JDY40_test.c:253: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01C1 75930C    1011            mov     _SMOD1,#0x0C
01C4           1012   ;        EFM8_JDY40_test.c:254: SCON1 = 0x10;
01C4 75C810    1013            mov     _SCON1,#0x10
01C7           1014   ;        EFM8_JDY40_test.c:255: SBCON1 =0x00;   // disable baud rate generator
01C7 759400    1015            mov     _SBCON1,#0x00
01CA           1016   ;        EFM8_JDY40_test.c:256: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01CA 8A00      1017            mov     __divulong_PARM_2,r2
01CC 8B01      1018            mov     (__divulong_PARM_2 + 1),r3
01CE 8C02      1019            mov     (__divulong_PARM_2 + 2),r4
01D0 8D03      1020            mov     (__divulong_PARM_2 + 3),r5
01D2 90A200    1021            mov     dptr,#0xA200
01D5 75F04A    1022            mov     b,#0x4A
01D8 7404      1023            mov     a,#0x04
01DA 120000    1024            lcall   __divulong
01DD AA82      1025            mov     r2,dpl
01DF AB83      1026            mov     r3,dph
01E1 ACF0      1027            mov     r4,b
01E3 FD        1028            mov     r5,a
01E4 750018    1029            mov     __divulong_PARM_2,#0x18
01E7 E4        1030            clr     a
01E8 F501      1031            mov     (__divulong_PARM_2 + 1),a
01EA F502      1032            mov     (__divulong_PARM_2 + 2),a
01EC F503      1033            mov     (__divulong_PARM_2 + 3),a
01EE 8A82      1034            mov     dpl,r2
01F0 8B83      1035            mov     dph,r3
01F2 8CF0      1036            mov     b,r4
01F4 ED        1037            mov     a,r5
01F5 120000    1038            lcall   __divulong
01F8 AA82      1039            mov     r2,dpl
01FA AB83      1040            mov     r3,dph
01FC ACF0      1041            mov     r4,b
01FE FD        1042            mov     r5,a
01FF E4        1043            clr     a
0200 C3        1044            clr     c
0201 9A        1045            subb    a,r2
0202 FA        1046            mov     r2,a
0203 E4        1047            clr     a
0204 9B        1048            subb    a,r3
0205 FB        1049            mov     r3,a
0206 7401      1050            mov     a,#0x01
0208 9C        1051            subb    a,r4
0209 E4        1052            clr     a
020A 9D        1053            subb    a,r5
020B 8A95      1054            mov     _SBRL1,r2
020D 8B96      1055            mov     (_SBRL1 >> 8),r3
020F           1056   ;        EFM8_JDY40_test.c:257: TI1 = 1; // indicate ready for TX
020F D2C9      1057            setb    _TI1
0211           1058   ;        EFM8_JDY40_test.c:258: SBCON1 |= 0x40;   // enable baud rate generator
0211 439440    1059            orl     _SBCON1,#0x40
0214           1060   ;        EFM8_JDY40_test.c:259: SFRPAGE = 0x00;
0214 75A700    1061            mov     _SFRPAGE,#0x00
0217 22        1062            ret
0218           1063   ;------------------------------------------------------------
0218           1064   ;Allocation info for local variables in function 'putchar1'
0218           1065   ;------------------------------------------------------------
0218           1066   ;c                         Allocated to registers r2 
0218           1067   ;------------------------------------------------------------
0218           1068   ;        EFM8_JDY40_test.c:262: void putchar1 (char c) 
0218           1069   ;        -----------------------------------------
0218           1070   ;         function putchar1
0218           1071   ;        -----------------------------------------
0218           1072   _putchar1:
0218 AA82      1073            mov     r2,dpl
021A           1074   ;        EFM8_JDY40_test.c:264: SFRPAGE = 0x20;
021A 75A720    1075            mov     _SFRPAGE,#0x20
021D           1076   ;        EFM8_JDY40_test.c:265: while (!TI1);
021D           1077   L014001?:
021D           1078   ;        EFM8_JDY40_test.c:266: TI1=0;
021D 10C930    1079            jbc     _TI1,L014008?
0220 8000      1080            sjmp    L014001?
0222           1081   L014008?:
0222           1082   ;        EFM8_JDY40_test.c:267: SBUF1 = c;
0222 8A92      1083            mov     _SBUF1,r2
0224           1084   ;        EFM8_JDY40_test.c:268: SFRPAGE = 0x00;
0224 75A700    1085            mov     _SFRPAGE,#0x00
0227 22        1086            ret
0228           1087   ;------------------------------------------------------------
0228           1088   ;Allocation info for local variables in function 'sendstr1'
0228           1089   ;------------------------------------------------------------
0228           1090   ;s                         Allocated to registers r2 r3 r4 
0228           1091   ;------------------------------------------------------------
0228           1092   ;        EFM8_JDY40_test.c:271: void sendstr1 (char * s)
0228           1093   ;        -----------------------------------------
0228           1094   ;         function sendstr1
0228           1095   ;        -----------------------------------------
0228           1096   _sendstr1:
0228 AA82      1097            mov     r2,dpl
022A AB83      1098            mov     r3,dph
022C ACF0      1099            mov     r4,b
022E           1100   ;        EFM8_JDY40_test.c:273: while(*s)
022E           1101   L015001?:
022E 8A82      1102            mov     dpl,r2
0230 8B83      1103            mov     dph,r3
0232 8CF0      1104            mov     b,r4
0234 120000    1105            lcall   __gptrget
0237 FD        1106            mov     r5,a
0238 6000      1107            jz      L015004?
023A           1108   ;        EFM8_JDY40_test.c:275: putchar1(*s);
023A 8D82      1109            mov     dpl,r5
023C C002      1110            push    ar2
023E C003      1111            push    ar3
0240 C004      1112            push    ar4
0242 120000    1113            lcall   _putchar1
0245 D004      1114            pop     ar4
0247 D003      1115            pop     ar3
0249 D002      1116            pop     ar2
024B           1117   ;        EFM8_JDY40_test.c:276: s++;     
024B 0A        1118            inc     r2
024C BA0070    1119            cjne    r2,#0x00,L015001?
024F 0B        1120            inc     r3
0250 8000      1121            sjmp    L015001?
0252           1122   L015004?:
0252 22        1123            ret
0253           1124   ;------------------------------------------------------------
0253           1125   ;Allocation info for local variables in function 'getchar1'
0253           1126   ;------------------------------------------------------------
0253           1127   ;c                         Allocated to registers 
0253           1128   ;------------------------------------------------------------
0253           1129   ;        EFM8_JDY40_test.c:280: char getchar1 (void)
0253           1130   ;        -----------------------------------------
0253           1131   ;         function getchar1
0253           1132   ;        -----------------------------------------
0253           1133   _getchar1:
0253           1134   ;        EFM8_JDY40_test.c:283: SFRPAGE = 0x20;
0253 75A720    1135            mov     _SFRPAGE,#0x20
0256           1136   ;        EFM8_JDY40_test.c:284: while (!RI1);
0256           1137   L016001?:
0256           1138   ;        EFM8_JDY40_test.c:285: RI1=0;
0256 10C870    1139            jbc     _RI1,L016008?
0259 8000      1140            sjmp    L016001?
025B           1141   L016008?:
025B           1142   ;        EFM8_JDY40_test.c:287: SCON1&=0b_0011_1111;
025B 53C83F    1143            anl     _SCON1,#0x3F
025E           1144   ;        EFM8_JDY40_test.c:288: c = SBUF1;
025E 859282    1145            mov     dpl,_SBUF1
0261           1146   ;        EFM8_JDY40_test.c:289: SFRPAGE = 0x00;
0261 75A700    1147            mov     _SFRPAGE,#0x00
0264           1148   ;        EFM8_JDY40_test.c:290: return (c);
0264 22        1149            ret
0265           1150   ;------------------------------------------------------------
0265           1151   ;Allocation info for local variables in function 'getchar1_with_timeout'
0265           1152   ;------------------------------------------------------------
0265           1153   ;c                         Allocated to registers 
0265           1154   ;timeout                   Allocated to registers r2 r3 
0265           1155   ;------------------------------------------------------------
0265           1156   ;        EFM8_JDY40_test.c:293: char getchar1_with_timeout (void)
0265           1157   ;        -----------------------------------------
0265           1158   ;         function getchar1_with_timeout
0265           1159   ;        -----------------------------------------
0265           1160   _getchar1_with_timeout:
0265           1161   ;        EFM8_JDY40_test.c:297: SFRPAGE = 0x20;
0265 75A720    1162            mov     _SFRPAGE,#0x20
0268           1163   ;        EFM8_JDY40_test.c:299: while (!RI1)
0268 7A00      1164            mov     r2,#0x00
026A 7B00      1165            mov     r3,#0x00
026C           1166   L017003?:
026C 20C8F0    1167            jb      _RI1,L017005?
026F           1168   ;        EFM8_JDY40_test.c:301: SFRPAGE = 0x00;
026F 75A700    1169            mov     _SFRPAGE,#0x00
0272           1170   ;        EFM8_JDY40_test.c:302: Timer3us(20);
0272 758214    1171            mov     dpl,#0x14
0275 C002      1172            push    ar2
0277 C003      1173            push    ar3
0279 120000    1174            lcall   _Timer3us
027C D003      1175            pop     ar3
027E D002      1176            pop     ar2
0280           1177   ;        EFM8_JDY40_test.c:303: SFRPAGE = 0x20;
0280 75A720    1178            mov     _SFRPAGE,#0x20
0283           1179   ;        EFM8_JDY40_test.c:304: timeout++;
0283 0A        1180            inc     r2
0284 BA0030    1181            cjne    r2,#0x00,L017012?
0287 0B        1182            inc     r3
0288           1183   L017012?:
0288           1184   ;        EFM8_JDY40_test.c:305: if(timeout==25000)
0288 BAA8B0    1185            cjne    r2,#0xA8,L017003?
028B BB61B0    1186            cjne    r3,#0x61,L017003?
028E           1187   ;        EFM8_JDY40_test.c:307: SFRPAGE = 0x00;
028E 75A700    1188            mov     _SFRPAGE,#0x00
0291           1189   ;        EFM8_JDY40_test.c:308: return ('\n'); // Timeout after half second
0291 75820A    1190            mov     dpl,#0x0A
0294 22        1191            ret
0295           1192   L017005?:
0295           1193   ;        EFM8_JDY40_test.c:311: RI1=0;
0295 C2C8      1194            clr     _RI1
0297           1195   ;        EFM8_JDY40_test.c:313: SCON1&=0b_0011_1111;
0297 53C83F    1196            anl     _SCON1,#0x3F
029A           1197   ;        EFM8_JDY40_test.c:314: c = SBUF1;
029A 859282    1198            mov     dpl,_SBUF1
029D           1199   ;        EFM8_JDY40_test.c:315: SFRPAGE = 0x00;
029D 75A700    1200            mov     _SFRPAGE,#0x00
02A0           1201   ;        EFM8_JDY40_test.c:316: return (c);
02A0 22        1202            ret
02A1           1203   ;------------------------------------------------------------
02A1           1204   ;Allocation info for local variables in function 'getstr1'
02A1           1205   ;------------------------------------------------------------
02A1           1206   ;s                         Allocated to registers r2 r3 r4 
02A1           1207   ;c                         Allocated to registers r5 
02A1           1208   ;------------------------------------------------------------
02A1           1209   ;        EFM8_JDY40_test.c:319: void getstr1 (char * s)
02A1           1210   ;        -----------------------------------------
02A1           1211   ;         function getstr1
02A1           1212   ;        -----------------------------------------
02A1           1213   _getstr1:
02A1 AA82      1214            mov     r2,dpl
02A3 AB83      1215            mov     r3,dph
02A5 ACF0      1216            mov     r4,b
02A7           1217   ;        EFM8_JDY40_test.c:323: while(1)
02A7           1218   L018004?:
02A7           1219   ;        EFM8_JDY40_test.c:325: c=getchar1_with_timeout();
02A7 C002      1220            push    ar2
02A9 C003      1221            push    ar3
02AB C004      1222            push    ar4
02AD 120000    1223            lcall   _getchar1_with_timeout
02B0 AD82      1224            mov     r5,dpl
02B2 D004      1225            pop     ar4
02B4 D003      1226            pop     ar3
02B6 D002      1227            pop     ar2
02B8           1228   ;        EFM8_JDY40_test.c:326: if(c=='\n')
02B8 BD0AB0    1229            cjne    r5,#0x0A,L018002?
02BB           1230   ;        EFM8_JDY40_test.c:328: *s=0;
02BB 8A82      1231            mov     dpl,r2
02BD 8B83      1232            mov     dph,r3
02BF 8CF0      1233            mov     b,r4
02C1 E4        1234            clr     a
02C2           1235   ;        EFM8_JDY40_test.c:329: return;
02C2 020000    1236            ljmp    __gptrput
02C5           1237   L018002?:
02C5           1238   ;        EFM8_JDY40_test.c:331: *s=c;
02C5 8A82      1239            mov     dpl,r2
02C7 8B83      1240            mov     dph,r3
02C9 8CF0      1241            mov     b,r4
02CB ED        1242            mov     a,r5
02CC 120000    1243            lcall   __gptrput
02CF A3        1244            inc     dptr
02D0 AA82      1245            mov     r2,dpl
02D2 AB83      1246            mov     r3,dph
02D4           1247   ;        EFM8_JDY40_test.c:332: s++;
02D4 8000      1248            sjmp    L018004?
02D6           1249   ;------------------------------------------------------------
02D6           1250   ;Allocation info for local variables in function 'RXU1'
02D6           1251   ;------------------------------------------------------------
02D6           1252   ;------------------------------------------------------------
02D6           1253   ;        EFM8_JDY40_test.c:337: bit RXU1 (void)
02D6           1254   ;        -----------------------------------------
02D6           1255   ;         function RXU1
02D6           1256   ;        -----------------------------------------
02D6           1257   _RXU1:
02D6           1258   ;        EFM8_JDY40_test.c:340: SFRPAGE = 0x20;
02D6 75A720    1259            mov     _SFRPAGE,#0x20
02D9           1260   ;        EFM8_JDY40_test.c:341: mybit=RI1;
02D9 A2C8      1261            mov     c,_RI1
02DB           1262   ;        EFM8_JDY40_test.c:342: SFRPAGE = 0x00;
02DB 75A700    1263            mov     _SFRPAGE,#0x00
02DE           1264   ;        EFM8_JDY40_test.c:343: return mybit;
02DE 22        1265            ret
02DF           1266   ;------------------------------------------------------------
02DF           1267   ;Allocation info for local variables in function 'waitms_or_RI1'
02DF           1268   ;------------------------------------------------------------
02DF           1269   ;ms                        Allocated to registers r2 r3 
02DF           1270   ;j                         Allocated to registers r4 r5 
02DF           1271   ;k                         Allocated to registers r6 
02DF           1272   ;------------------------------------------------------------
02DF           1273   ;        EFM8_JDY40_test.c:346: void waitms_or_RI1 (unsigned int ms)
02DF           1274   ;        -----------------------------------------
02DF           1275   ;         function waitms_or_RI1
02DF           1276   ;        -----------------------------------------
02DF           1277   _waitms_or_RI1:
02DF AA82      1278            mov     r2,dpl
02E1 AB83      1279            mov     r3,dph
02E3           1280   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
02E3 7C00      1281            mov     r4,#0x00
02E5 7D00      1282            mov     r5,#0x00
02E7           1283   L020007?:
02E7 C3        1284            clr     c
02E8 EC        1285            mov     a,r4
02E9 9A        1286            subb    a,r2
02EA ED        1287            mov     a,r5
02EB 9B        1288            subb    a,r3
02EC 5000      1289            jnc     L020011?
02EE           1290   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
02EE 7E00      1291            mov     r6,#0x00
02F0           1292   L020003?:
02F0 BE04F0    1293            cjne    r6,#0x04,L020019?
02F3           1294   L020019?:
02F3 5000      1295            jnc     L020009?
02F5           1296   ;        EFM8_JDY40_test.c:354: if(RXU1()) return;
02F5 C002      1297            push    ar2
02F7 C003      1298            push    ar3
02F9 C004      1299            push    ar4
02FB C005      1300            push    ar5
02FD C006      1301            push    ar6
02FF 120000    1302            lcall   _RXU1
0302 E4        1303            clr     a
0303 33        1304            rlc     a
0304 D006      1305            pop     ar6
0306 D005      1306            pop     ar5
0308 D004      1307            pop     ar4
030A D003      1308            pop     ar3
030C D002      1309            pop     ar2
030E 6000      1310            jz      L020002?
0310 22        1311            ret
0311           1312   L020002?:
0311           1313   ;        EFM8_JDY40_test.c:355: Timer3us(250);
0311 7582FA    1314            mov     dpl,#0xFA
0314 C002      1315            push    ar2
0316 C003      1316            push    ar3
0318 C004      1317            push    ar4
031A C005      1318            push    ar5
031C C006      1319            push    ar6
031E 120000    1320            lcall   _Timer3us
0321 D006      1321            pop     ar6
0323 D005      1322            pop     ar5
0325 D004      1323            pop     ar4
0327 D003      1324            pop     ar3
0329 D002      1325            pop     ar2
032B           1326   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
032B 0E        1327            inc     r6
032C 8000      1328            sjmp    L020003?
032E           1329   L020009?:
032E           1330   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
032E 0C        1331            inc     r4
032F BC0030    1332            cjne    r4,#0x00,L020007?
0332 0D        1333            inc     r5
0333 8000      1334            sjmp    L020007?
0335           1335   L020011?:
0335 22        1336            ret
0336           1337   ;------------------------------------------------------------
0336           1338   ;Allocation info for local variables in function 'SendATCommand'
0336           1339   ;------------------------------------------------------------
0336           1340   ;s                         Allocated to registers r2 r3 r4 
0336           1341   ;------------------------------------------------------------
0336           1342   ;        EFM8_JDY40_test.c:360: void SendATCommand (char * s)
0336           1343   ;        -----------------------------------------
0336           1344   ;         function SendATCommand
0336           1345   ;        -----------------------------------------
0336           1346   _SendATCommand:
0336 AA82      1347            mov     r2,dpl
0338 AB83      1348            mov     r3,dph
033A ACF0      1349            mov     r4,b
033C           1350   ;        EFM8_JDY40_test.c:362: printf("Command: %s", s);
033C C002      1351            push    ar2
033E C003      1352            push    ar3
0340 C004      1353            push    ar4
0342 C002      1354            push    ar2
0344 C003      1355            push    ar3
0346 C004      1356            push    ar4
0348 74B0      1357            mov     a,#__str_0
034A C0E0      1358            push    acc
034C 74C4      1359            mov     a,#(__str_0 >> 8)
034E C0E0      1360            push    acc
0350 7480      1361            mov     a,#0x80
0352 C0E0      1362            push    acc
0354 120000    1363            lcall   _printf
0357 E581      1364            mov     a,sp
0359 24FA      1365            add     a,#0xfa
035B F581      1366            mov     sp,a
035D           1367   ;        EFM8_JDY40_test.c:363: P3_0=0; // 'set' pin to 0 is 'AT' mode.
035D C2B0      1368            clr     _P3_0
035F           1369   ;        EFM8_JDY40_test.c:364: waitms(5);
035F 900005    1370            mov     dptr,#0x0005
0362 120000    1371            lcall   _waitms
0365 D004      1372            pop     ar4
0367 D003      1373            pop     ar3
0369 D002      1374            pop     ar2
036B           1375   ;        EFM8_JDY40_test.c:365: sendstr1(s);
036B 8A82      1376            mov     dpl,r2
036D 8B83      1377            mov     dph,r3
036F 8CF0      1378            mov     b,r4
0371 120000    1379            lcall   _sendstr1
0374           1380   ;        EFM8_JDY40_test.c:366: getstr1(buff);
0374 9018D0    1381            mov     dptr,#_buff
0377 75F040    1382            mov     b,#0x40
037A 120000    1383            lcall   _getstr1
037D           1384   ;        EFM8_JDY40_test.c:367: waitms(10);
037D 90000A    1385            mov     dptr,#0x000A
0380 120000    1386            lcall   _waitms
0383           1387   ;        EFM8_JDY40_test.c:368: P3_0=1; // 'set' pin to 1 is normal operation mode.
0383 D2B0      1388            setb    _P3_0
0385           1389   ;        EFM8_JDY40_test.c:369: printf("Response: %s\r\n", buff);
0385 74D0      1390            mov     a,#_buff
0387 C0E0      1391            push    acc
0389 7418      1392            mov     a,#(_buff >> 8)
038B C0E0      1393            push    acc
038D 7440      1394            mov     a,#0x40
038F C0E0      1395            push    acc
0391 7430      1396            mov     a,#__str_1
0393 C0E0      1397            push    acc
0395 74C5      1398            mov     a,#(__str_1 >> 8)
0397 C0E0      1399            push    acc
0399 7480      1400            mov     a,#0x80
039B C0E0      1401            push    acc
039D 120000    1402            lcall   _printf
03A0 E581      1403            mov     a,sp
03A2 24FA      1404            add     a,#0xfa
03A4 F581      1405            mov     sp,a
03A6 22        1406            ret
03A7           1407   ;------------------------------------------------------------
03A7           1408   ;Allocation info for local variables in function 'LCD_pulse'
03A7           1409   ;------------------------------------------------------------
03A7           1410   ;------------------------------------------------------------
03A7           1411   ;        EFM8_JDY40_test.c:374: void LCD_pulse (void)
03A7           1412   ;        -----------------------------------------
03A7           1413   ;         function LCD_pulse
03A7           1414   ;        -----------------------------------------
03A7           1415   _LCD_pulse:
03A7           1416   ;        EFM8_JDY40_test.c:376: LCD_E=1;
03A7 D2A0      1417            setb    _P2_0
03A9           1418   ;        EFM8_JDY40_test.c:377: Timer3us(40);
03A9 758228    1419            mov     dpl,#0x28
03AC 120000    1420            lcall   _Timer3us
03AF           1421   ;        EFM8_JDY40_test.c:378: LCD_E=0;
03AF C2A0      1422            clr     _P2_0
03B1 22        1423            ret
03B2           1424   ;------------------------------------------------------------
03B2           1425   ;Allocation info for local variables in function 'LCD_byte'
03B2           1426   ;------------------------------------------------------------
03B2           1427   ;x                         Allocated to registers r2 
03B2           1428   ;------------------------------------------------------------
03B2           1429   ;        EFM8_JDY40_test.c:381: void LCD_byte (unsigned char x)
03B2           1430   ;        -----------------------------------------
03B2           1431   ;         function LCD_byte
03B2           1432   ;        -----------------------------------------
03B2           1433   _LCD_byte:
03B2 AA82      1434            mov     r2,dpl
03B4           1435   ;        EFM8_JDY40_test.c:384: ACC=x; //Send high nible
03B4 8AE0      1436            mov     _ACC,r2
03B6           1437   ;        EFM8_JDY40_test.c:385: LCD_D7=ACC_7;
03B6 A2E7      1438            mov     c,_ACC_7
03B8 9290      1439            mov     _P1_0,c
03BA           1440   ;        EFM8_JDY40_test.c:386: LCD_D6=ACC_6;
03BA A2E6      1441            mov     c,_ACC_6
03BC 9291      1442            mov     _P1_1,c
03BE           1443   ;        EFM8_JDY40_test.c:387: LCD_D5=ACC_5;
03BE A2E5      1444            mov     c,_ACC_5
03C0 9292      1445            mov     _P1_2,c
03C2           1446   ;        EFM8_JDY40_test.c:388: LCD_D4=ACC_4;
03C2 A2E4      1447            mov     c,_ACC_4
03C4 9293      1448            mov     _P1_3,c
03C6           1449   ;        EFM8_JDY40_test.c:389: LCD_pulse();
03C6 C002      1450            push    ar2
03C8 120000    1451            lcall   _LCD_pulse
03CB           1452   ;        EFM8_JDY40_test.c:390: Timer3us(40);
03CB 758228    1453            mov     dpl,#0x28
03CE 120000    1454            lcall   _Timer3us
03D1 D002      1455            pop     ar2
03D3           1456   ;        EFM8_JDY40_test.c:391: ACC=x; //Send low nible
03D3 8AE0      1457            mov     _ACC,r2
03D5           1458   ;        EFM8_JDY40_test.c:392: LCD_D7=ACC_3;
03D5 A2E3      1459            mov     c,_ACC_3
03D7 9290      1460            mov     _P1_0,c
03D9           1461   ;        EFM8_JDY40_test.c:393: LCD_D6=ACC_2;
03D9 A2E2      1462            mov     c,_ACC_2
03DB 9291      1463            mov     _P1_1,c
03DD           1464   ;        EFM8_JDY40_test.c:394: LCD_D5=ACC_1;
03DD A2E1      1465            mov     c,_ACC_1
03DF 9292      1466            mov     _P1_2,c
03E1           1467   ;        EFM8_JDY40_test.c:395: LCD_D4=ACC_0;
03E1 A2E0      1468            mov     c,_ACC_0
03E3 9293      1469            mov     _P1_3,c
03E5           1470   ;        EFM8_JDY40_test.c:396: LCD_pulse();
03E5 020000    1471            ljmp    _LCD_pulse
03E8           1472   ;------------------------------------------------------------
03E8           1473   ;Allocation info for local variables in function 'WriteData'
03E8           1474   ;------------------------------------------------------------
03E8           1475   ;x                         Allocated to registers r2 
03E8           1476   ;------------------------------------------------------------
03E8           1477   ;        EFM8_JDY40_test.c:399: void WriteData (unsigned char x)
03E8           1478   ;        -----------------------------------------
03E8           1479   ;         function WriteData
03E8           1480   ;        -----------------------------------------
03E8           1481   _WriteData:
03E8 AA82      1482            mov     r2,dpl
03EA           1483   ;        EFM8_JDY40_test.c:401: LCD_RS=1;
03EA D297      1484            setb    _P1_7
03EC           1485   ;        EFM8_JDY40_test.c:402: LCD_byte(x);
03EC 8A82      1486            mov     dpl,r2
03EE 120000    1487            lcall   _LCD_byte
03F1           1488   ;        EFM8_JDY40_test.c:403: waitms(2);
03F1 900002    1489            mov     dptr,#0x0002
03F4 020000    1490            ljmp    _waitms
03F7           1491   ;------------------------------------------------------------
03F7           1492   ;Allocation info for local variables in function 'WriteCommand'
03F7           1493   ;------------------------------------------------------------
03F7           1494   ;x                         Allocated to registers r2 
03F7           1495   ;------------------------------------------------------------
03F7           1496   ;        EFM8_JDY40_test.c:406: void WriteCommand (unsigned char x)
03F7           1497   ;        -----------------------------------------
03F7           1498   ;         function WriteCommand
03F7           1499   ;        -----------------------------------------
03F7           1500   _WriteCommand:
03F7 AA82      1501            mov     r2,dpl
03F9           1502   ;        EFM8_JDY40_test.c:408: LCD_RS=0;
03F9 C297      1503            clr     _P1_7
03FB           1504   ;        EFM8_JDY40_test.c:409: LCD_byte(x);
03FB 8A82      1505            mov     dpl,r2
03FD 120000    1506            lcall   _LCD_byte
0400           1507   ;        EFM8_JDY40_test.c:410: waitms(5);
0400 900005    1508            mov     dptr,#0x0005
0403 020000    1509            ljmp    _waitms
0406           1510   ;------------------------------------------------------------
0406           1511   ;Allocation info for local variables in function 'LCD_4BIT'
0406           1512   ;------------------------------------------------------------
0406           1513   ;------------------------------------------------------------
0406           1514   ;        EFM8_JDY40_test.c:413: void LCD_4BIT (void)
0406           1515   ;        -----------------------------------------
0406           1516   ;         function LCD_4BIT
0406           1517   ;        -----------------------------------------
0406           1518   _LCD_4BIT:
0406           1519   ;        EFM8_JDY40_test.c:415: LCD_E=0; // Resting state of LCD's enable is zero
0406 C2A0      1520            clr     _P2_0
0408           1521   ;        EFM8_JDY40_test.c:417: waitms(20);
0408 900014    1522            mov     dptr,#0x0014
040B 120000    1523            lcall   _waitms
040E           1524   ;        EFM8_JDY40_test.c:419: WriteCommand(0x33);
040E 758233    1525            mov     dpl,#0x33
0411 120000    1526            lcall   _WriteCommand
0414           1527   ;        EFM8_JDY40_test.c:420: WriteCommand(0x33);
0414 758233    1528            mov     dpl,#0x33
0417 120000    1529            lcall   _WriteCommand
041A           1530   ;        EFM8_JDY40_test.c:421: WriteCommand(0x32); // Change to 4-bit mode
041A 758232    1531            mov     dpl,#0x32
041D 120000    1532            lcall   _WriteCommand
0420           1533   ;        EFM8_JDY40_test.c:424: WriteCommand(0x28);
0420 758228    1534            mov     dpl,#0x28
0423 120000    1535            lcall   _WriteCommand
0426           1536   ;        EFM8_JDY40_test.c:425: WriteCommand(0x0c);
0426 75820C    1537            mov     dpl,#0x0C
0429 120000    1538            lcall   _WriteCommand
042C           1539   ;        EFM8_JDY40_test.c:426: WriteCommand(0x01); // Clear screen command (takes some time)
042C 758201    1540            mov     dpl,#0x01
042F 120000    1541            lcall   _WriteCommand
0432           1542   ;        EFM8_JDY40_test.c:427: waitms(20); // Wait for clear screen command to finsih.
0432 900014    1543            mov     dptr,#0x0014
0435 020000    1544            ljmp    _waitms
0438           1545   ;------------------------------------------------------------
0438           1546   ;Allocation info for local variables in function 'LCDprint'
0438           1547   ;------------------------------------------------------------
0438           1548   ;line                      Allocated with name '_LCDprint_PARM_2'
0438           1549   ;string                    Allocated to registers r2 r3 r4 
0438           1550   ;j                         Allocated to registers r5 r6 
0438           1551   ;------------------------------------------------------------
0438           1552   ;        EFM8_JDY40_test.c:430: void LCDprint(char * string, unsigned char line, bit clear)
0438           1553   ;        -----------------------------------------
0438           1554   ;         function LCDprint
0438           1555   ;        -----------------------------------------
0438           1556   _LCDprint:
0438 AA82      1557            mov     r2,dpl
043A AB83      1558            mov     r3,dph
043C ACF0      1559            mov     r4,b
043E           1560   ;        EFM8_JDY40_test.c:434: WriteCommand(line==2?0xc0:0x80);
043E 7402      1561            mov     a,#0x02
0440 B52070    1562            cjne    a,_LCDprint_PARM_2,L027013?
0443 7DC0      1563            mov     r5,#0xC0
0445 8000      1564            sjmp    L027014?
0447           1565   L027013?:
0447 7D80      1566            mov     r5,#0x80
0449           1567   L027014?:
0449 8D82      1568            mov     dpl,r5
044B C002      1569            push    ar2
044D C003      1570            push    ar3
044F C004      1571            push    ar4
0451 120000    1572            lcall   _WriteCommand
0454           1573   ;        EFM8_JDY40_test.c:435: waitms(5);
0454 900005    1574            mov     dptr,#0x0005
0457 120000    1575            lcall   _waitms
045A D004      1576            pop     ar4
045C D003      1577            pop     ar3
045E D002      1578            pop     ar2
0460           1579   ;        EFM8_JDY40_test.c:436: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
0460 7D00      1580            mov     r5,#0x00
0462 7E00      1581            mov     r6,#0x00
0464           1582   L027003?:
0464 ED        1583            mov     a,r5
0465 2A        1584            add     a,r2
0466 FF        1585            mov     r7,a
0467 EE        1586            mov     a,r6
0468 3B        1587            addc    a,r3
0469 F8        1588            mov     r0,a
046A 8C01      1589            mov     ar1,r4
046C 8F82      1590            mov     dpl,r7
046E 8883      1591            mov     dph,r0
0470 89F0      1592            mov     b,r1
0472 120000    1593            lcall   __gptrget
0475 FF        1594            mov     r7,a
0476 6000      1595            jz      L027006?
0478 8F82      1596            mov     dpl,r7
047A C002      1597            push    ar2
047C C003      1598            push    ar3
047E C004      1599            push    ar4
0480 C005      1600            push    ar5
0482 C006      1601            push    ar6
0484 120000    1602            lcall   _WriteData
0487 D006      1603            pop     ar6
0489 D005      1604            pop     ar5
048B D004      1605            pop     ar4
048D D003      1606            pop     ar3
048F D002      1607            pop     ar2
0491 0D        1608            inc     r5
0492 BD00F0    1609            cjne    r5,#0x00,L027003?
0495 0E        1610            inc     r6
0496 8000      1611            sjmp    L027003?
0498           1612   L027006?:
0498           1613   ;        EFM8_JDY40_test.c:437: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0498 309070    1614            jnb     _LCDprint_PARM_3,L027011?
049B 8D02      1615            mov     ar2,r5
049D 8E03      1616            mov     ar3,r6
049F           1617   L027007?:
049F C3        1618            clr     c
04A0 EA        1619            mov     a,r2
04A1 9410      1620            subb    a,#0x10
04A3 EB        1621            mov     a,r3
04A4 6480      1622            xrl     a,#0x80
04A6 9480      1623            subb    a,#0x80
04A8 5000      1624            jnc     L027011?
04AA 758220    1625            mov     dpl,#0x20
04AD C002      1626            push    ar2
04AF C003      1627            push    ar3
04B1 120000    1628            lcall   _WriteData
04B4 D003      1629            pop     ar3
04B6 D002      1630            pop     ar2
04B8 0A        1631            inc     r2
04B9 BA00B0    1632            cjne    r2,#0x00,L027007?
04BC 0B        1633            inc     r3
04BD 8000      1634            sjmp    L027007?
04BF           1635   L027011?:
04BF 22        1636            ret
04C0           1637   ;------------------------------------------------------------
04C0           1638   ;Allocation info for local variables in function 'main'
04C0           1639   ;------------------------------------------------------------
04C0           1640   ;cnt                       Allocated to registers r2 r3 
04C0           1641   ;volt_x                    Allocated with name '_main_volt_x_1_123'
04C0           1642   ;volt_y                    Allocated to registers r4 r5 r6 r7 
04C0           1643   ;frequency                 Allocated to registers r4 r5 r6 r7 
04C0           1644   ;------------------------------------------------------------
04C0           1645   ;        EFM8_JDY40_test.c:440: void main (void)
04C0           1646   ;        -----------------------------------------
04C0           1647   ;         function main
04C0           1648   ;        -----------------------------------------
04C0           1649   _main:
04C0           1650   ;        EFM8_JDY40_test.c:449: InitADC();
04C0 120000    1651            lcall   _InitADC
04C3           1652   ;        EFM8_JDY40_test.c:450: waitms(500);
04C3 9001F4    1653            mov     dptr,#0x01F4
04C6 120000    1654            lcall   _waitms
04C9           1655   ;        EFM8_JDY40_test.c:451: printf("\r\nJDY-40 test\r\n");
04C9 74F0      1656            mov     a,#__str_2
04CB C0E0      1657            push    acc
04CD 74C6      1658            mov     a,#(__str_2 >> 8)
04CF C0E0      1659            push    acc
04D1 7480      1660            mov     a,#0x80
04D3 C0E0      1661            push    acc
04D5 120000    1662            lcall   _printf
04D8 1581      1663            dec     sp
04DA 1581      1664            dec     sp
04DC 1581      1665            dec     sp
04DE           1666   ;        EFM8_JDY40_test.c:452: UART1_Init(9600);
04DE 902580    1667            mov     dptr,#0x2580
04E1 E4        1668            clr     a
04E2 F5F0      1669            mov     b,a
04E4 120000    1670            lcall   _UART1_Init
04E7           1671   ;        EFM8_JDY40_test.c:453: InitPinADC(2,4); //for y remote
04E7 756004    1672            mov     _InitPinADC_PARM_2,#0x04
04EA 758202    1673            mov     dpl,#0x02
04ED 120000    1674            lcall   _InitPinADC
04F0           1675   ;        EFM8_JDY40_test.c:454: InitPinADC(2,5); //for x remote
04F0 756005    1676            mov     _InitPinADC_PARM_2,#0x05
04F3 758202    1677            mov     dpl,#0x02
04F6 120000    1678            lcall   _InitPinADC
04F9           1679   ;        EFM8_JDY40_test.c:473: SendATCommand("AT+DVID9944\r\n");  
04F9 90C730    1680            mov     dptr,#__str_3
04FC 75F080    1681            mov     b,#0x80
04FF 120000    1682            lcall   _SendATCommand
0502           1683   ;        EFM8_JDY40_test.c:476: SendATCommand("AT+VER\r\n");
0502 90C770    1684            mov     dptr,#__str_4
0505 75F080    1685            mov     b,#0x80
0508 120000    1686            lcall   _SendATCommand
050B           1687   ;        EFM8_JDY40_test.c:477: SendATCommand("AT+BAUD\r\n");
050B 90C7B0    1688            mov     dptr,#__str_5
050E 75F080    1689            mov     b,#0x80
0511 120000    1690            lcall   _SendATCommand
0514           1691   ;        EFM8_JDY40_test.c:478: SendATCommand("AT+RFID\r\n");
0514 90C7F0    1692            mov     dptr,#__str_6
0517 75F080    1693            mov     b,#0x80
051A 120000    1694            lcall   _SendATCommand
051D           1695   ;        EFM8_JDY40_test.c:479: SendATCommand("AT+DVID\r\n");
051D 90C830    1696            mov     dptr,#__str_7
0520 75F080    1697            mov     b,#0x80
0523 120000    1698            lcall   _SendATCommand
0526           1699   ;        EFM8_JDY40_test.c:480: SendATCommand("AT+RFC\r\n");
0526 90C870    1700            mov     dptr,#__str_8
0529 75F080    1701            mov     b,#0x80
052C 120000    1702            lcall   _SendATCommand
052F           1703   ;        EFM8_JDY40_test.c:481: SendATCommand("AT+POWE\r\n");
052F 90C8B0    1704            mov     dptr,#__str_9
0532 75F080    1705            mov     b,#0x80
0535 120000    1706            lcall   _SendATCommand
0538           1707   ;        EFM8_JDY40_test.c:482: SendATCommand("AT+CLSS\r\n");
0538 90C8F0    1708            mov     dptr,#__str_10
053B 75F080    1709            mov     b,#0x80
053E 120000    1710            lcall   _SendATCommand
0541           1711   ;        EFM8_JDY40_test.c:484: printf("\r\nPress and hold the BOOT button to transmit.\r\n");
0541 7430      1712            mov     a,#__str_11
0543 C0E0      1713            push    acc
0545 74C9      1714            mov     a,#(__str_11 >> 8)
0547 C0E0      1715            push    acc
0549 7480      1716            mov     a,#0x80
054B C0E0      1717            push    acc
054D 120000    1718            lcall   _printf
0550 1581      1719            dec     sp
0552 1581      1720            dec     sp
0554 1581      1721            dec     sp
0556           1722   ;        EFM8_JDY40_test.c:487: while(1)
0556 7A00      1723            mov     r2,#0x00
0558 7B00      1724            mov     r3,#0x00
055A           1725   L028008?:
055A           1726   ;        EFM8_JDY40_test.c:492: volt_x = Volts_at_Pin(QFP32_MUX_P1_4);
055A 75820A    1727            mov     dpl,#0x0A
055D C002      1728            push    ar2
055F C003      1729            push    ar3
0561 120000    1730            lcall   _Volts_at_Pin
0564 8582E0    1731            mov     _main_volt_x_1_123,dpl
0567 8583E1    1732            mov     (_main_volt_x_1_123 + 1),dph
056A 85F0E2    1733            mov     (_main_volt_x_1_123 + 2),b
056D F5E3      1734            mov     (_main_volt_x_1_123 + 3),a
056F           1735   ;        EFM8_JDY40_test.c:493: volt_y = Volts_at_Pin(QFP32_MUX_P1_5);
056F 75820B    1736            mov     dpl,#0x0B
0572 120000    1737            lcall   _Volts_at_Pin
0575 AC82      1738            mov     r4,dpl
0577 AD83      1739            mov     r5,dph
0579 AEF0      1740            mov     r6,b
057B FF        1741            mov     r7,a
057C           1742   ;        EFM8_JDY40_test.c:500: sprintf(buff, "%f %f\r\n", volt_x, volt_y);
057C C004      1743            push    ar4
057E C005      1744            push    ar5
0580 C006      1745            push    ar6
0582 C007      1746            push    ar7
0584 C0E0      1747            push    _main_volt_x_1_123
0586 C0E1      1748            push    (_main_volt_x_1_123 + 1)
0588 C0E2      1749            push    (_main_volt_x_1_123 + 2)
058A C0E3      1750            push    (_main_volt_x_1_123 + 3)
058C 74B0      1751            mov     a,#__str_12
058E C0E0      1752            push    acc
0590 74C9      1753            mov     a,#(__str_12 >> 8)
0592 C0E0      1754            push    acc
0594 7480      1755            mov     a,#0x80
0596 C0E0      1756            push    acc
0598 74D0      1757            mov     a,#_buff
059A C0E0      1758            push    acc
059C 7418      1759            mov     a,#(_buff >> 8)
059E C0E0      1760            push    acc
05A0 7440      1761            mov     a,#0x40
05A2 C0E0      1762            push    acc
05A4 120000    1763            lcall   _sprintf
05A7 E581      1764            mov     a,sp
05A9 24F2      1765            add     a,#0xf2
05AB F581      1766            mov     sp,a
05AD           1767   ;        EFM8_JDY40_test.c:501: sendstr1(buff);
05AD 9018D0    1768            mov     dptr,#_buff
05B0 75F040    1769            mov     b,#0x40
05B3 120000    1770            lcall   _sendstr1
05B6           1771   ;        EFM8_JDY40_test.c:502: waitms_or_RI1(200);
05B6 9000C8    1772            mov     dptr,#0x00C8
05B9 120000    1773            lcall   _waitms_or_RI1
05BC D003      1774            pop     ar3
05BE D002      1775            pop     ar2
05C0           1776   ;        EFM8_JDY40_test.c:507: if(P3_7==0)
05C0 20B730    1777            jb      _P3_7,L028002?
05C3           1778   ;        EFM8_JDY40_test.c:509: sprintf(buff, "JDY40 test %d\r\n", cnt++);
05C3 8A04      1779            mov     ar4,r2
05C5 8B05      1780            mov     ar5,r3
05C7 0A        1781            inc     r2
05C8 BA0070    1782            cjne    r2,#0x00,L028018?
05CB 0B        1783            inc     r3
05CC           1784   L028018?:
05CC C002      1785            push    ar2
05CE C003      1786            push    ar3
05D0 C004      1787            push    ar4
05D2 C005      1788            push    ar5
05D4 74B0      1789            mov     a,#__str_13
05D6 C0E0      1790            push    acc
05D8 74CA      1791            mov     a,#(__str_13 >> 8)
05DA C0E0      1792            push    acc
05DC 7480      1793            mov     a,#0x80
05DE C0E0      1794            push    acc
05E0 74D0      1795            mov     a,#_buff
05E2 C0E0      1796            push    acc
05E4 7418      1797            mov     a,#(_buff >> 8)
05E6 C0E0      1798            push    acc
05E8 7440      1799            mov     a,#0x40
05EA C0E0      1800            push    acc
05EC 120000    1801            lcall   _sprintf
05EF E581      1802            mov     a,sp
05F1 24F8      1803            add     a,#0xf8
05F3 F581      1804            mov     sp,a
05F5           1805   ;        EFM8_JDY40_test.c:510: sendstr1(buff);
05F5 9018D0    1806            mov     dptr,#_buff
05F8 75F040    1807            mov     b,#0x40
05FB 120000    1808            lcall   _sendstr1
05FE           1809   ;        EFM8_JDY40_test.c:511: putchar('.');
05FE 75822E    1810            mov     dpl,#0x2E
0601 120000    1811            lcall   _putchar
0604           1812   ;        EFM8_JDY40_test.c:512: waitms_or_RI1(200);
0604 9000C8    1813            mov     dptr,#0x00C8
0607 120000    1814            lcall   _waitms_or_RI1
060A D003      1815            pop     ar3
060C D002      1816            pop     ar2
060E           1817   L028002?:
060E           1818   ;        EFM8_JDY40_test.c:515: if(RXU1())
060E C002      1819            push    ar2
0610 C003      1820            push    ar3
0612 120000    1821            lcall   _RXU1
0615 D003      1822            pop     ar3
0617 D002      1823            pop     ar2
0619 4000      1824            jc      L028019?
061B 020000    1825            ljmp    L028008?
061E           1826   L028019?:
061E           1827   ;        EFM8_JDY40_test.c:518: getstr1(buff);
061E 9018D0    1828            mov     dptr,#_buff
0621 75F040    1829            mov     b,#0x40
0624 C002      1830            push    ar2
0626 C003      1831            push    ar3
0628 120000    1832            lcall   _getstr1
062B           1833   ;        EFM8_JDY40_test.c:519: printf("Freq: %s\r\n", buff);
062B 74D0      1834            mov     a,#_buff
062D C0E0      1835            push    acc
062F 7418      1836            mov     a,#(_buff >> 8)
0631 C0E0      1837            push    acc
0633 7440      1838            mov     a,#0x40
0635 C0E0      1839            push    acc
0637 7470      1840            mov     a,#__str_14
0639 C0E0      1841            push    acc
063B 74CB      1842            mov     a,#(__str_14 >> 8)
063D C0E0      1843            push    acc
063F 7480      1844            mov     a,#0x80
0641 C0E0      1845            push    acc
0643 120000    1846            lcall   _printf
0646 E581      1847            mov     a,sp
0648 24FA      1848            add     a,#0xfa
064A F581      1849            mov     sp,a
064C           1850   ;        EFM8_JDY40_test.c:520: frequency = atof(buff); // change string -> float 
064C 9018D0    1851            mov     dptr,#_buff
064F 75F040    1852            mov     b,#0x40
0652 120000    1853            lcall   _atof
0655 AC82      1854            mov     r4,dpl
0657 AD83      1855            mov     r5,dph
0659 AEF0      1856            mov     r6,b
065B FF        1857            mov     r7,a
065C           1858   ;        EFM8_JDY40_test.c:523: if(frequency >= 2500){ //2500 is just a radom number we pick for now
065C E4        1859            clr     a
065D C0E0      1860            push    acc
065F 7440      1861            mov     a,#0x40
0661 C0E0      1862            push    acc
0663 741C      1863            mov     a,#0x1C
0665 C0E0      1864            push    acc
0667 7445      1865            mov     a,#0x45
0669 C0E0      1866            push    acc
066B 8C82      1867            mov     dpl,r4
066D 8D83      1868            mov     dph,r5
066F 8EF0      1869            mov     b,r6
0671 EF        1870            mov     a,r7
0672 120000    1871            lcall   ___fslt
0675 AC82      1872            mov     r4,dpl
0677 E581      1873            mov     a,sp
0679 24FC      1874            add     a,#0xfc
067B F581      1875            mov     sp,a
067D D003      1876            pop     ar3
067F D002      1877            pop     ar2
0681 EC        1878            mov     a,r4
0682 6000      1879            jz      L028020?
0684 020000    1880            ljmp    L028008?
0687           1881   L028020?:
0687           1882   ;        EFM8_JDY40_test.c:524: return;
0687 22        1883            ret
0688           1884            rseg R_CSEG
0688           1885   
0000           1886            rseg R_XINIT
0000           1887   
0000           1888            rseg R_CONST
0000           1889   __str_0:
0000 436F6D6D  1890            db 'Command: %s'
     616E643A
     202573
000B 00        1891            db 0x00
000C           1892   __str_1:
000C 52657370  1893            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1894            db 0x0D
0019 0A        1895            db 0x0A
001A 00        1896            db 0x00
001B           1897   __str_2:
001B 0D        1898            db 0x0D
001C 0A        1899            db 0x0A
001D 4A44592D  1900            db 'JDY-40 test'
     34302074
     657374
0028 0D        1901            db 0x0D
0029 0A        1902            db 0x0A
002A 00        1903            db 0x00
002B           1904   __str_3:
002B 41542B44  1905            db 'AT+DVID9944'
     56494439
     393434
0036 0D        1906            db 0x0D
0037 0A        1907            db 0x0A
0038 00        1908            db 0x00
0039           1909   __str_4:
0039 41542B56  1910            db 'AT+VER'
     4552
003F 0D        1911            db 0x0D
0040 0A        1912            db 0x0A
0041 00        1913            db 0x00
0042           1914   __str_5:
0042 41542B42  1915            db 'AT+BAUD'
     415544
0049 0D        1916            db 0x0D
004A 0A        1917            db 0x0A
004B 00        1918            db 0x00
004C           1919   __str_6:
004C 41542B52  1920            db 'AT+RFID'
     464944
0053 0D        1921            db 0x0D
0054 0A        1922            db 0x0A
0055 00        1923            db 0x00
0056           1924   __str_7:
0056 41542B44  1925            db 'AT+DVID'
     564944
005D 0D        1926            db 0x0D
005E 0A        1927            db 0x0A
005F 00        1928            db 0x00
0060           1929   __str_8:
0060 41542B52  1930            db 'AT+RFC'
     4643
0066 0D        1931            db 0x0D
0067 0A        1932            db 0x0A
0068 00        1933            db 0x00
0069           1934   __str_9:
0069 41542B50  1935            db 'AT+POWE'
     4F5745
0070 0D        1936            db 0x0D
0071 0A        1937            db 0x0A
0072 00        1938            db 0x00
0073           1939   __str_10:
0073 41542B43  1940            db 'AT+CLSS'
     4C5353
007A 0D        1941            db 0x0D
007B 0A        1942            db 0x0A
007C 00        1943            db 0x00
007D           1944   __str_11:
007D 0D        1945            db 0x0D
007E 0A        1946            db 0x0A
007F 50726573  1947            db 'Press and hold the BOOT button to transmit.'
     7320616E
     6420686F
     6C642074
     68652042
     4F4F5420
     62757474
     6F6E2074
     6F207472
     616E736D
     69742E
00AA 0D        1948            db 0x0D
00AB 0A        1949            db 0x0A
00AC 00        1950            db 0x00
00AD           1951   __str_12:
00AD 25662025  1952            db '%f %f'
     66
00B2 0D        1953            db 0x0D
00B3 0A        1954            db 0x0A
00B4 00        1955            db 0x00
00B5           1956   __str_13:
00B5 4A445934  1957            db 'JDY40 test %d'
     30207465
     73742025
     64
00C2 0D        1958            db 0x0D
00C3 0A        1959            db 0x0A
00C4 00        1960            db 0x00
00C5           1961   __str_14:
00C5 46726571  1962            db 'Freq: %s'
     3A202573
00CD 0D        1963            db 0x0D
00CE 0A        1964            db 0x0A
00CF 00        1965            db 0x00
00D0           1966   
0003           1967            CSEG
0003           1968   
0003           1969   end
