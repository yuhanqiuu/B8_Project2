0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sat Mar 23 14:57:14 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _LCDprint
0000             30            public _LCD_4BIT
0000             31            public _WriteCommand
0000             32            public _WriteData
0000             33            public _LCD_byte
0000             34            public _LCD_pulse
0000             35            public _SendATCommand
0000             36            public _waitms_or_RI1
0000             37            public _RXU1
0000             38            public _getstr1
0000             39            public _getchar1_with_timeout
0000             40            public _getchar1
0000             41            public _sendstr1
0000             42            public _putchar1
0000             43            public _UART1_Init
0000             44            public _Volts_at_Pin
0000             45            public _Get_ADC
0000             46            public _ADC_at_Pin
0000             47            public _InitPinADC
0000             48            public _waitms
0000             49            public _Timer2_ISR
0000             50            public _TIMER2_Init
0000             51            public _TIMER0_Init
0000             52            public _Timer3us
0000             53            public _InitADC
0000             54            public __c51_external_startup
0000             55            public _LCDprint_PARM_3
0000             56            public _buff
0000             57            public _LCDprint_PARM_2
0000             58   ;--------------------------------------------------------
0000             59   ; Special Function Registers
0000             60   ;--------------------------------------------------------
0000             61   _ACC            DATA 0xe0
0000             62   _ADC0ASAH       DATA 0xb6
0000             63   _ADC0ASAL       DATA 0xb5
0000             64   _ADC0ASCF       DATA 0xa1
0000             65   _ADC0ASCT       DATA 0xc7
0000             66   _ADC0CF0        DATA 0xbc
0000             67   _ADC0CF1        DATA 0xb9
0000             68   _ADC0CF2        DATA 0xdf
0000             69   _ADC0CN0        DATA 0xe8
0000             70   _ADC0CN1        DATA 0xb2
0000             71   _ADC0CN2        DATA 0xb3
0000             72   _ADC0GTH        DATA 0xc4
0000             73   _ADC0GTL        DATA 0xc3
0000             74   _ADC0H          DATA 0xbe
0000             75   _ADC0L          DATA 0xbd
0000             76   _ADC0LTH        DATA 0xc6
0000             77   _ADC0LTL        DATA 0xc5
0000             78   _ADC0MX         DATA 0xbb
0000             79   _B              DATA 0xf0
0000             80   _CKCON0         DATA 0x8e
0000             81   _CKCON1         DATA 0xa6
0000             82   _CLEN0          DATA 0xc6
0000             83   _CLIE0          DATA 0xc7
0000             84   _CLIF0          DATA 0xe8
0000             85   _CLKSEL         DATA 0xa9
0000             86   _CLOUT0         DATA 0xd1
0000             87   _CLU0CF         DATA 0xb1
0000             88   _CLU0FN         DATA 0xaf
0000             89   _CLU0MX         DATA 0x84
0000             90   _CLU1CF         DATA 0xb3
0000             91   _CLU1FN         DATA 0xb2
0000             92   _CLU1MX         DATA 0x85
0000             93   _CLU2CF         DATA 0xb6
0000             94   _CLU2FN         DATA 0xb5
0000             95   _CLU2MX         DATA 0x91
0000             96   _CLU3CF         DATA 0xbf
0000             97   _CLU3FN         DATA 0xbe
0000             98   _CLU3MX         DATA 0xae
0000             99   _CMP0CN0        DATA 0x9b
0000            100   _CMP0CN1        DATA 0x99
0000            101   _CMP0MD         DATA 0x9d
0000            102   _CMP0MX         DATA 0x9f
0000            103   _CMP1CN0        DATA 0xbf
0000            104   _CMP1CN1        DATA 0xac
0000            105   _CMP1MD         DATA 0xab
0000            106   _CMP1MX         DATA 0xaa
0000            107   _CRC0CN0        DATA 0xce
0000            108   _CRC0CN1        DATA 0x86
0000            109   _CRC0CNT        DATA 0xd3
0000            110   _CRC0DAT        DATA 0xcb
0000            111   _CRC0FLIP       DATA 0xcf
0000            112   _CRC0IN         DATA 0xca
0000            113   _CRC0ST         DATA 0xd2
0000            114   _DAC0CF0        DATA 0x91
0000            115   _DAC0CF1        DATA 0x92
0000            116   _DAC0H          DATA 0x85
0000            117   _DAC0L          DATA 0x84
0000            118   _DAC1CF0        DATA 0x93
0000            119   _DAC1CF1        DATA 0x94
0000            120   _DAC1H          DATA 0x8a
0000            121   _DAC1L          DATA 0x89
0000            122   _DAC2CF0        DATA 0x95
0000            123   _DAC2CF1        DATA 0x96
0000            124   _DAC2H          DATA 0x8c
0000            125   _DAC2L          DATA 0x8b
0000            126   _DAC3CF0        DATA 0x9a
0000            127   _DAC3CF1        DATA 0x9c
0000            128   _DAC3H          DATA 0x8e
0000            129   _DAC3L          DATA 0x8d
0000            130   _DACGCF0        DATA 0x88
0000            131   _DACGCF1        DATA 0x98
0000            132   _DACGCF2        DATA 0xa2
0000            133   _DERIVID        DATA 0xad
0000            134   _DEVICEID       DATA 0xb5
0000            135   _DPH            DATA 0x83
0000            136   _DPL            DATA 0x82
0000            137   _EIE1           DATA 0xe6
0000            138   _EIE2           DATA 0xf3
0000            139   _EIP1           DATA 0xbb
0000            140   _EIP1H          DATA 0xee
0000            141   _EIP2           DATA 0xed
0000            142   _EIP2H          DATA 0xf6
0000            143   _EMI0CN         DATA 0xe7
0000            144   _FLKEY          DATA 0xb7
0000            145   _HFO0CAL        DATA 0xc7
0000            146   _HFO1CAL        DATA 0xd6
0000            147   _HFOCN          DATA 0xef
0000            148   _I2C0ADM        DATA 0xff
0000            149   _I2C0CN0        DATA 0xba
0000            150   _I2C0DIN        DATA 0xbc
0000            151   _I2C0DOUT       DATA 0xbb
0000            152   _I2C0FCN0       DATA 0xad
0000            153   _I2C0FCN1       DATA 0xab
0000            154   _I2C0FCT        DATA 0xf5
0000            155   _I2C0SLAD       DATA 0xbd
0000            156   _I2C0STAT       DATA 0xb9
0000            157   _IE             DATA 0xa8
0000            158   _IP             DATA 0xb8
0000            159   _IPH            DATA 0xf2
0000            160   _IT01CF         DATA 0xe4
0000            161   _LFO0CN         DATA 0xb1
0000            162   _P0             DATA 0x80
0000            163   _P0MASK         DATA 0xfe
0000            164   _P0MAT          DATA 0xfd
0000            165   _P0MDIN         DATA 0xf1
0000            166   _P0MDOUT        DATA 0xa4
0000            167   _P0SKIP         DATA 0xd4
0000            168   _P1             DATA 0x90
0000            169   _P1MASK         DATA 0xee
0000            170   _P1MAT          DATA 0xed
0000            171   _P1MDIN         DATA 0xf2
0000            172   _P1MDOUT        DATA 0xa5
0000            173   _P1SKIP         DATA 0xd5
0000            174   _P2             DATA 0xa0
0000            175   _P2MASK         DATA 0xfc
0000            176   _P2MAT          DATA 0xfb
0000            177   _P2MDIN         DATA 0xf3
0000            178   _P2MDOUT        DATA 0xa6
0000            179   _P2SKIP         DATA 0xcc
0000            180   _P3             DATA 0xb0
0000            181   _P3MDIN         DATA 0xf4
0000            182   _P3MDOUT        DATA 0x9c
0000            183   _PCA0CENT       DATA 0x9e
0000            184   _PCA0CLR        DATA 0x9c
0000            185   _PCA0CN0        DATA 0xd8
0000            186   _PCA0CPH0       DATA 0xfc
0000            187   _PCA0CPH1       DATA 0xea
0000            188   _PCA0CPH2       DATA 0xec
0000            189   _PCA0CPH3       DATA 0xf5
0000            190   _PCA0CPH4       DATA 0x85
0000            191   _PCA0CPH5       DATA 0xde
0000            192   _PCA0CPL0       DATA 0xfb
0000            193   _PCA0CPL1       DATA 0xe9
0000            194   _PCA0CPL2       DATA 0xeb
0000            195   _PCA0CPL3       DATA 0xf4
0000            196   _PCA0CPL4       DATA 0x84
0000            197   _PCA0CPL5       DATA 0xdd
0000            198   _PCA0CPM0       DATA 0xda
0000            199   _PCA0CPM1       DATA 0xdb
0000            200   _PCA0CPM2       DATA 0xdc
0000            201   _PCA0CPM3       DATA 0xae
0000            202   _PCA0CPM4       DATA 0xaf
0000            203   _PCA0CPM5       DATA 0xcc
0000            204   _PCA0H          DATA 0xfa
0000            205   _PCA0L          DATA 0xf9
0000            206   _PCA0MD         DATA 0xd9
0000            207   _PCA0POL        DATA 0x96
0000            208   _PCA0PWM        DATA 0xf7
0000            209   _PCON0          DATA 0x87
0000            210   _PCON1          DATA 0xcd
0000            211   _PFE0CN         DATA 0xc1
0000            212   _PRTDRV         DATA 0xf6
0000            213   _PSCTL          DATA 0x8f
0000            214   _PSTAT0         DATA 0xaa
0000            215   _PSW            DATA 0xd0
0000            216   _REF0CN         DATA 0xd1
0000            217   _REG0CN         DATA 0xc9
0000            218   _REVID          DATA 0xb6
0000            219   _RSTSRC         DATA 0xef
0000            220   _SBCON1         DATA 0x94
0000            221   _SBRLH1         DATA 0x96
0000            222   _SBRLL1         DATA 0x95
0000            223   _SBUF           DATA 0x99
0000            224   _SBUF0          DATA 0x99
0000            225   _SBUF1          DATA 0x92
0000            226   _SCON           DATA 0x98
0000            227   _SCON0          DATA 0x98
0000            228   _SCON1          DATA 0xc8
0000            229   _SFRPAGE        DATA 0xa7
0000            230   _SFRPGCN        DATA 0xbc
0000            231   _SFRSTACK       DATA 0xd7
0000            232   _SMB0ADM        DATA 0xd6
0000            233   _SMB0ADR        DATA 0xd7
0000            234   _SMB0CF         DATA 0xc1
0000            235   _SMB0CN0        DATA 0xc0
0000            236   _SMB0DAT        DATA 0xc2
0000            237   _SMB0FCN0       DATA 0xc3
0000            238   _SMB0FCN1       DATA 0xc4
0000            239   _SMB0FCT        DATA 0xef
0000            240   _SMB0RXLN       DATA 0xc5
0000            241   _SMB0TC         DATA 0xac
0000            242   _SMOD1          DATA 0x93
0000            243   _SP             DATA 0x81
0000            244   _SPI0CFG        DATA 0xa1
0000            245   _SPI0CKR        DATA 0xa2
0000            246   _SPI0CN0        DATA 0xf8
0000            247   _SPI0DAT        DATA 0xa3
0000            248   _SPI0FCN0       DATA 0x9a
0000            249   _SPI0FCN1       DATA 0x9b
0000            250   _SPI0FCT        DATA 0xf7
0000            251   _SPI0PCF        DATA 0xdf
0000            252   _TCON           DATA 0x88
0000            253   _TH0            DATA 0x8c
0000            254   _TH1            DATA 0x8d
0000            255   _TL0            DATA 0x8a
0000            256   _TL1            DATA 0x8b
0000            257   _TMOD           DATA 0x89
0000            258   _TMR2CN0        DATA 0xc8
0000            259   _TMR2CN1        DATA 0xfd
0000            260   _TMR2H          DATA 0xcf
0000            261   _TMR2L          DATA 0xce
0000            262   _TMR2RLH        DATA 0xcb
0000            263   _TMR2RLL        DATA 0xca
0000            264   _TMR3CN0        DATA 0x91
0000            265   _TMR3CN1        DATA 0xfe
0000            266   _TMR3H          DATA 0x95
0000            267   _TMR3L          DATA 0x94
0000            268   _TMR3RLH        DATA 0x93
0000            269   _TMR3RLL        DATA 0x92
0000            270   _TMR4CN0        DATA 0x98
0000            271   _TMR4CN1        DATA 0xff
0000            272   _TMR4H          DATA 0xa5
0000            273   _TMR4L          DATA 0xa4
0000            274   _TMR4RLH        DATA 0xa3
0000            275   _TMR4RLL        DATA 0xa2
0000            276   _TMR5CN0        DATA 0xc0
0000            277   _TMR5CN1        DATA 0xf1
0000            278   _TMR5H          DATA 0xd5
0000            279   _TMR5L          DATA 0xd4
0000            280   _TMR5RLH        DATA 0xd3
0000            281   _TMR5RLL        DATA 0xd2
0000            282   _UART0PCF       DATA 0xd9
0000            283   _UART1FCN0      DATA 0x9d
0000            284   _UART1FCN1      DATA 0xd8
0000            285   _UART1FCT       DATA 0xfa
0000            286   _UART1LIN       DATA 0x9e
0000            287   _UART1PCF       DATA 0xda
0000            288   _VDM0CN         DATA 0xff
0000            289   _WDTCN          DATA 0x97
0000            290   _XBR0           DATA 0xe1
0000            291   _XBR1           DATA 0xe2
0000            292   _XBR2           DATA 0xe3
0000            293   _XOSC0CN        DATA 0x86
0000            294   _DPTR           DATA 0x8382
0000            295   _TMR2RL         DATA 0xcbca
0000            296   _TMR3RL         DATA 0x9392
0000            297   _TMR4RL         DATA 0xa3a2
0000            298   _TMR5RL         DATA 0xd3d2
0000            299   _TMR0           DATA 0x8c8a
0000            300   _TMR1           DATA 0x8d8b
0000            301   _TMR2           DATA 0xcfce
0000            302   _TMR3           DATA 0x9594
0000            303   _TMR4           DATA 0xa5a4
0000            304   _TMR5           DATA 0xd5d4
0000            305   _SBRL1          DATA 0x9695
0000            306   _PCA0           DATA 0xfaf9
0000            307   _PCA0CP0        DATA 0xfcfb
0000            308   _PCA0CP1        DATA 0xeae9
0000            309   _PCA0CP2        DATA 0xeceb
0000            310   _PCA0CP3        DATA 0xf5f4
0000            311   _PCA0CP4        DATA 0x8584
0000            312   _PCA0CP5        DATA 0xdedd
0000            313   _ADC0ASA        DATA 0xb6b5
0000            314   _ADC0GT         DATA 0xc4c3
0000            315   _ADC0           DATA 0xbebd
0000            316   _ADC0LT         DATA 0xc6c5
0000            317   _DAC0           DATA 0x8584
0000            318   _DAC1           DATA 0x8a89
0000            319   _DAC2           DATA 0x8c8b
0000            320   _DAC3           DATA 0x8e8d
0000            321   ;--------------------------------------------------------
0000            322   ; special function bits
0000            323   ;--------------------------------------------------------
0000            324   _ACC_0          BIT 0xe0
0000            325   _ACC_1          BIT 0xe1
0000            326   _ACC_2          BIT 0xe2
0000            327   _ACC_3          BIT 0xe3
0000            328   _ACC_4          BIT 0xe4
0000            329   _ACC_5          BIT 0xe5
0000            330   _ACC_6          BIT 0xe6
0000            331   _ACC_7          BIT 0xe7
0000            332   _TEMPE          BIT 0xe8
0000            333   _ADGN0          BIT 0xe9
0000            334   _ADGN1          BIT 0xea
0000            335   _ADWINT         BIT 0xeb
0000            336   _ADBUSY         BIT 0xec
0000            337   _ADINT          BIT 0xed
0000            338   _IPOEN          BIT 0xee
0000            339   _ADEN           BIT 0xef
0000            340   _B_0            BIT 0xf0
0000            341   _B_1            BIT 0xf1
0000            342   _B_2            BIT 0xf2
0000            343   _B_3            BIT 0xf3
0000            344   _B_4            BIT 0xf4
0000            345   _B_5            BIT 0xf5
0000            346   _B_6            BIT 0xf6
0000            347   _B_7            BIT 0xf7
0000            348   _C0FIF          BIT 0xe8
0000            349   _C0RIF          BIT 0xe9
0000            350   _C1FIF          BIT 0xea
0000            351   _C1RIF          BIT 0xeb
0000            352   _C2FIF          BIT 0xec
0000            353   _C2RIF          BIT 0xed
0000            354   _C3FIF          BIT 0xee
0000            355   _C3RIF          BIT 0xef
0000            356   _D1SRC0         BIT 0x88
0000            357   _D1SRC1         BIT 0x89
0000            358   _D1AMEN         BIT 0x8a
0000            359   _D01REFSL       BIT 0x8b
0000            360   _D3SRC0         BIT 0x8c
0000            361   _D3SRC1         BIT 0x8d
0000            362   _D3AMEN         BIT 0x8e
0000            363   _D23REFSL       BIT 0x8f
0000            364   _D0UDIS         BIT 0x98
0000            365   _D1UDIS         BIT 0x99
0000            366   _D2UDIS         BIT 0x9a
0000            367   _D3UDIS         BIT 0x9b
0000            368   _EX0            BIT 0xa8
0000            369   _ET0            BIT 0xa9
0000            370   _EX1            BIT 0xaa
0000            371   _ET1            BIT 0xab
0000            372   _ES0            BIT 0xac
0000            373   _ET2            BIT 0xad
0000            374   _ESPI0          BIT 0xae
0000            375   _EA             BIT 0xaf
0000            376   _PX0            BIT 0xb8
0000            377   _PT0            BIT 0xb9
0000            378   _PX1            BIT 0xba
0000            379   _PT1            BIT 0xbb
0000            380   _PS0            BIT 0xbc
0000            381   _PT2            BIT 0xbd
0000            382   _PSPI0          BIT 0xbe
0000            383   _P0_0           BIT 0x80
0000            384   _P0_1           BIT 0x81
0000            385   _P0_2           BIT 0x82
0000            386   _P0_3           BIT 0x83
0000            387   _P0_4           BIT 0x84
0000            388   _P0_5           BIT 0x85
0000            389   _P0_6           BIT 0x86
0000            390   _P0_7           BIT 0x87
0000            391   _P1_0           BIT 0x90
0000            392   _P1_1           BIT 0x91
0000            393   _P1_2           BIT 0x92
0000            394   _P1_3           BIT 0x93
0000            395   _P1_4           BIT 0x94
0000            396   _P1_5           BIT 0x95
0000            397   _P1_6           BIT 0x96
0000            398   _P1_7           BIT 0x97
0000            399   _P2_0           BIT 0xa0
0000            400   _P2_1           BIT 0xa1
0000            401   _P2_2           BIT 0xa2
0000            402   _P2_3           BIT 0xa3
0000            403   _P2_4           BIT 0xa4
0000            404   _P2_5           BIT 0xa5
0000            405   _P2_6           BIT 0xa6
0000            406   _P3_0           BIT 0xb0
0000            407   _P3_1           BIT 0xb1
0000            408   _P3_2           BIT 0xb2
0000            409   _P3_3           BIT 0xb3
0000            410   _P3_4           BIT 0xb4
0000            411   _P3_7           BIT 0xb7
0000            412   _CCF0           BIT 0xd8
0000            413   _CCF1           BIT 0xd9
0000            414   _CCF2           BIT 0xda
0000            415   _CCF3           BIT 0xdb
0000            416   _CCF4           BIT 0xdc
0000            417   _CCF5           BIT 0xdd
0000            418   _CR             BIT 0xde
0000            419   _CF             BIT 0xdf
0000            420   _PARITY         BIT 0xd0
0000            421   _F1             BIT 0xd1
0000            422   _OV             BIT 0xd2
0000            423   _RS0            BIT 0xd3
0000            424   _RS1            BIT 0xd4
0000            425   _F0             BIT 0xd5
0000            426   _AC             BIT 0xd6
0000            427   _CY             BIT 0xd7
0000            428   _RI             BIT 0x98
0000            429   _TI             BIT 0x99
0000            430   _RB8            BIT 0x9a
0000            431   _TB8            BIT 0x9b
0000            432   _REN            BIT 0x9c
0000            433   _CE             BIT 0x9d
0000            434   _SMODE          BIT 0x9e
0000            435   _RI1            BIT 0xc8
0000            436   _TI1            BIT 0xc9
0000            437   _RBX1           BIT 0xca
0000            438   _TBX1           BIT 0xcb
0000            439   _REN1           BIT 0xcc
0000            440   _PERR1          BIT 0xcd
0000            441   _OVR1           BIT 0xce
0000            442   _SI             BIT 0xc0
0000            443   _ACK            BIT 0xc1
0000            444   _ARBLOST        BIT 0xc2
0000            445   _ACKRQ          BIT 0xc3
0000            446   _STO            BIT 0xc4
0000            447   _STA            BIT 0xc5
0000            448   _TXMODE         BIT 0xc6
0000            449   _MASTER         BIT 0xc7
0000            450   _SPIEN          BIT 0xf8
0000            451   _TXNF           BIT 0xf9
0000            452   _NSSMD0         BIT 0xfa
0000            453   _NSSMD1         BIT 0xfb
0000            454   _RXOVRN         BIT 0xfc
0000            455   _MODF           BIT 0xfd
0000            456   _WCOL           BIT 0xfe
0000            457   _SPIF           BIT 0xff
0000            458   _IT0            BIT 0x88
0000            459   _IE0            BIT 0x89
0000            460   _IT1            BIT 0x8a
0000            461   _IE1            BIT 0x8b
0000            462   _TR0            BIT 0x8c
0000            463   _TF0            BIT 0x8d
0000            464   _TR1            BIT 0x8e
0000            465   _TF1            BIT 0x8f
0000            466   _T2XCLK0        BIT 0xc8
0000            467   _T2XCLK1        BIT 0xc9
0000            468   _TR2            BIT 0xca
0000            469   _T2SPLIT        BIT 0xcb
0000            470   _TF2CEN         BIT 0xcc
0000            471   _TF2LEN         BIT 0xcd
0000            472   _TF2L           BIT 0xce
0000            473   _TF2H           BIT 0xcf
0000            474   _T4XCLK0        BIT 0x98
0000            475   _T4XCLK1        BIT 0x99
0000            476   _TR4            BIT 0x9a
0000            477   _T4SPLIT        BIT 0x9b
0000            478   _TF4CEN         BIT 0x9c
0000            479   _TF4LEN         BIT 0x9d
0000            480   _TF4L           BIT 0x9e
0000            481   _TF4H           BIT 0x9f
0000            482   _T5XCLK0        BIT 0xc0
0000            483   _T5XCLK1        BIT 0xc1
0000            484   _TR5            BIT 0xc2
0000            485   _T5SPLIT        BIT 0xc3
0000            486   _TF5CEN         BIT 0xc4
0000            487   _TF5LEN         BIT 0xc5
0000            488   _TF5L           BIT 0xc6
0000            489   _TF5H           BIT 0xc7
0000            490   _RIE            BIT 0xd8
0000            491   _RXTO0          BIT 0xd9
0000            492   _RXTO1          BIT 0xda
0000            493   _RFRQ           BIT 0xdb
0000            494   _TIE            BIT 0xdc
0000            495   _TXHOLD         BIT 0xdd
0000            496   _TXNF1          BIT 0xde
0000            497   _TFRQ           BIT 0xdf
0000            498   ;--------------------------------------------------------
0000            499   ; overlayable register banks
0000            500   ;--------------------------------------------------------
0000            501            rbank0 segment data overlay
0000            502   ;--------------------------------------------------------
0000            503   ; internal ram data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_DSEG
0000            506   _LCDprint_PARM_2:
0000            507            ds 1
0001            508   _main_volt_x_1_123:
0001            509            ds 4
0005            510   _main_buff1_1_123:
0005            511            ds 17
0016            512   ;--------------------------------------------------------
0016            513   ; overlayable items in internal ram 
0016            514   ;--------------------------------------------------------
0000            515            rseg    R_OSEG
0000            516            rseg    R_OSEG
0000            517   _InitPinADC_PARM_2:
0000            518            ds 1
0001            519            rseg    R_OSEG
0001            520            rseg    R_OSEG
0001            521            rseg    R_OSEG
0001            522   ;--------------------------------------------------------
0001            523   ; indirectly addressable internal ram data
0001            524   ;--------------------------------------------------------
0000            525            rseg R_ISEG
0000            526   _buff:
0000            527            ds 20
0014            528   ;--------------------------------------------------------
0014            529   ; absolute internal ram data
0014            530   ;--------------------------------------------------------
0000            531            DSEG
0000            532   ;--------------------------------------------------------
0000            533   ; bit data
0000            534   ;--------------------------------------------------------
0000            535            rseg R_BSEG
0000            536   _LCDprint_PARM_3:
0000            537            DBIT    1
0001            538   ;--------------------------------------------------------
0001            539   ; paged external ram data
0001            540   ;--------------------------------------------------------
0000            541            rseg R_PSEG
0000            542   ;--------------------------------------------------------
0000            543   ; external ram data
0000            544   ;--------------------------------------------------------
0000            545            rseg R_XSEG
0000            546   ;--------------------------------------------------------
0000            547   ; absolute external ram data
0000            548   ;--------------------------------------------------------
0000            549            XSEG
0000            550   ;--------------------------------------------------------
0000            551   ; external initialized ram data
0000            552   ;--------------------------------------------------------
0000            553            rseg R_IXSEG
0000            554            rseg R_HOME
0000            555            rseg R_GSINIT
0000            556            rseg R_CSEG
0000            557   ;--------------------------------------------------------
0000            558   ; Reset entry point and interrupt vectors
0000            559   ;--------------------------------------------------------
0000            560            CSEG at 0x0000
0000 020000     561            ljmp    _crt0
0003            562   ;--------------------------------------------------------
0003            563   ; global & static initialisations
0003            564   ;--------------------------------------------------------
0000            565            rseg R_HOME
0000            566            rseg R_GSINIT
0000            567            rseg R_GSINIT
0000            568   ;--------------------------------------------------------
0000            569   ; data variables initialization
0000            570   ;--------------------------------------------------------
0000            571            rseg R_DINIT
0000            572            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            573   ;--------------------------------------------------------
0000            574   ; code
0000            575   ;--------------------------------------------------------
0000            576            rseg R_CSEG
0000            577   ;------------------------------------------------------------
0000            578   ;Allocation info for local variables in function '_c51_external_startup'
0000            579   ;------------------------------------------------------------
0000            580   ;------------------------------------------------------------
0000            581   ;        EFM8_JDY40_test.c:35: char _c51_external_startup (void)
0000            582   ;        -----------------------------------------
0000            583   ;         function _c51_external_startup
0000            584   ;        -----------------------------------------
0000            585   __c51_external_startup:
0000            586            using   0
0000            587   ;        EFM8_JDY40_test.c:38: SFRPAGE = 0x00;
0000 75A700     588            mov     _SFRPAGE,#0x00
0003            589   ;        EFM8_JDY40_test.c:39: WDTCN = 0xDE; //First key
0003 7597DE     590            mov     _WDTCN,#0xDE
0006            591   ;        EFM8_JDY40_test.c:40: WDTCN = 0xAD; //Second key
0006 7597AD     592            mov     _WDTCN,#0xAD
0009            593   ;        EFM8_JDY40_test.c:42: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     594            mov     _VDM0CN,#0x80
000C            595   ;        EFM8_JDY40_test.c:43: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     596            mov     _RSTSRC,#0x06
000F            597   ;        EFM8_JDY40_test.c:50: SFRPAGE = 0x10;
000F 75A710     598            mov     _SFRPAGE,#0x10
0012            599   ;        EFM8_JDY40_test.c:51: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     600            mov     _PFE0CN,#0x20
0015            601   ;        EFM8_JDY40_test.c:52: SFRPAGE = 0x00;
0015 75A700     602            mov     _SFRPAGE,#0x00
0018            603   ;        EFM8_JDY40_test.c:73: CLKSEL = 0x00;
0018 75A900     604            mov     _CLKSEL,#0x00
001B            605   ;        EFM8_JDY40_test.c:74: CLKSEL = 0x00;
001B 75A900     606            mov     _CLKSEL,#0x00
001E            607   ;        EFM8_JDY40_test.c:75: while ((CLKSEL & 0x80) == 0);
001E            608   L002001?:
001E E5A9       609            mov     a,_CLKSEL
0020 30E7B0     610            jnb     acc.7,L002001?
0023            611   ;        EFM8_JDY40_test.c:76: CLKSEL = 0x03;
0023 75A903     612            mov     _CLKSEL,#0x03
0026            613   ;        EFM8_JDY40_test.c:77: CLKSEL = 0x03;
0026 75A903     614            mov     _CLKSEL,#0x03
0029            615   ;        EFM8_JDY40_test.c:78: while ((CLKSEL & 0x80) == 0);
0029            616   L002004?:
0029 E5A9       617            mov     a,_CLKSEL
002B 30E730     618            jnb     acc.7,L002004?
002E            619   ;        EFM8_JDY40_test.c:83: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     620            orl     _P0MDOUT,#0x11
0031            621   ;        EFM8_JDY40_test.c:84: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     622            orl     _P2MDOUT,#0x01
0034            623   ;        EFM8_JDY40_test.c:85: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     624            mov     _XBR0,#0x01
0037            625   ;        EFM8_JDY40_test.c:86: XBR1     = 0X00;
0037 75E200     626            mov     _XBR1,#0x00
003A            627   ;        EFM8_JDY40_test.c:87: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     628            mov     _XBR2,#0x41
003D            629   ;        EFM8_JDY40_test.c:93: SCON0 = 0x10;
003D 759810     630            mov     _SCON0,#0x10
0040            631   ;        EFM8_JDY40_test.c:94: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     632            mov     _TH1,#0xE6
0043            633   ;        EFM8_JDY40_test.c:95: TL1 = TH1;      // Init Timer1
0043 858D8B     634            mov     _TL1,_TH1
0046            635   ;        EFM8_JDY40_test.c:96: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     636            anl     _TMOD,#0x0F
0049            637   ;        EFM8_JDY40_test.c:97: TMOD |=  0x20;                       
0049 438920     638            orl     _TMOD,#0x20
004C            639   ;        EFM8_JDY40_test.c:98: TR1 = 1; // START Timer1
004C D28E       640            setb    _TR1
004E            641   ;        EFM8_JDY40_test.c:99: TI = 1;  // Indicate TX0 ready
004E D299       642            setb    _TI
0050            643   ;        EFM8_JDY40_test.c:101: return 0;
0050 758200     644            mov     dpl,#0x00
0053 22         645            ret
0054            646   ;------------------------------------------------------------
0054            647   ;Allocation info for local variables in function 'InitADC'
0054            648   ;------------------------------------------------------------
0054            649   ;------------------------------------------------------------
0054            650   ;        EFM8_JDY40_test.c:104: void InitADC (void)
0054            651   ;        -----------------------------------------
0054            652   ;         function InitADC
0054            653   ;        -----------------------------------------
0054            654   _InitADC:
0054            655   ;        EFM8_JDY40_test.c:106: SFRPAGE = 0x00;
0054 75A700     656            mov     _SFRPAGE,#0x00
0057            657   ;        EFM8_JDY40_test.c:107: ADEN=0; // Disable ADC
0057 C2EF       658            clr     _ADEN
0059            659   ;        EFM8_JDY40_test.c:112: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     660            mov     _ADC0CN1,#0x80
005C            661   ;        EFM8_JDY40_test.c:116: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     662            mov     _ADC0CF0,#0x20
005F            663   ;        EFM8_JDY40_test.c:120: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     664            mov     _ADC0CF1,#0x1E
0062            665   ;        EFM8_JDY40_test.c:129: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     666            mov     _ADC0CN0,#0x00
0065            667   ;        EFM8_JDY40_test.c:134: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     668            mov     _ADC0CF2,#0x3F
0068            669   ;        EFM8_JDY40_test.c:138: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     670            mov     _ADC0CN2,#0x00
006B            671   ;        EFM8_JDY40_test.c:140: ADEN=1; // Enable ADC
006B D2EF       672            setb    _ADEN
006D 22         673            ret
006E            674   ;------------------------------------------------------------
006E            675   ;Allocation info for local variables in function 'Timer3us'
006E            676   ;------------------------------------------------------------
006E            677   ;us                        Allocated to registers r2 
006E            678   ;i                         Allocated to registers r3 
006E            679   ;------------------------------------------------------------
006E            680   ;        EFM8_JDY40_test.c:145: void Timer3us(unsigned char us)
006E            681   ;        -----------------------------------------
006E            682   ;         function Timer3us
006E            683   ;        -----------------------------------------
006E            684   _Timer3us:
006E AA82       685            mov     r2,dpl
0070            686   ;        EFM8_JDY40_test.c:150: CKCON0|=0b_0100_0000;
0070 438E40     687            orl     _CKCON0,#0x40
0073            688   ;        EFM8_JDY40_test.c:152: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     689            mov     _TMR3RL,#0xB8
0076 7593FF     690            mov     (_TMR3RL >> 8),#0xFF
0079            691   ;        EFM8_JDY40_test.c:153: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     692            mov     _TMR3,_TMR3RL
007C 859395     693            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            694   ;        EFM8_JDY40_test.c:155: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     695            mov     _TMR3CN0,#0x04
0082            696   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       697            mov     r3,#0x00
0084            698   L004004?:
0084 C3         699            clr     c
0085 EB         700            mov     a,r3
0086 9A         701            subb    a,r2
0087 5000       702            jnc     L004007?
0089            703   ;        EFM8_JDY40_test.c:158: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            704   L004001?:
0089 E591       705            mov     a,_TMR3CN0
008B 30E730     706            jnb     acc.7,L004001?
008E            707   ;        EFM8_JDY40_test.c:159: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     708            anl     _TMR3CN0,#0x7F
0091            709   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         710            inc     r3
0092 8000       711            sjmp    L004004?
0094            712   L004007?:
0094            713   ;        EFM8_JDY40_test.c:161: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     714            mov     _TMR3CN0,#0x00
0097 22         715            ret
0098            716   ;------------------------------------------------------------
0098            717   ;Allocation info for local variables in function 'TIMER0_Init'
0098            718   ;------------------------------------------------------------
0098            719   ;------------------------------------------------------------
0098            720   ;        EFM8_JDY40_test.c:164: void TIMER0_Init(void)
0098            721   ;        -----------------------------------------
0098            722   ;         function TIMER0_Init
0098            723   ;        -----------------------------------------
0098            724   _TIMER0_Init:
0098            725   ;        EFM8_JDY40_test.c:166: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0098 5389F0     726            anl     _TMOD,#0xF0
009B            727   ;        EFM8_JDY40_test.c:167: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
009B 438901     728            orl     _TMOD,#0x01
009E            729   ;        EFM8_JDY40_test.c:168: TR0=0; // Stop Timer/Counter 0
009E C28C       730            clr     _TR0
00A0 22         731            ret
00A1            732   ;------------------------------------------------------------
00A1            733   ;Allocation info for local variables in function 'TIMER2_Init'
00A1            734   ;------------------------------------------------------------
00A1            735   ;------------------------------------------------------------
00A1            736   ;        EFM8_JDY40_test.c:174: void TIMER2_Init(void){
00A1            737   ;        -----------------------------------------
00A1            738   ;         function TIMER2_Init
00A1            739   ;        -----------------------------------------
00A1            740   _TIMER2_Init:
00A1            741   ;        EFM8_JDY40_test.c:176: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
00A1 75C800     742            mov     _TMR2CN0,#0x00
00A4            743   ;        EFM8_JDY40_test.c:177: CKCON0|=0b_0001_0000;
00A4 438E10     744            orl     _CKCON0,#0x10
00A7            745   ;        EFM8_JDY40_test.c:178: TMR2RL=(-(SYSCLK/(2*DEFAULT_F))); // Initialize reload value
00A7 75CAEE     746            mov     _TMR2RL,#0xEE
00AA 75CBF6     747            mov     (_TMR2RL >> 8),#0xF6
00AD            748   ;        EFM8_JDY40_test.c:179: TMR2=0xffff;   // Set to reload immediately
00AD 75CEFF     749            mov     _TMR2,#0xFF
00B0 75CFFF     750            mov     (_TMR2 >> 8),#0xFF
00B3            751   ;        EFM8_JDY40_test.c:180: ET2=1;         // Enable Timer2 interrupts
00B3 D2AD       752            setb    _ET2
00B5            753   ;        EFM8_JDY40_test.c:181: TR2=1;         // Start Timer2
00B5 D2CA       754            setb    _TR2
00B7            755   ;        EFM8_JDY40_test.c:182: EA=1; // Global interrupt enable
00B7 D2AF       756            setb    _EA
00B9 22         757            ret
00BA            758   ;------------------------------------------------------------
00BA            759   ;Allocation info for local variables in function 'Timer2_ISR'
00BA            760   ;------------------------------------------------------------
00BA            761   ;------------------------------------------------------------
00BA            762   ;        EFM8_JDY40_test.c:185: void Timer2_ISR (void) //interrupt INTERRUPT_TIMER2
00BA            763   ;        -----------------------------------------
00BA            764   ;         function Timer2_ISR
00BA            765   ;        -----------------------------------------
00BA            766   _Timer2_ISR:
00BA            767   ;        EFM8_JDY40_test.c:187: TF2H = 0; // Clear Timer2 interrupt flag
00BA C2CF       768            clr     _TF2H
00BC            769   ;        EFM8_JDY40_test.c:188: OUT0=!OUT0;
00BC B2B3       770            cpl     _P3_3
00BE 22         771            ret
00BF            772   ;------------------------------------------------------------
00BF            773   ;Allocation info for local variables in function 'waitms'
00BF            774   ;------------------------------------------------------------
00BF            775   ;ms                        Allocated to registers r2 r3 
00BF            776   ;j                         Allocated to registers r4 r5 
00BF            777   ;k                         Allocated to registers r6 
00BF            778   ;------------------------------------------------------------
00BF            779   ;        EFM8_JDY40_test.c:192: void waitms (unsigned int ms)
00BF            780   ;        -----------------------------------------
00BF            781   ;         function waitms
00BF            782   ;        -----------------------------------------
00BF            783   _waitms:
00BF AA82       784            mov     r2,dpl
00C1 AB83       785            mov     r3,dph
00C3            786   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00C3 7C00       787            mov     r4,#0x00
00C5 7D00       788            mov     r5,#0x00
00C7            789   L008005?:
00C7 C3         790            clr     c
00C8 EC         791            mov     a,r4
00C9 9A         792            subb    a,r2
00CA ED         793            mov     a,r5
00CB 9B         794            subb    a,r3
00CC 5000       795            jnc     L008009?
00CE            796   ;        EFM8_JDY40_test.c:197: for (k=0; k<4; k++) Timer3us(250);
00CE 7E00       797            mov     r6,#0x00
00D0            798   L008001?:
00D0 BE0470     799            cjne    r6,#0x04,L008018?
00D3            800   L008018?:
00D3 5000       801            jnc     L008007?
00D5 7582FA     802            mov     dpl,#0xFA
00D8 C002       803            push    ar2
00DA C003       804            push    ar3
00DC C004       805            push    ar4
00DE C005       806            push    ar5
00E0 C006       807            push    ar6
00E2 120000     808            lcall   _Timer3us
00E5 D006       809            pop     ar6
00E7 D005       810            pop     ar5
00E9 D004       811            pop     ar4
00EB D003       812            pop     ar3
00ED D002       813            pop     ar2
00EF 0E         814            inc     r6
00F0 8000       815            sjmp    L008001?
00F2            816   L008007?:
00F2            817   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00F2 0C         818            inc     r4
00F3 BC00B0     819            cjne    r4,#0x00,L008005?
00F6 0D         820            inc     r5
00F7 8000       821            sjmp    L008005?
00F9            822   L008009?:
00F9 22         823            ret
00FA            824   ;------------------------------------------------------------
00FA            825   ;Allocation info for local variables in function 'InitPinADC'
00FA            826   ;------------------------------------------------------------
00FA            827   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00FA            828   ;portno                    Allocated to registers r2 
00FA            829   ;mask                      Allocated to registers r3 
00FA            830   ;------------------------------------------------------------
00FA            831   ;        EFM8_JDY40_test.c:200: void InitPinADC (unsigned char portno, unsigned char pinno)
00FA            832   ;        -----------------------------------------
00FA            833   ;         function InitPinADC
00FA            834   ;        -----------------------------------------
00FA            835   _InitPinADC:
00FA AA82       836            mov     r2,dpl
00FC            837   ;        EFM8_JDY40_test.c:204: mask=1<<pinno;
00FC 8560F0     838            mov     b,_InitPinADC_PARM_2
00FF 05F0       839            inc     b
0101 7401       840            mov     a,#0x01
0103 8000       841            sjmp    L009013?
0105            842   L009011?:
0105 25E0       843            add     a,acc
0107            844   L009013?:
0107 D5F070     845            djnz    b,L009011?
010A FB         846            mov     r3,a
010B            847   ;        EFM8_JDY40_test.c:206: SFRPAGE = 0x20;
010B 75A720     848            mov     _SFRPAGE,#0x20
010E            849   ;        EFM8_JDY40_test.c:207: switch (portno)
010E BA00B0     850            cjne    r2,#0x00,L009014?
0111 8000       851            sjmp    L009001?
0113            852   L009014?:
0113 BA0130     853            cjne    r2,#0x01,L009015?
0116 8000       854            sjmp    L009002?
0118            855   L009015?:
0118            856   ;        EFM8_JDY40_test.c:209: case 0:
0118 BA02B0     857            cjne    r2,#0x02,L009005?
011B 8000       858            sjmp    L009003?
011D            859   L009001?:
011D            860   ;        EFM8_JDY40_test.c:210: P0MDIN &= (~mask); // Set pin as analog input
011D EB         861            mov     a,r3
011E F4         862            cpl     a
011F FA         863            mov     r2,a
0120 52F1       864            anl     _P0MDIN,a
0122            865   ;        EFM8_JDY40_test.c:211: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0122 EB         866            mov     a,r3
0123 42D4       867            orl     _P0SKIP,a
0125            868   ;        EFM8_JDY40_test.c:212: break;
0125            869   ;        EFM8_JDY40_test.c:213: case 1:
0125 8000       870            sjmp    L009005?
0127            871   L009002?:
0127            872   ;        EFM8_JDY40_test.c:214: P1MDIN &= (~mask); // Set pin as analog input
0127 EB         873            mov     a,r3
0128 F4         874            cpl     a
0129 FA         875            mov     r2,a
012A 52F2       876            anl     _P1MDIN,a
012C            877   ;        EFM8_JDY40_test.c:215: P1SKIP |= mask; // Skip Crossbar decoding for this pin
012C EB         878            mov     a,r3
012D 42D5       879            orl     _P1SKIP,a
012F            880   ;        EFM8_JDY40_test.c:216: break;
012F            881   ;        EFM8_JDY40_test.c:217: case 2:
012F 8000       882            sjmp    L009005?
0131            883   L009003?:
0131            884   ;        EFM8_JDY40_test.c:218: P2MDIN &= (~mask); // Set pin as analog input
0131 EB         885            mov     a,r3
0132 F4         886            cpl     a
0133 FA         887            mov     r2,a
0134 52F3       888            anl     _P2MDIN,a
0136            889   ;        EFM8_JDY40_test.c:219: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0136 EB         890            mov     a,r3
0137 42CC       891            orl     _P2SKIP,a
0139            892   ;        EFM8_JDY40_test.c:223: }
0139            893   L009005?:
0139            894   ;        EFM8_JDY40_test.c:224: SFRPAGE = 0x00;
0139 75A700     895            mov     _SFRPAGE,#0x00
013C 22         896            ret
013D            897   ;------------------------------------------------------------
013D            898   ;Allocation info for local variables in function 'ADC_at_Pin'
013D            899   ;------------------------------------------------------------
013D            900   ;pin                       Allocated to registers 
013D            901   ;------------------------------------------------------------
013D            902   ;        EFM8_JDY40_test.c:227: unsigned int ADC_at_Pin(unsigned char pin)
013D            903   ;        -----------------------------------------
013D            904   ;         function ADC_at_Pin
013D            905   ;        -----------------------------------------
013D            906   _ADC_at_Pin:
013D 8582BB     907            mov     _ADC0MX,dpl
0140            908   ;        EFM8_JDY40_test.c:230: ADINT = 0;
0140 C2ED       909            clr     _ADINT
0142            910   ;        EFM8_JDY40_test.c:231: ADBUSY = 1;     // Convert voltage at the pin
0142 D2EC       911            setb    _ADBUSY
0144            912   ;        EFM8_JDY40_test.c:232: while (!ADINT); // Wait for conversion to complete
0144            913   L010001?:
0144 30ED30     914            jnb     _ADINT,L010001?
0147            915   ;        EFM8_JDY40_test.c:233: return (ADC0);
0147 85BD82     916            mov     dpl,_ADC0
014A 85BE83     917            mov     dph,(_ADC0 >> 8)
014D 22         918            ret
014E            919   ;------------------------------------------------------------
014E            920   ;Allocation info for local variables in function 'Get_ADC'
014E            921   ;------------------------------------------------------------
014E            922   ;------------------------------------------------------------
014E            923   ;        EFM8_JDY40_test.c:236: unsigned int Get_ADC (void)
014E            924   ;        -----------------------------------------
014E            925   ;         function Get_ADC
014E            926   ;        -----------------------------------------
014E            927   _Get_ADC:
014E            928   ;        EFM8_JDY40_test.c:238: ADINT = 0;
014E C2ED       929            clr     _ADINT
0150            930   ;        EFM8_JDY40_test.c:239: ADBUSY = 1;
0150 D2EC       931            setb    _ADBUSY
0152            932   ;        EFM8_JDY40_test.c:240: while (!ADINT); // Wait for conversion to complete
0152            933   L011001?:
0152 30ED70     934            jnb     _ADINT,L011001?
0155            935   ;        EFM8_JDY40_test.c:241: return (ADC0);
0155 85BD82     936            mov     dpl,_ADC0
0158 85BE83     937            mov     dph,(_ADC0 >> 8)
015B 22         938            ret
015C            939   ;------------------------------------------------------------
015C            940   ;Allocation info for local variables in function 'Volts_at_Pin'
015C            941   ;------------------------------------------------------------
015C            942   ;pin                       Allocated to registers r2 
015C            943   ;------------------------------------------------------------
015C            944   ;        EFM8_JDY40_test.c:245: float Volts_at_Pin(unsigned char pin)
015C            945   ;        -----------------------------------------
015C            946   ;         function Volts_at_Pin
015C            947   ;        -----------------------------------------
015C            948   _Volts_at_Pin:
015C            949   ;        EFM8_JDY40_test.c:247: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
015C 120000     950            lcall   _ADC_at_Pin
015F 120000     951            lcall   ___uint2fs
0162 AA82       952            mov     r2,dpl
0164 AB83       953            mov     r3,dph
0166 ACF0       954            mov     r4,b
0168 FD         955            mov     r5,a
0169 C002       956            push    ar2
016B C003       957            push    ar3
016D C004       958            push    ar4
016F C005       959            push    ar5
0171 903333     960            mov     dptr,#0x3333
0174 75F09B     961            mov     b,#0x9B
0177 7440       962            mov     a,#0x40
0179 120000     963            lcall   ___fsmul
017C AA82       964            mov     r2,dpl
017E AB83       965            mov     r3,dph
0180 ACF0       966            mov     r4,b
0182 FD         967            mov     r5,a
0183 E581       968            mov     a,sp
0185 24FC       969            add     a,#0xfc
0187 F581       970            mov     sp,a
0189 E4         971            clr     a
018A C0E0       972            push    acc
018C 74FC       973            mov     a,#0xFC
018E C0E0       974            push    acc
0190 747F       975            mov     a,#0x7F
0192 C0E0       976            push    acc
0194 7446       977            mov     a,#0x46
0196 C0E0       978            push    acc
0198 8A82       979            mov     dpl,r2
019A 8B83       980            mov     dph,r3
019C 8CF0       981            mov     b,r4
019E ED         982            mov     a,r5
019F 120000     983            lcall   ___fsdiv
01A2 AA82       984            mov     r2,dpl
01A4 AB83       985            mov     r3,dph
01A6 ACF0       986            mov     r4,b
01A8 FD         987            mov     r5,a
01A9 E581       988            mov     a,sp
01AB 24FC       989            add     a,#0xfc
01AD F581       990            mov     sp,a
01AF 8A82       991            mov     dpl,r2
01B1 8B83       992            mov     dph,r3
01B3 8CF0       993            mov     b,r4
01B5 ED         994            mov     a,r5
01B6 22         995            ret
01B7            996   ;------------------------------------------------------------
01B7            997   ;Allocation info for local variables in function 'UART1_Init'
01B7            998   ;------------------------------------------------------------
01B7            999   ;baudrate                  Allocated to registers r2 r3 r4 r5 
01B7           1000   ;------------------------------------------------------------
01B7           1001   ;        EFM8_JDY40_test.c:250: void UART1_Init (unsigned long baudrate)
01B7           1002   ;        -----------------------------------------
01B7           1003   ;         function UART1_Init
01B7           1004   ;        -----------------------------------------
01B7           1005   _UART1_Init:
01B7 AA82      1006            mov     r2,dpl
01B9 AB83      1007            mov     r3,dph
01BB ACF0      1008            mov     r4,b
01BD FD        1009            mov     r5,a
01BE           1010   ;        EFM8_JDY40_test.c:252: SFRPAGE = 0x20;
01BE 75A720    1011            mov     _SFRPAGE,#0x20
01C1           1012   ;        EFM8_JDY40_test.c:253: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01C1 75930C    1013            mov     _SMOD1,#0x0C
01C4           1014   ;        EFM8_JDY40_test.c:254: SCON1 = 0x10;
01C4 75C810    1015            mov     _SCON1,#0x10
01C7           1016   ;        EFM8_JDY40_test.c:255: SBCON1 =0x00;   // disable baud rate generator
01C7 759400    1017            mov     _SBCON1,#0x00
01CA           1018   ;        EFM8_JDY40_test.c:256: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01CA 8A00      1019            mov     __divulong_PARM_2,r2
01CC 8B01      1020            mov     (__divulong_PARM_2 + 1),r3
01CE 8C02      1021            mov     (__divulong_PARM_2 + 2),r4
01D0 8D03      1022            mov     (__divulong_PARM_2 + 3),r5
01D2 90A200    1023            mov     dptr,#0xA200
01D5 75F04A    1024            mov     b,#0x4A
01D8 7404      1025            mov     a,#0x04
01DA 120000    1026            lcall   __divulong
01DD AA82      1027            mov     r2,dpl
01DF AB83      1028            mov     r3,dph
01E1 ACF0      1029            mov     r4,b
01E3 FD        1030            mov     r5,a
01E4 750018    1031            mov     __divulong_PARM_2,#0x18
01E7 E4        1032            clr     a
01E8 F501      1033            mov     (__divulong_PARM_2 + 1),a
01EA F502      1034            mov     (__divulong_PARM_2 + 2),a
01EC F503      1035            mov     (__divulong_PARM_2 + 3),a
01EE 8A82      1036            mov     dpl,r2
01F0 8B83      1037            mov     dph,r3
01F2 8CF0      1038            mov     b,r4
01F4 ED        1039            mov     a,r5
01F5 120000    1040            lcall   __divulong
01F8 AA82      1041            mov     r2,dpl
01FA AB83      1042            mov     r3,dph
01FC ACF0      1043            mov     r4,b
01FE FD        1044            mov     r5,a
01FF E4        1045            clr     a
0200 C3        1046            clr     c
0201 9A        1047            subb    a,r2
0202 FA        1048            mov     r2,a
0203 E4        1049            clr     a
0204 9B        1050            subb    a,r3
0205 FB        1051            mov     r3,a
0206 7401      1052            mov     a,#0x01
0208 9C        1053            subb    a,r4
0209 E4        1054            clr     a
020A 9D        1055            subb    a,r5
020B 8A95      1056            mov     _SBRL1,r2
020D 8B96      1057            mov     (_SBRL1 >> 8),r3
020F           1058   ;        EFM8_JDY40_test.c:257: TI1 = 1; // indicate ready for TX
020F D2C9      1059            setb    _TI1
0211           1060   ;        EFM8_JDY40_test.c:258: SBCON1 |= 0x40;   // enable baud rate generator
0211 439440    1061            orl     _SBCON1,#0x40
0214           1062   ;        EFM8_JDY40_test.c:259: SFRPAGE = 0x00;
0214 75A700    1063            mov     _SFRPAGE,#0x00
0217 22        1064            ret
0218           1065   ;------------------------------------------------------------
0218           1066   ;Allocation info for local variables in function 'putchar1'
0218           1067   ;------------------------------------------------------------
0218           1068   ;c                         Allocated to registers r2 
0218           1069   ;------------------------------------------------------------
0218           1070   ;        EFM8_JDY40_test.c:262: void putchar1 (char c) 
0218           1071   ;        -----------------------------------------
0218           1072   ;         function putchar1
0218           1073   ;        -----------------------------------------
0218           1074   _putchar1:
0218 AA82      1075            mov     r2,dpl
021A           1076   ;        EFM8_JDY40_test.c:264: SFRPAGE = 0x20;
021A 75A720    1077            mov     _SFRPAGE,#0x20
021D           1078   ;        EFM8_JDY40_test.c:265: while (!TI1);
021D           1079   L014001?:
021D           1080   ;        EFM8_JDY40_test.c:266: TI1=0;
021D 10C980    1081            jbc     _TI1,L014008?
0220 8000      1082            sjmp    L014001?
0222           1083   L014008?:
0222           1084   ;        EFM8_JDY40_test.c:267: SBUF1 = c;
0222 8A92      1085            mov     _SBUF1,r2
0224           1086   ;        EFM8_JDY40_test.c:268: SFRPAGE = 0x00;
0224 75A700    1087            mov     _SFRPAGE,#0x00
0227 22        1088            ret
0228           1089   ;------------------------------------------------------------
0228           1090   ;Allocation info for local variables in function 'sendstr1'
0228           1091   ;------------------------------------------------------------
0228           1092   ;s                         Allocated to registers r2 r3 r4 
0228           1093   ;------------------------------------------------------------
0228           1094   ;        EFM8_JDY40_test.c:271: void sendstr1 (char * s)
0228           1095   ;        -----------------------------------------
0228           1096   ;         function sendstr1
0228           1097   ;        -----------------------------------------
0228           1098   _sendstr1:
0228 AA82      1099            mov     r2,dpl
022A AB83      1100            mov     r3,dph
022C ACF0      1101            mov     r4,b
022E           1102   ;        EFM8_JDY40_test.c:273: while(*s)
022E           1103   L015001?:
022E 8A82      1104            mov     dpl,r2
0230 8B83      1105            mov     dph,r3
0232 8CF0      1106            mov     b,r4
0234 120000    1107            lcall   __gptrget
0237 FD        1108            mov     r5,a
0238 6000      1109            jz      L015004?
023A           1110   ;        EFM8_JDY40_test.c:275: putchar1(*s);
023A 8D82      1111            mov     dpl,r5
023C C002      1112            push    ar2
023E C003      1113            push    ar3
0240 C004      1114            push    ar4
0242 120000    1115            lcall   _putchar1
0245 D004      1116            pop     ar4
0247 D003      1117            pop     ar3
0249 D002      1118            pop     ar2
024B           1119   ;        EFM8_JDY40_test.c:276: s++;     
024B 0A        1120            inc     r2
024C BA00C0    1121            cjne    r2,#0x00,L015001?
024F 0B        1122            inc     r3
0250 8000      1123            sjmp    L015001?
0252           1124   L015004?:
0252 22        1125            ret
0253           1126   ;------------------------------------------------------------
0253           1127   ;Allocation info for local variables in function 'getchar1'
0253           1128   ;------------------------------------------------------------
0253           1129   ;c                         Allocated to registers 
0253           1130   ;------------------------------------------------------------
0253           1131   ;        EFM8_JDY40_test.c:280: char getchar1 (void)
0253           1132   ;        -----------------------------------------
0253           1133   ;         function getchar1
0253           1134   ;        -----------------------------------------
0253           1135   _getchar1:
0253           1136   ;        EFM8_JDY40_test.c:283: SFRPAGE = 0x20;
0253 75A720    1137            mov     _SFRPAGE,#0x20
0256           1138   ;        EFM8_JDY40_test.c:284: while (!RI1);
0256           1139   L016001?:
0256           1140   ;        EFM8_JDY40_test.c:285: RI1=0;
0256 10C8C0    1141            jbc     _RI1,L016008?
0259 8000      1142            sjmp    L016001?
025B           1143   L016008?:
025B           1144   ;        EFM8_JDY40_test.c:287: SCON1&=0b_0011_1111;
025B 53C83F    1145            anl     _SCON1,#0x3F
025E           1146   ;        EFM8_JDY40_test.c:288: c = SBUF1;
025E 859282    1147            mov     dpl,_SBUF1
0261           1148   ;        EFM8_JDY40_test.c:289: SFRPAGE = 0x00;
0261 75A700    1149            mov     _SFRPAGE,#0x00
0264           1150   ;        EFM8_JDY40_test.c:290: return (c);
0264 22        1151            ret
0265           1152   ;------------------------------------------------------------
0265           1153   ;Allocation info for local variables in function 'getchar1_with_timeout'
0265           1154   ;------------------------------------------------------------
0265           1155   ;c                         Allocated to registers 
0265           1156   ;timeout                   Allocated to registers r2 r3 
0265           1157   ;------------------------------------------------------------
0265           1158   ;        EFM8_JDY40_test.c:293: char getchar1_with_timeout (void)
0265           1159   ;        -----------------------------------------
0265           1160   ;         function getchar1_with_timeout
0265           1161   ;        -----------------------------------------
0265           1162   _getchar1_with_timeout:
0265           1163   ;        EFM8_JDY40_test.c:297: SFRPAGE = 0x20;
0265 75A720    1164            mov     _SFRPAGE,#0x20
0268           1165   ;        EFM8_JDY40_test.c:299: while (!RI1)
0268 7A00      1166            mov     r2,#0x00
026A 7B00      1167            mov     r3,#0x00
026C           1168   L017003?:
026C 20C840    1169            jb      _RI1,L017005?
026F           1170   ;        EFM8_JDY40_test.c:301: SFRPAGE = 0x00;
026F 75A700    1171            mov     _SFRPAGE,#0x00
0272           1172   ;        EFM8_JDY40_test.c:302: Timer3us(20);
0272 758214    1173            mov     dpl,#0x14
0275 C002      1174            push    ar2
0277 C003      1175            push    ar3
0279 120000    1176            lcall   _Timer3us
027C D003      1177            pop     ar3
027E D002      1178            pop     ar2
0280           1179   ;        EFM8_JDY40_test.c:303: SFRPAGE = 0x20;
0280 75A720    1180            mov     _SFRPAGE,#0x20
0283           1181   ;        EFM8_JDY40_test.c:304: timeout++;
0283 0A        1182            inc     r2
0284 BA0080    1183            cjne    r2,#0x00,L017012?
0287 0B        1184            inc     r3
0288           1185   L017012?:
0288           1186   ;        EFM8_JDY40_test.c:305: if(timeout==25000)
0288 BAA800    1187            cjne    r2,#0xA8,L017003?
028B BB6100    1188            cjne    r3,#0x61,L017003?
028E           1189   ;        EFM8_JDY40_test.c:307: SFRPAGE = 0x00;
028E 75A700    1190            mov     _SFRPAGE,#0x00
0291           1191   ;        EFM8_JDY40_test.c:308: return ('\n'); // Timeout after half second
0291 75820A    1192            mov     dpl,#0x0A
0294 22        1193            ret
0295           1194   L017005?:
0295           1195   ;        EFM8_JDY40_test.c:311: RI1=0;
0295 C2C8      1196            clr     _RI1
0297           1197   ;        EFM8_JDY40_test.c:313: SCON1&=0b_0011_1111;
0297 53C83F    1198            anl     _SCON1,#0x3F
029A           1199   ;        EFM8_JDY40_test.c:314: c = SBUF1;
029A 859282    1200            mov     dpl,_SBUF1
029D           1201   ;        EFM8_JDY40_test.c:315: SFRPAGE = 0x00;
029D 75A700    1202            mov     _SFRPAGE,#0x00
02A0           1203   ;        EFM8_JDY40_test.c:316: return (c);
02A0 22        1204            ret
02A1           1205   ;------------------------------------------------------------
02A1           1206   ;Allocation info for local variables in function 'getstr1'
02A1           1207   ;------------------------------------------------------------
02A1           1208   ;s                         Allocated to registers r2 r3 r4 
02A1           1209   ;c                         Allocated to registers r5 
02A1           1210   ;------------------------------------------------------------
02A1           1211   ;        EFM8_JDY40_test.c:319: void getstr1 (char * s)
02A1           1212   ;        -----------------------------------------
02A1           1213   ;         function getstr1
02A1           1214   ;        -----------------------------------------
02A1           1215   _getstr1:
02A1 AA82      1216            mov     r2,dpl
02A3 AB83      1217            mov     r3,dph
02A5 ACF0      1218            mov     r4,b
02A7           1219   ;        EFM8_JDY40_test.c:323: while(1)
02A7           1220   L018004?:
02A7           1221   ;        EFM8_JDY40_test.c:325: c=getchar1_with_timeout();
02A7 C002      1222            push    ar2
02A9 C003      1223            push    ar3
02AB C004      1224            push    ar4
02AD 120000    1225            lcall   _getchar1_with_timeout
02B0 AD82      1226            mov     r5,dpl
02B2 D004      1227            pop     ar4
02B4 D003      1228            pop     ar3
02B6 D002      1229            pop     ar2
02B8           1230   ;        EFM8_JDY40_test.c:326: if(c=='\n')
02B8 BD0A00    1231            cjne    r5,#0x0A,L018002?
02BB           1232   ;        EFM8_JDY40_test.c:328: *s=0;
02BB 8A82      1233            mov     dpl,r2
02BD 8B83      1234            mov     dph,r3
02BF 8CF0      1235            mov     b,r4
02C1 E4        1236            clr     a
02C2           1237   ;        EFM8_JDY40_test.c:329: return;
02C2 020000    1238            ljmp    __gptrput
02C5           1239   L018002?:
02C5           1240   ;        EFM8_JDY40_test.c:331: *s=c;
02C5 8A82      1241            mov     dpl,r2
02C7 8B83      1242            mov     dph,r3
02C9 8CF0      1243            mov     b,r4
02CB ED        1244            mov     a,r5
02CC 120000    1245            lcall   __gptrput
02CF A3        1246            inc     dptr
02D0 AA82      1247            mov     r2,dpl
02D2 AB83      1248            mov     r3,dph
02D4           1249   ;        EFM8_JDY40_test.c:332: s++;
02D4 8000      1250            sjmp    L018004?
02D6           1251   ;------------------------------------------------------------
02D6           1252   ;Allocation info for local variables in function 'RXU1'
02D6           1253   ;------------------------------------------------------------
02D6           1254   ;------------------------------------------------------------
02D6           1255   ;        EFM8_JDY40_test.c:337: bit RXU1 (void)
02D6           1256   ;        -----------------------------------------
02D6           1257   ;         function RXU1
02D6           1258   ;        -----------------------------------------
02D6           1259   _RXU1:
02D6           1260   ;        EFM8_JDY40_test.c:340: SFRPAGE = 0x20;
02D6 75A720    1261            mov     _SFRPAGE,#0x20
02D9           1262   ;        EFM8_JDY40_test.c:341: mybit=RI1;
02D9 A2C8      1263            mov     c,_RI1
02DB           1264   ;        EFM8_JDY40_test.c:342: SFRPAGE = 0x00;
02DB 75A700    1265            mov     _SFRPAGE,#0x00
02DE           1266   ;        EFM8_JDY40_test.c:343: return mybit;
02DE 22        1267            ret
02DF           1268   ;------------------------------------------------------------
02DF           1269   ;Allocation info for local variables in function 'waitms_or_RI1'
02DF           1270   ;------------------------------------------------------------
02DF           1271   ;ms                        Allocated to registers r2 r3 
02DF           1272   ;j                         Allocated to registers r4 r5 
02DF           1273   ;k                         Allocated to registers r6 
02DF           1274   ;------------------------------------------------------------
02DF           1275   ;        EFM8_JDY40_test.c:346: void waitms_or_RI1 (unsigned int ms)
02DF           1276   ;        -----------------------------------------
02DF           1277   ;         function waitms_or_RI1
02DF           1278   ;        -----------------------------------------
02DF           1279   _waitms_or_RI1:
02DF AA82      1280            mov     r2,dpl
02E1 AB83      1281            mov     r3,dph
02E3           1282   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
02E3 7C00      1283            mov     r4,#0x00
02E5 7D00      1284            mov     r5,#0x00
02E7           1285   L020007?:
02E7 C3        1286            clr     c
02E8 EC        1287            mov     a,r4
02E9 9A        1288            subb    a,r2
02EA ED        1289            mov     a,r5
02EB 9B        1290            subb    a,r3
02EC 5000      1291            jnc     L020011?
02EE           1292   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
02EE 7E00      1293            mov     r6,#0x00
02F0           1294   L020003?:
02F0 BE0440    1295            cjne    r6,#0x04,L020019?
02F3           1296   L020019?:
02F3 5000      1297            jnc     L020009?
02F5           1298   ;        EFM8_JDY40_test.c:354: if(RXU1()) return;
02F5 C002      1299            push    ar2
02F7 C003      1300            push    ar3
02F9 C004      1301            push    ar4
02FB C005      1302            push    ar5
02FD C006      1303            push    ar6
02FF 120000    1304            lcall   _RXU1
0302 E4        1305            clr     a
0303 33        1306            rlc     a
0304 D006      1307            pop     ar6
0306 D005      1308            pop     ar5
0308 D004      1309            pop     ar4
030A D003      1310            pop     ar3
030C D002      1311            pop     ar2
030E 6000      1312            jz      L020002?
0310 22        1313            ret
0311           1314   L020002?:
0311           1315   ;        EFM8_JDY40_test.c:355: Timer3us(250);
0311 7582FA    1316            mov     dpl,#0xFA
0314 C002      1317            push    ar2
0316 C003      1318            push    ar3
0318 C004      1319            push    ar4
031A C005      1320            push    ar5
031C C006      1321            push    ar6
031E 120000    1322            lcall   _Timer3us
0321 D006      1323            pop     ar6
0323 D005      1324            pop     ar5
0325 D004      1325            pop     ar4
0327 D003      1326            pop     ar3
0329 D002      1327            pop     ar2
032B           1328   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
032B 0E        1329            inc     r6
032C 8000      1330            sjmp    L020003?
032E           1331   L020009?:
032E           1332   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
032E 0C        1333            inc     r4
032F BC0080    1334            cjne    r4,#0x00,L020007?
0332 0D        1335            inc     r5
0333 8000      1336            sjmp    L020007?
0335           1337   L020011?:
0335 22        1338            ret
0336           1339   ;------------------------------------------------------------
0336           1340   ;Allocation info for local variables in function 'SendATCommand'
0336           1341   ;------------------------------------------------------------
0336           1342   ;s                         Allocated to registers r2 r3 r4 
0336           1343   ;------------------------------------------------------------
0336           1344   ;        EFM8_JDY40_test.c:360: void SendATCommand (char * s)
0336           1345   ;        -----------------------------------------
0336           1346   ;         function SendATCommand
0336           1347   ;        -----------------------------------------
0336           1348   _SendATCommand:
0336 AA82      1349            mov     r2,dpl
0338 AB83      1350            mov     r3,dph
033A ACF0      1351            mov     r4,b
033C           1352   ;        EFM8_JDY40_test.c:362: printf("Command: %s", s);
033C C002      1353            push    ar2
033E C003      1354            push    ar3
0340 C004      1355            push    ar4
0342 C002      1356            push    ar2
0344 C003      1357            push    ar3
0346 C004      1358            push    ar4
0348 7400      1359            mov     a,#__str_0
034A C0E0      1360            push    acc
034C 74C5      1361            mov     a,#(__str_0 >> 8)
034E C0E0      1362            push    acc
0350 7480      1363            mov     a,#0x80
0352 C0E0      1364            push    acc
0354 120000    1365            lcall   _printf
0357 E581      1366            mov     a,sp
0359 24FA      1367            add     a,#0xfa
035B F581      1368            mov     sp,a
035D           1369   ;        EFM8_JDY40_test.c:363: P3_0=0; // 'set' pin to 0 is 'AT' mode.
035D C2B0      1370            clr     _P3_0
035F           1371   ;        EFM8_JDY40_test.c:364: waitms(5);
035F 900005    1372            mov     dptr,#0x0005
0362 120000    1373            lcall   _waitms
0365 D004      1374            pop     ar4
0367 D003      1375            pop     ar3
0369 D002      1376            pop     ar2
036B           1377   ;        EFM8_JDY40_test.c:365: sendstr1(s);
036B 8A82      1378            mov     dpl,r2
036D 8B83      1379            mov     dph,r3
036F 8CF0      1380            mov     b,r4
0371 120000    1381            lcall   _sendstr1
0374           1382   ;        EFM8_JDY40_test.c:366: getstr1(buff);
0374 9018D0    1383            mov     dptr,#_buff
0377 75F040    1384            mov     b,#0x40
037A 120000    1385            lcall   _getstr1
037D           1386   ;        EFM8_JDY40_test.c:367: waitms(10);
037D 90000A    1387            mov     dptr,#0x000A
0380 120000    1388            lcall   _waitms
0383           1389   ;        EFM8_JDY40_test.c:368: P3_0=1; // 'set' pin to 1 is normal operation mode.
0383 D2B0      1390            setb    _P3_0
0385           1391   ;        EFM8_JDY40_test.c:369: printf("Response: %s\r\n", buff);
0385 74D0      1392            mov     a,#_buff
0387 C0E0      1393            push    acc
0389 7418      1394            mov     a,#(_buff >> 8)
038B C0E0      1395            push    acc
038D 7440      1396            mov     a,#0x40
038F C0E0      1397            push    acc
0391 7480      1398            mov     a,#__str_1
0393 C0E0      1399            push    acc
0395 74C5      1400            mov     a,#(__str_1 >> 8)
0397 C0E0      1401            push    acc
0399 7480      1402            mov     a,#0x80
039B C0E0      1403            push    acc
039D 120000    1404            lcall   _printf
03A0 E581      1405            mov     a,sp
03A2 24FA      1406            add     a,#0xfa
03A4 F581      1407            mov     sp,a
03A6 22        1408            ret
03A7           1409   ;------------------------------------------------------------
03A7           1410   ;Allocation info for local variables in function 'LCD_pulse'
03A7           1411   ;------------------------------------------------------------
03A7           1412   ;------------------------------------------------------------
03A7           1413   ;        EFM8_JDY40_test.c:374: void LCD_pulse (void)
03A7           1414   ;        -----------------------------------------
03A7           1415   ;         function LCD_pulse
03A7           1416   ;        -----------------------------------------
03A7           1417   _LCD_pulse:
03A7           1418   ;        EFM8_JDY40_test.c:376: LCD_E=1;
03A7 D2A0      1419            setb    _P2_0
03A9           1420   ;        EFM8_JDY40_test.c:377: Timer3us(40);
03A9 758228    1421            mov     dpl,#0x28
03AC 120000    1422            lcall   _Timer3us
03AF           1423   ;        EFM8_JDY40_test.c:378: LCD_E=0;
03AF C2A0      1424            clr     _P2_0
03B1 22        1425            ret
03B2           1426   ;------------------------------------------------------------
03B2           1427   ;Allocation info for local variables in function 'LCD_byte'
03B2           1428   ;------------------------------------------------------------
03B2           1429   ;x                         Allocated to registers r2 
03B2           1430   ;------------------------------------------------------------
03B2           1431   ;        EFM8_JDY40_test.c:381: void LCD_byte (unsigned char x)
03B2           1432   ;        -----------------------------------------
03B2           1433   ;         function LCD_byte
03B2           1434   ;        -----------------------------------------
03B2           1435   _LCD_byte:
03B2 AA82      1436            mov     r2,dpl
03B4           1437   ;        EFM8_JDY40_test.c:384: ACC=x; //Send high nible
03B4 8AE0      1438            mov     _ACC,r2
03B6           1439   ;        EFM8_JDY40_test.c:385: LCD_D7=ACC_7;
03B6 A2E7      1440            mov     c,_ACC_7
03B8 9290      1441            mov     _P1_0,c
03BA           1442   ;        EFM8_JDY40_test.c:386: LCD_D6=ACC_6;
03BA A2E6      1443            mov     c,_ACC_6
03BC 9291      1444            mov     _P1_1,c
03BE           1445   ;        EFM8_JDY40_test.c:387: LCD_D5=ACC_5;
03BE A2E5      1446            mov     c,_ACC_5
03C0 9292      1447            mov     _P1_2,c
03C2           1448   ;        EFM8_JDY40_test.c:388: LCD_D4=ACC_4;
03C2 A2E4      1449            mov     c,_ACC_4
03C4 9293      1450            mov     _P1_3,c
03C6           1451   ;        EFM8_JDY40_test.c:389: LCD_pulse();
03C6 C002      1452            push    ar2
03C8 120000    1453            lcall   _LCD_pulse
03CB           1454   ;        EFM8_JDY40_test.c:390: Timer3us(40);
03CB 758228    1455            mov     dpl,#0x28
03CE 120000    1456            lcall   _Timer3us
03D1 D002      1457            pop     ar2
03D3           1458   ;        EFM8_JDY40_test.c:391: ACC=x; //Send low nible
03D3 8AE0      1459            mov     _ACC,r2
03D5           1460   ;        EFM8_JDY40_test.c:392: LCD_D7=ACC_3;
03D5 A2E3      1461            mov     c,_ACC_3
03D7 9290      1462            mov     _P1_0,c
03D9           1463   ;        EFM8_JDY40_test.c:393: LCD_D6=ACC_2;
03D9 A2E2      1464            mov     c,_ACC_2
03DB 9291      1465            mov     _P1_1,c
03DD           1466   ;        EFM8_JDY40_test.c:394: LCD_D5=ACC_1;
03DD A2E1      1467            mov     c,_ACC_1
03DF 9292      1468            mov     _P1_2,c
03E1           1469   ;        EFM8_JDY40_test.c:395: LCD_D4=ACC_0;
03E1 A2E0      1470            mov     c,_ACC_0
03E3 9293      1471            mov     _P1_3,c
03E5           1472   ;        EFM8_JDY40_test.c:396: LCD_pulse();
03E5 020000    1473            ljmp    _LCD_pulse
03E8           1474   ;------------------------------------------------------------
03E8           1475   ;Allocation info for local variables in function 'WriteData'
03E8           1476   ;------------------------------------------------------------
03E8           1477   ;x                         Allocated to registers r2 
03E8           1478   ;------------------------------------------------------------
03E8           1479   ;        EFM8_JDY40_test.c:399: void WriteData (unsigned char x)
03E8           1480   ;        -----------------------------------------
03E8           1481   ;         function WriteData
03E8           1482   ;        -----------------------------------------
03E8           1483   _WriteData:
03E8 AA82      1484            mov     r2,dpl
03EA           1485   ;        EFM8_JDY40_test.c:401: LCD_RS=1;
03EA D297      1486            setb    _P1_7
03EC           1487   ;        EFM8_JDY40_test.c:402: LCD_byte(x);
03EC 8A82      1488            mov     dpl,r2
03EE 120000    1489            lcall   _LCD_byte
03F1           1490   ;        EFM8_JDY40_test.c:403: waitms(2);
03F1 900002    1491            mov     dptr,#0x0002
03F4 020000    1492            ljmp    _waitms
03F7           1493   ;------------------------------------------------------------
03F7           1494   ;Allocation info for local variables in function 'WriteCommand'
03F7           1495   ;------------------------------------------------------------
03F7           1496   ;x                         Allocated to registers r2 
03F7           1497   ;------------------------------------------------------------
03F7           1498   ;        EFM8_JDY40_test.c:406: void WriteCommand (unsigned char x)
03F7           1499   ;        -----------------------------------------
03F7           1500   ;         function WriteCommand
03F7           1501   ;        -----------------------------------------
03F7           1502   _WriteCommand:
03F7 AA82      1503            mov     r2,dpl
03F9           1504   ;        EFM8_JDY40_test.c:408: LCD_RS=0;
03F9 C297      1505            clr     _P1_7
03FB           1506   ;        EFM8_JDY40_test.c:409: LCD_byte(x);
03FB 8A82      1507            mov     dpl,r2
03FD 120000    1508            lcall   _LCD_byte
0400           1509   ;        EFM8_JDY40_test.c:410: waitms(5);
0400 900005    1510            mov     dptr,#0x0005
0403 020000    1511            ljmp    _waitms
0406           1512   ;------------------------------------------------------------
0406           1513   ;Allocation info for local variables in function 'LCD_4BIT'
0406           1514   ;------------------------------------------------------------
0406           1515   ;------------------------------------------------------------
0406           1516   ;        EFM8_JDY40_test.c:413: void LCD_4BIT (void)
0406           1517   ;        -----------------------------------------
0406           1518   ;         function LCD_4BIT
0406           1519   ;        -----------------------------------------
0406           1520   _LCD_4BIT:
0406           1521   ;        EFM8_JDY40_test.c:415: LCD_E=0; // Resting state of LCD's enable is zero
0406 C2A0      1522            clr     _P2_0
0408           1523   ;        EFM8_JDY40_test.c:417: waitms(20);
0408 900014    1524            mov     dptr,#0x0014
040B 120000    1525            lcall   _waitms
040E           1526   ;        EFM8_JDY40_test.c:419: WriteCommand(0x33);
040E 758233    1527            mov     dpl,#0x33
0411 120000    1528            lcall   _WriteCommand
0414           1529   ;        EFM8_JDY40_test.c:420: WriteCommand(0x33);
0414 758233    1530            mov     dpl,#0x33
0417 120000    1531            lcall   _WriteCommand
041A           1532   ;        EFM8_JDY40_test.c:421: WriteCommand(0x32); // Change to 4-bit mode
041A 758232    1533            mov     dpl,#0x32
041D 120000    1534            lcall   _WriteCommand
0420           1535   ;        EFM8_JDY40_test.c:424: WriteCommand(0x28);
0420 758228    1536            mov     dpl,#0x28
0423 120000    1537            lcall   _WriteCommand
0426           1538   ;        EFM8_JDY40_test.c:425: WriteCommand(0x0c);
0426 75820C    1539            mov     dpl,#0x0C
0429 120000    1540            lcall   _WriteCommand
042C           1541   ;        EFM8_JDY40_test.c:426: WriteCommand(0x01); // Clear screen command (takes some time)
042C 758201    1542            mov     dpl,#0x01
042F 120000    1543            lcall   _WriteCommand
0432           1544   ;        EFM8_JDY40_test.c:427: waitms(20); // Wait for clear screen command to finsih.
0432 900014    1545            mov     dptr,#0x0014
0435 020000    1546            ljmp    _waitms
0438           1547   ;------------------------------------------------------------
0438           1548   ;Allocation info for local variables in function 'LCDprint'
0438           1549   ;------------------------------------------------------------
0438           1550   ;line                      Allocated with name '_LCDprint_PARM_2'
0438           1551   ;string                    Allocated to registers r2 r3 r4 
0438           1552   ;j                         Allocated to registers r5 r6 
0438           1553   ;------------------------------------------------------------
0438           1554   ;        EFM8_JDY40_test.c:430: void LCDprint(char * string, unsigned char line, bit clear)
0438           1555   ;        -----------------------------------------
0438           1556   ;         function LCDprint
0438           1557   ;        -----------------------------------------
0438           1558   _LCDprint:
0438 AA82      1559            mov     r2,dpl
043A AB83      1560            mov     r3,dph
043C ACF0      1561            mov     r4,b
043E           1562   ;        EFM8_JDY40_test.c:434: WriteCommand(line==2?0xc0:0x80);
043E 7402      1563            mov     a,#0x02
0440 B520C0    1564            cjne    a,_LCDprint_PARM_2,L027013?
0443 7DC0      1565            mov     r5,#0xC0
0445 8000      1566            sjmp    L027014?
0447           1567   L027013?:
0447 7D80      1568            mov     r5,#0x80
0449           1569   L027014?:
0449 8D82      1570            mov     dpl,r5
044B C002      1571            push    ar2
044D C003      1572            push    ar3
044F C004      1573            push    ar4
0451 120000    1574            lcall   _WriteCommand
0454           1575   ;        EFM8_JDY40_test.c:435: waitms(5);
0454 900005    1576            mov     dptr,#0x0005
0457 120000    1577            lcall   _waitms
045A D004      1578            pop     ar4
045C D003      1579            pop     ar3
045E D002      1580            pop     ar2
0460           1581   ;        EFM8_JDY40_test.c:436: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
0460 7D00      1582            mov     r5,#0x00
0462 7E00      1583            mov     r6,#0x00
0464           1584   L027003?:
0464 ED        1585            mov     a,r5
0465 2A        1586            add     a,r2
0466 FF        1587            mov     r7,a
0467 EE        1588            mov     a,r6
0468 3B        1589            addc    a,r3
0469 F8        1590            mov     r0,a
046A 8C01      1591            mov     ar1,r4
046C 8F82      1592            mov     dpl,r7
046E 8883      1593            mov     dph,r0
0470 89F0      1594            mov     b,r1
0472 120000    1595            lcall   __gptrget
0475 FF        1596            mov     r7,a
0476 6000      1597            jz      L027006?
0478 8F82      1598            mov     dpl,r7
047A C002      1599            push    ar2
047C C003      1600            push    ar3
047E C004      1601            push    ar4
0480 C005      1602            push    ar5
0482 C006      1603            push    ar6
0484 120000    1604            lcall   _WriteData
0487 D006      1605            pop     ar6
0489 D005      1606            pop     ar5
048B D004      1607            pop     ar4
048D D003      1608            pop     ar3
048F D002      1609            pop     ar2
0491 0D        1610            inc     r5
0492 BD0040    1611            cjne    r5,#0x00,L027003?
0495 0E        1612            inc     r6
0496 8000      1613            sjmp    L027003?
0498           1614   L027006?:
0498           1615   ;        EFM8_JDY40_test.c:437: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0498 3090C0    1616            jnb     _LCDprint_PARM_3,L027011?
049B 8D02      1617            mov     ar2,r5
049D 8E03      1618            mov     ar3,r6
049F           1619   L027007?:
049F C3        1620            clr     c
04A0 EA        1621            mov     a,r2
04A1 9410      1622            subb    a,#0x10
04A3 EB        1623            mov     a,r3
04A4 6480      1624            xrl     a,#0x80
04A6 9480      1625            subb    a,#0x80
04A8 5000      1626            jnc     L027011?
04AA 758220    1627            mov     dpl,#0x20
04AD C002      1628            push    ar2
04AF C003      1629            push    ar3
04B1 120000    1630            lcall   _WriteData
04B4 D003      1631            pop     ar3
04B6 D002      1632            pop     ar2
04B8 0A        1633            inc     r2
04B9 BA0000    1634            cjne    r2,#0x00,L027007?
04BC 0B        1635            inc     r3
04BD 8000      1636            sjmp    L027007?
04BF           1637   L027011?:
04BF 22        1638            ret
04C0           1639   ;------------------------------------------------------------
04C0           1640   ;Allocation info for local variables in function 'main'
04C0           1641   ;------------------------------------------------------------
04C0           1642   ;cnt                       Allocated to registers r2 r3 
04C0           1643   ;volt_x                    Allocated with name '_main_volt_x_1_123'
04C0           1644   ;volt_y                    Allocated to registers r4 r5 r6 r7 
04C0           1645   ;frequency                 Allocated to registers r4 r5 r6 r7 
04C0           1646   ;buff1                     Allocated with name '_main_buff1_1_123'
04C0           1647   ;------------------------------------------------------------
04C0           1648   ;        EFM8_JDY40_test.c:440: void main (void)
04C0           1649   ;        -----------------------------------------
04C0           1650   ;         function main
04C0           1651   ;        -----------------------------------------
04C0           1652   _main:
04C0           1653   ;        EFM8_JDY40_test.c:452: InitADC();
04C0 120000    1654            lcall   _InitADC
04C3           1655   ;        EFM8_JDY40_test.c:453: waitms(500);
04C3 9001F4    1656            mov     dptr,#0x01F4
04C6 120000    1657            lcall   _waitms
04C9           1658   ;        EFM8_JDY40_test.c:454: printf("\r\nJDY-40 test\r\n");
04C9 7440      1659            mov     a,#__str_2
04CB C0E0      1660            push    acc
04CD 74C7      1661            mov     a,#(__str_2 >> 8)
04CF C0E0      1662            push    acc
04D1 7480      1663            mov     a,#0x80
04D3 C0E0      1664            push    acc
04D5 120000    1665            lcall   _printf
04D8 1581      1666            dec     sp
04DA 1581      1667            dec     sp
04DC 1581      1668            dec     sp
04DE           1669   ;        EFM8_JDY40_test.c:455: UART1_Init(9600);
04DE 902580    1670            mov     dptr,#0x2580
04E1 E4        1671            clr     a
04E2 F5F0      1672            mov     b,a
04E4 120000    1673            lcall   _UART1_Init
04E7           1674   ;        EFM8_JDY40_test.c:456: InitPinADC(2,4); //for y remote
04E7 756004    1675            mov     _InitPinADC_PARM_2,#0x04
04EA 758202    1676            mov     dpl,#0x02
04ED 120000    1677            lcall   _InitPinADC
04F0           1678   ;        EFM8_JDY40_test.c:457: InitPinADC(2,5); //for x remote
04F0 756005    1679            mov     _InitPinADC_PARM_2,#0x05
04F3 758202    1680            mov     dpl,#0x02
04F6 120000    1681            lcall   _InitPinADC
04F9           1682   ;        EFM8_JDY40_test.c:462: LCD_4BIT();
04F9 120000    1683            lcall   _LCD_4BIT
04FC           1684   ;        EFM8_JDY40_test.c:480: SendATCommand("AT+DVID9944\r\n");  
04FC 90C780    1685            mov     dptr,#__str_3
04FF 75F080    1686            mov     b,#0x80
0502 120000    1687            lcall   _SendATCommand
0505           1688   ;        EFM8_JDY40_test.c:483: SendATCommand("AT+VER\r\n");
0505 90C7C0    1689            mov     dptr,#__str_4
0508 75F080    1690            mov     b,#0x80
050B 120000    1691            lcall   _SendATCommand
050E           1692   ;        EFM8_JDY40_test.c:484: SendATCommand("AT+BAUD\r\n");
050E 90C800    1693            mov     dptr,#__str_5
0511 75F080    1694            mov     b,#0x80
0514 120000    1695            lcall   _SendATCommand
0517           1696   ;        EFM8_JDY40_test.c:485: SendATCommand("AT+RFID\r\n");
0517 90C840    1697            mov     dptr,#__str_6
051A 75F080    1698            mov     b,#0x80
051D 120000    1699            lcall   _SendATCommand
0520           1700   ;        EFM8_JDY40_test.c:486: SendATCommand("AT+DVID\r\n");
0520 90C880    1701            mov     dptr,#__str_7
0523 75F080    1702            mov     b,#0x80
0526 120000    1703            lcall   _SendATCommand
0529           1704   ;        EFM8_JDY40_test.c:487: SendATCommand("AT+RFC\r\n");
0529 90C8C0    1705            mov     dptr,#__str_8
052C 75F080    1706            mov     b,#0x80
052F 120000    1707            lcall   _SendATCommand
0532           1708   ;        EFM8_JDY40_test.c:488: SendATCommand("AT+POWE\r\n");
0532 90C900    1709            mov     dptr,#__str_9
0535 75F080    1710            mov     b,#0x80
0538 120000    1711            lcall   _SendATCommand
053B           1712   ;        EFM8_JDY40_test.c:489: SendATCommand("AT+CLSS\r\n");
053B 90C940    1713            mov     dptr,#__str_10
053E 75F080    1714            mov     b,#0x80
0541 120000    1715            lcall   _SendATCommand
0544           1716   ;        EFM8_JDY40_test.c:491: printf("\r\nPress and hold the BOOT button to transmit.\r\n");
0544 7480      1717            mov     a,#__str_11
0546 C0E0      1718            push    acc
0548 74C9      1719            mov     a,#(__str_11 >> 8)
054A C0E0      1720            push    acc
054C 7480      1721            mov     a,#0x80
054E C0E0      1722            push    acc
0550 120000    1723            lcall   _printf
0553 1581      1724            dec     sp
0555 1581      1725            dec     sp
0557 1581      1726            dec     sp
0559           1727   ;        EFM8_JDY40_test.c:494: while(1)
0559 7A00      1728            mov     r2,#0x00
055B 7B00      1729            mov     r3,#0x00
055D           1730   L028008?:
055D           1731   ;        EFM8_JDY40_test.c:499: volt_x = Volts_at_Pin(QFP32_MUX_P1_4);
055D 75820A    1732            mov     dpl,#0x0A
0560 C002      1733            push    ar2
0562 C003      1734            push    ar3
0564 120000    1735            lcall   _Volts_at_Pin
0567 8582E0    1736            mov     _main_volt_x_1_123,dpl
056A 8583E1    1737            mov     (_main_volt_x_1_123 + 1),dph
056D 85F0E2    1738            mov     (_main_volt_x_1_123 + 2),b
0570 F5E3      1739            mov     (_main_volt_x_1_123 + 3),a
0572           1740   ;        EFM8_JDY40_test.c:500: volt_y = Volts_at_Pin(QFP32_MUX_P1_5);
0572 75820B    1741            mov     dpl,#0x0B
0575 120000    1742            lcall   _Volts_at_Pin
0578 AC82      1743            mov     r4,dpl
057A AD83      1744            mov     r5,dph
057C AEF0      1745            mov     r6,b
057E FF        1746            mov     r7,a
057F           1747   ;        EFM8_JDY40_test.c:507: sprintf(buff, "%f %f\r\n", volt_x, volt_y);
057F C004      1748            push    ar4
0581 C005      1749            push    ar5
0583 C006      1750            push    ar6
0585 C007      1751            push    ar7
0587 C0E0      1752            push    _main_volt_x_1_123
0589 C0E1      1753            push    (_main_volt_x_1_123 + 1)
058B C0E2      1754            push    (_main_volt_x_1_123 + 2)
058D C0E3      1755            push    (_main_volt_x_1_123 + 3)
058F 7400      1756            mov     a,#__str_12
0591 C0E0      1757            push    acc
0593 74CA      1758            mov     a,#(__str_12 >> 8)
0595 C0E0      1759            push    acc
0597 7480      1760            mov     a,#0x80
0599 C0E0      1761            push    acc
059B 74D0      1762            mov     a,#_buff
059D C0E0      1763            push    acc
059F 7418      1764            mov     a,#(_buff >> 8)
05A1 C0E0      1765            push    acc
05A3 7440      1766            mov     a,#0x40
05A5 C0E0      1767            push    acc
05A7 120000    1768            lcall   _sprintf
05AA E581      1769            mov     a,sp
05AC 24F2      1770            add     a,#0xf2
05AE F581      1771            mov     sp,a
05B0           1772   ;        EFM8_JDY40_test.c:508: sendstr1(buff);
05B0 9018D0    1773            mov     dptr,#_buff
05B3 75F040    1774            mov     b,#0x40
05B6 120000    1775            lcall   _sendstr1
05B9           1776   ;        EFM8_JDY40_test.c:509: waitms_or_RI1(200);
05B9 9000C8    1777            mov     dptr,#0x00C8
05BC 120000    1778            lcall   _waitms_or_RI1
05BF D003      1779            pop     ar3
05C1 D002      1780            pop     ar2
05C3           1781   ;        EFM8_JDY40_test.c:514: if(P3_7==0)
05C3 20B780    1782            jb      _P3_7,L028002?
05C6           1783   ;        EFM8_JDY40_test.c:516: sprintf(buff, "JDY40 test %d\r\n", cnt++);
05C6 8A04      1784            mov     ar4,r2
05C8 8B05      1785            mov     ar5,r3
05CA 0A        1786            inc     r2
05CB BA00C0    1787            cjne    r2,#0x00,L028018?
05CE 0B        1788            inc     r3
05CF           1789   L028018?:
05CF C002      1790            push    ar2
05D1 C003      1791            push    ar3
05D3 C004      1792            push    ar4
05D5 C005      1793            push    ar5
05D7 7400      1794            mov     a,#__str_13
05D9 C0E0      1795            push    acc
05DB 74CB      1796            mov     a,#(__str_13 >> 8)
05DD C0E0      1797            push    acc
05DF 7480      1798            mov     a,#0x80
05E1 C0E0      1799            push    acc
05E3 74D0      1800            mov     a,#_buff
05E5 C0E0      1801            push    acc
05E7 7418      1802            mov     a,#(_buff >> 8)
05E9 C0E0      1803            push    acc
05EB 7440      1804            mov     a,#0x40
05ED C0E0      1805            push    acc
05EF 120000    1806            lcall   _sprintf
05F2 E581      1807            mov     a,sp
05F4 24F8      1808            add     a,#0xf8
05F6 F581      1809            mov     sp,a
05F8           1810   ;        EFM8_JDY40_test.c:517: sendstr1(buff);
05F8 9018D0    1811            mov     dptr,#_buff
05FB 75F040    1812            mov     b,#0x40
05FE 120000    1813            lcall   _sendstr1
0601           1814   ;        EFM8_JDY40_test.c:518: putchar('.');
0601 75822E    1815            mov     dpl,#0x2E
0604 120000    1816            lcall   _putchar
0607           1817   ;        EFM8_JDY40_test.c:519: waitms_or_RI1(200);
0607 9000C8    1818            mov     dptr,#0x00C8
060A 120000    1819            lcall   _waitms_or_RI1
060D D003      1820            pop     ar3
060F D002      1821            pop     ar2
0611           1822   L028002?:
0611           1823   ;        EFM8_JDY40_test.c:522: if(RXU1())
0611 C002      1824            push    ar2
0613 C003      1825            push    ar3
0615 120000    1826            lcall   _RXU1
0618 D003      1827            pop     ar3
061A D002      1828            pop     ar2
061C 4000      1829            jc      L028019?
061E 020000    1830            ljmp    L028008?
0621           1831   L028019?:
0621           1832   ;        EFM8_JDY40_test.c:525: getstr1(buff);
0621 9018D0    1833            mov     dptr,#_buff
0624 75F040    1834            mov     b,#0x40
0627 C002      1835            push    ar2
0629 C003      1836            push    ar3
062B 120000    1837            lcall   _getstr1
062E           1838   ;        EFM8_JDY40_test.c:527: frequency = atof(buff); // change string -> float 
062E 9018D0    1839            mov     dptr,#_buff
0631 75F040    1840            mov     b,#0x40
0634 120000    1841            lcall   _atof
0637 AC82      1842            mov     r4,dpl
0639 AD83      1843            mov     r5,dph
063B AEF0      1844            mov     r6,b
063D FF        1845            mov     r7,a
063E           1846   ;        EFM8_JDY40_test.c:528: printf("Freq: %.2f\r\n", frequency);
063E C004      1847            push    ar4
0640 C005      1848            push    ar5
0642 C006      1849            push    ar6
0644 C007      1850            push    ar7
0646 C004      1851            push    ar4
0648 C005      1852            push    ar5
064A C006      1853            push    ar6
064C C007      1854            push    ar7
064E 7400      1855            mov     a,#__str_14
0650 C0E0      1856            push    acc
0652 74CC      1857            mov     a,#(__str_14 >> 8)
0654 C0E0      1858            push    acc
0656 7480      1859            mov     a,#0x80
0658 C0E0      1860            push    acc
065A 120000    1861            lcall   _printf
065D E581      1862            mov     a,sp
065F 24F9      1863            add     a,#0xf9
0661 F581      1864            mov     sp,a
0663 D007      1865            pop     ar7
0665 D006      1866            pop     ar6
0667 D005      1867            pop     ar5
0669 D004      1868            pop     ar4
066B           1869   ;        EFM8_JDY40_test.c:530: sprintf(buff1,"Stength: %.1f",frequency);
066B C004      1870            push    ar4
066D C005      1871            push    ar5
066F C006      1872            push    ar6
0671 C007      1873            push    ar7
0673 C004      1874            push    ar4
0675 C005      1875            push    ar5
0677 C006      1876            push    ar6
0679 C007      1877            push    ar7
067B 7440      1878            mov     a,#__str_15
067D C0E0      1879            push    acc
067F 74CC      1880            mov     a,#(__str_15 >> 8)
0681 C0E0      1881            push    acc
0683 7480      1882            mov     a,#0x80
0685 C0E0      1883            push    acc
0687 7430      1884            mov     a,#_main_buff1_1_123
0689 C0E0      1885            push    acc
068B 74B8      1886            mov     a,#(_main_buff1_1_123 >> 8)
068D C0E0      1887            push    acc
068F 7440      1888            mov     a,#0x40
0691 C0E0      1889            push    acc
0693 120000    1890            lcall   _sprintf
0696 E581      1891            mov     a,sp
0698 24F6      1892            add     a,#0xf6
069A F581      1893            mov     sp,a
069C           1894   ;        EFM8_JDY40_test.c:531: LCDprint(buff1,1,1);
069C 752001    1895            mov     _LCDprint_PARM_2,#0x01
069F D290      1896            setb    _LCDprint_PARM_3
06A1 90B830    1897            mov     dptr,#_main_buff1_1_123
06A4 75F040    1898            mov     b,#0x40
06A7 120000    1899            lcall   _LCDprint
06AA D007      1900            pop     ar7
06AC D006      1901            pop     ar6
06AE D005      1902            pop     ar5
06B0 D004      1903            pop     ar4
06B2           1904   ;        EFM8_JDY40_test.c:533: if(frequency >= 2500){ //2500 is just a radom number we pick for now
06B2 E4        1905            clr     a
06B3 C0E0      1906            push    acc
06B5 7440      1907            mov     a,#0x40
06B7 C0E0      1908            push    acc
06B9 741C      1909            mov     a,#0x1C
06BB C0E0      1910            push    acc
06BD 7445      1911            mov     a,#0x45
06BF C0E0      1912            push    acc
06C1 8C82      1913            mov     dpl,r4
06C3 8D83      1914            mov     dph,r5
06C5 8EF0      1915            mov     b,r6
06C7 EF        1916            mov     a,r7
06C8 120000    1917            lcall   ___fslt
06CB AC82      1918            mov     r4,dpl
06CD E581      1919            mov     a,sp
06CF 24FC      1920            add     a,#0xfc
06D1 F581      1921            mov     sp,a
06D3 D003      1922            pop     ar3
06D5 D002      1923            pop     ar2
06D7 EC        1924            mov     a,r4
06D8 6000      1925            jz      L028020?
06DA 020000    1926            ljmp    L028008?
06DD           1927   L028020?:
06DD           1928   ;        EFM8_JDY40_test.c:534: return;
06DD 22        1929            ret
06DE           1930            rseg R_CSEG
06DE           1931   
0000           1932            rseg R_XINIT
0000           1933   
0000           1934            rseg R_CONST
0000           1935   __str_0:
0000 436F6D6D  1936            db 'Command: %s'
     616E643A
     202573
000B 00        1937            db 0x00
000C           1938   __str_1:
000C 52657370  1939            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1940            db 0x0D
0019 0A        1941            db 0x0A
001A 00        1942            db 0x00
001B           1943   __str_2:
001B 0D        1944            db 0x0D
001C 0A        1945            db 0x0A
001D 4A44592D  1946            db 'JDY-40 test'
     34302074
     657374
0028 0D        1947            db 0x0D
0029 0A        1948            db 0x0A
002A 00        1949            db 0x00
002B           1950   __str_3:
002B 41542B44  1951            db 'AT+DVID9944'
     56494439
     393434
0036 0D        1952            db 0x0D
0037 0A        1953            db 0x0A
0038 00        1954            db 0x00
0039           1955   __str_4:
0039 41542B56  1956            db 'AT+VER'
     4552
003F 0D        1957            db 0x0D
0040 0A        1958            db 0x0A
0041 00        1959            db 0x00
0042           1960   __str_5:
0042 41542B42  1961            db 'AT+BAUD'
     415544
0049 0D        1962            db 0x0D
004A 0A        1963            db 0x0A
004B 00        1964            db 0x00
004C           1965   __str_6:
004C 41542B52  1966            db 'AT+RFID'
     464944
0053 0D        1967            db 0x0D
0054 0A        1968            db 0x0A
0055 00        1969            db 0x00
0056           1970   __str_7:
0056 41542B44  1971            db 'AT+DVID'
     564944
005D 0D        1972            db 0x0D
005E 0A        1973            db 0x0A
005F 00        1974            db 0x00
0060           1975   __str_8:
0060 41542B52  1976            db 'AT+RFC'
     4643
0066 0D        1977            db 0x0D
0067 0A        1978            db 0x0A
0068 00        1979            db 0x00
0069           1980   __str_9:
0069 41542B50  1981            db 'AT+POWE'
     4F5745
0070 0D        1982            db 0x0D
0071 0A        1983            db 0x0A
0072 00        1984            db 0x00
0073           1985   __str_10:
0073 41542B43  1986            db 'AT+CLSS'
     4C5353
007A 0D        1987            db 0x0D
007B 0A        1988            db 0x0A
007C 00        1989            db 0x00
007D           1990   __str_11:
007D 0D        1991            db 0x0D
007E 0A        1992            db 0x0A
007F 50726573  1993            db 'Press and hold the BOOT button to transmit.'
     7320616E
     6420686F
     6C642074
     68652042
     4F4F5420
     62757474
     6F6E2074
     6F207472
     616E736D
     69742E
00AA 0D        1994            db 0x0D
00AB 0A        1995            db 0x0A
00AC 00        1996            db 0x00
00AD           1997   __str_12:
00AD 25662025  1998            db '%f %f'
     66
00B2 0D        1999            db 0x0D
00B3 0A        2000            db 0x0A
00B4 00        2001            db 0x00
00B5           2002   __str_13:
00B5 4A445934  2003            db 'JDY40 test %d'
     30207465
     73742025
     64
00C2 0D        2004            db 0x0D
00C3 0A        2005            db 0x0A
00C4 00        2006            db 0x00
00C5           2007   __str_14:
00C5 46726571  2008            db 'Freq: %.2f'
     3A20252E
     3266
00CF 0D        2009            db 0x0D
00D0 0A        2010            db 0x0A
00D1 00        2011            db 0x00
00D2           2012   __str_15:
00D2 5374656E  2013            db 'Stength: %.1f'
     6774683A
     20252E31
     66
00DF 00        2014            db 0x00
00E0           2015   
0003           2016            CSEG
0003           2017   
0003           2018   end
