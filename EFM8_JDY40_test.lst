0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Tue Mar 19 10:16:31 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _LCDprint
0000             30            public _LCD_4BIT
0000             31            public _WriteCommand
0000             32            public _WriteData
0000             33            public _LCD_byte
0000             34            public _LCD_pulse
0000             35            public _SendATCommand
0000             36            public _waitms_or_RI1
0000             37            public _RXU1
0000             38            public _getstr1
0000             39            public _getchar1_with_timeout
0000             40            public _getchar1
0000             41            public _sendstr1
0000             42            public _putchar1
0000             43            public _UART1_Init
0000             44            public _Volts_at_Pin
0000             45            public _Get_ADC
0000             46            public _ADC_at_Pin
0000             47            public _InitPinADC
0000             48            public _waitms
0000             49            public _TIMER0_Init
0000             50            public _Timer3us
0000             51            public _InitADC
0000             52            public __c51_external_startup
0000             53            public _LCDprint_PARM_3
0000             54            public _buff
0000             55            public _LCDprint_PARM_2
0000             56   ;--------------------------------------------------------
0000             57   ; Special Function Registers
0000             58   ;--------------------------------------------------------
0000             59   _ACC            DATA 0xe0
0000             60   _ADC0ASAH       DATA 0xb6
0000             61   _ADC0ASAL       DATA 0xb5
0000             62   _ADC0ASCF       DATA 0xa1
0000             63   _ADC0ASCT       DATA 0xc7
0000             64   _ADC0CF0        DATA 0xbc
0000             65   _ADC0CF1        DATA 0xb9
0000             66   _ADC0CF2        DATA 0xdf
0000             67   _ADC0CN0        DATA 0xe8
0000             68   _ADC0CN1        DATA 0xb2
0000             69   _ADC0CN2        DATA 0xb3
0000             70   _ADC0GTH        DATA 0xc4
0000             71   _ADC0GTL        DATA 0xc3
0000             72   _ADC0H          DATA 0xbe
0000             73   _ADC0L          DATA 0xbd
0000             74   _ADC0LTH        DATA 0xc6
0000             75   _ADC0LTL        DATA 0xc5
0000             76   _ADC0MX         DATA 0xbb
0000             77   _B              DATA 0xf0
0000             78   _CKCON0         DATA 0x8e
0000             79   _CKCON1         DATA 0xa6
0000             80   _CLEN0          DATA 0xc6
0000             81   _CLIE0          DATA 0xc7
0000             82   _CLIF0          DATA 0xe8
0000             83   _CLKSEL         DATA 0xa9
0000             84   _CLOUT0         DATA 0xd1
0000             85   _CLU0CF         DATA 0xb1
0000             86   _CLU0FN         DATA 0xaf
0000             87   _CLU0MX         DATA 0x84
0000             88   _CLU1CF         DATA 0xb3
0000             89   _CLU1FN         DATA 0xb2
0000             90   _CLU1MX         DATA 0x85
0000             91   _CLU2CF         DATA 0xb6
0000             92   _CLU2FN         DATA 0xb5
0000             93   _CLU2MX         DATA 0x91
0000             94   _CLU3CF         DATA 0xbf
0000             95   _CLU3FN         DATA 0xbe
0000             96   _CLU3MX         DATA 0xae
0000             97   _CMP0CN0        DATA 0x9b
0000             98   _CMP0CN1        DATA 0x99
0000             99   _CMP0MD         DATA 0x9d
0000            100   _CMP0MX         DATA 0x9f
0000            101   _CMP1CN0        DATA 0xbf
0000            102   _CMP1CN1        DATA 0xac
0000            103   _CMP1MD         DATA 0xab
0000            104   _CMP1MX         DATA 0xaa
0000            105   _CRC0CN0        DATA 0xce
0000            106   _CRC0CN1        DATA 0x86
0000            107   _CRC0CNT        DATA 0xd3
0000            108   _CRC0DAT        DATA 0xcb
0000            109   _CRC0FLIP       DATA 0xcf
0000            110   _CRC0IN         DATA 0xca
0000            111   _CRC0ST         DATA 0xd2
0000            112   _DAC0CF0        DATA 0x91
0000            113   _DAC0CF1        DATA 0x92
0000            114   _DAC0H          DATA 0x85
0000            115   _DAC0L          DATA 0x84
0000            116   _DAC1CF0        DATA 0x93
0000            117   _DAC1CF1        DATA 0x94
0000            118   _DAC1H          DATA 0x8a
0000            119   _DAC1L          DATA 0x89
0000            120   _DAC2CF0        DATA 0x95
0000            121   _DAC2CF1        DATA 0x96
0000            122   _DAC2H          DATA 0x8c
0000            123   _DAC2L          DATA 0x8b
0000            124   _DAC3CF0        DATA 0x9a
0000            125   _DAC3CF1        DATA 0x9c
0000            126   _DAC3H          DATA 0x8e
0000            127   _DAC3L          DATA 0x8d
0000            128   _DACGCF0        DATA 0x88
0000            129   _DACGCF1        DATA 0x98
0000            130   _DACGCF2        DATA 0xa2
0000            131   _DERIVID        DATA 0xad
0000            132   _DEVICEID       DATA 0xb5
0000            133   _DPH            DATA 0x83
0000            134   _DPL            DATA 0x82
0000            135   _EIE1           DATA 0xe6
0000            136   _EIE2           DATA 0xf3
0000            137   _EIP1           DATA 0xbb
0000            138   _EIP1H          DATA 0xee
0000            139   _EIP2           DATA 0xed
0000            140   _EIP2H          DATA 0xf6
0000            141   _EMI0CN         DATA 0xe7
0000            142   _FLKEY          DATA 0xb7
0000            143   _HFO0CAL        DATA 0xc7
0000            144   _HFO1CAL        DATA 0xd6
0000            145   _HFOCN          DATA 0xef
0000            146   _I2C0ADM        DATA 0xff
0000            147   _I2C0CN0        DATA 0xba
0000            148   _I2C0DIN        DATA 0xbc
0000            149   _I2C0DOUT       DATA 0xbb
0000            150   _I2C0FCN0       DATA 0xad
0000            151   _I2C0FCN1       DATA 0xab
0000            152   _I2C0FCT        DATA 0xf5
0000            153   _I2C0SLAD       DATA 0xbd
0000            154   _I2C0STAT       DATA 0xb9
0000            155   _IE             DATA 0xa8
0000            156   _IP             DATA 0xb8
0000            157   _IPH            DATA 0xf2
0000            158   _IT01CF         DATA 0xe4
0000            159   _LFO0CN         DATA 0xb1
0000            160   _P0             DATA 0x80
0000            161   _P0MASK         DATA 0xfe
0000            162   _P0MAT          DATA 0xfd
0000            163   _P0MDIN         DATA 0xf1
0000            164   _P0MDOUT        DATA 0xa4
0000            165   _P0SKIP         DATA 0xd4
0000            166   _P1             DATA 0x90
0000            167   _P1MASK         DATA 0xee
0000            168   _P1MAT          DATA 0xed
0000            169   _P1MDIN         DATA 0xf2
0000            170   _P1MDOUT        DATA 0xa5
0000            171   _P1SKIP         DATA 0xd5
0000            172   _P2             DATA 0xa0
0000            173   _P2MASK         DATA 0xfc
0000            174   _P2MAT          DATA 0xfb
0000            175   _P2MDIN         DATA 0xf3
0000            176   _P2MDOUT        DATA 0xa6
0000            177   _P2SKIP         DATA 0xcc
0000            178   _P3             DATA 0xb0
0000            179   _P3MDIN         DATA 0xf4
0000            180   _P3MDOUT        DATA 0x9c
0000            181   _PCA0CENT       DATA 0x9e
0000            182   _PCA0CLR        DATA 0x9c
0000            183   _PCA0CN0        DATA 0xd8
0000            184   _PCA0CPH0       DATA 0xfc
0000            185   _PCA0CPH1       DATA 0xea
0000            186   _PCA0CPH2       DATA 0xec
0000            187   _PCA0CPH3       DATA 0xf5
0000            188   _PCA0CPH4       DATA 0x85
0000            189   _PCA0CPH5       DATA 0xde
0000            190   _PCA0CPL0       DATA 0xfb
0000            191   _PCA0CPL1       DATA 0xe9
0000            192   _PCA0CPL2       DATA 0xeb
0000            193   _PCA0CPL3       DATA 0xf4
0000            194   _PCA0CPL4       DATA 0x84
0000            195   _PCA0CPL5       DATA 0xdd
0000            196   _PCA0CPM0       DATA 0xda
0000            197   _PCA0CPM1       DATA 0xdb
0000            198   _PCA0CPM2       DATA 0xdc
0000            199   _PCA0CPM3       DATA 0xae
0000            200   _PCA0CPM4       DATA 0xaf
0000            201   _PCA0CPM5       DATA 0xcc
0000            202   _PCA0H          DATA 0xfa
0000            203   _PCA0L          DATA 0xf9
0000            204   _PCA0MD         DATA 0xd9
0000            205   _PCA0POL        DATA 0x96
0000            206   _PCA0PWM        DATA 0xf7
0000            207   _PCON0          DATA 0x87
0000            208   _PCON1          DATA 0xcd
0000            209   _PFE0CN         DATA 0xc1
0000            210   _PRTDRV         DATA 0xf6
0000            211   _PSCTL          DATA 0x8f
0000            212   _PSTAT0         DATA 0xaa
0000            213   _PSW            DATA 0xd0
0000            214   _REF0CN         DATA 0xd1
0000            215   _REG0CN         DATA 0xc9
0000            216   _REVID          DATA 0xb6
0000            217   _RSTSRC         DATA 0xef
0000            218   _SBCON1         DATA 0x94
0000            219   _SBRLH1         DATA 0x96
0000            220   _SBRLL1         DATA 0x95
0000            221   _SBUF           DATA 0x99
0000            222   _SBUF0          DATA 0x99
0000            223   _SBUF1          DATA 0x92
0000            224   _SCON           DATA 0x98
0000            225   _SCON0          DATA 0x98
0000            226   _SCON1          DATA 0xc8
0000            227   _SFRPAGE        DATA 0xa7
0000            228   _SFRPGCN        DATA 0xbc
0000            229   _SFRSTACK       DATA 0xd7
0000            230   _SMB0ADM        DATA 0xd6
0000            231   _SMB0ADR        DATA 0xd7
0000            232   _SMB0CF         DATA 0xc1
0000            233   _SMB0CN0        DATA 0xc0
0000            234   _SMB0DAT        DATA 0xc2
0000            235   _SMB0FCN0       DATA 0xc3
0000            236   _SMB0FCN1       DATA 0xc4
0000            237   _SMB0FCT        DATA 0xef
0000            238   _SMB0RXLN       DATA 0xc5
0000            239   _SMB0TC         DATA 0xac
0000            240   _SMOD1          DATA 0x93
0000            241   _SP             DATA 0x81
0000            242   _SPI0CFG        DATA 0xa1
0000            243   _SPI0CKR        DATA 0xa2
0000            244   _SPI0CN0        DATA 0xf8
0000            245   _SPI0DAT        DATA 0xa3
0000            246   _SPI0FCN0       DATA 0x9a
0000            247   _SPI0FCN1       DATA 0x9b
0000            248   _SPI0FCT        DATA 0xf7
0000            249   _SPI0PCF        DATA 0xdf
0000            250   _TCON           DATA 0x88
0000            251   _TH0            DATA 0x8c
0000            252   _TH1            DATA 0x8d
0000            253   _TL0            DATA 0x8a
0000            254   _TL1            DATA 0x8b
0000            255   _TMOD           DATA 0x89
0000            256   _TMR2CN0        DATA 0xc8
0000            257   _TMR2CN1        DATA 0xfd
0000            258   _TMR2H          DATA 0xcf
0000            259   _TMR2L          DATA 0xce
0000            260   _TMR2RLH        DATA 0xcb
0000            261   _TMR2RLL        DATA 0xca
0000            262   _TMR3CN0        DATA 0x91
0000            263   _TMR3CN1        DATA 0xfe
0000            264   _TMR3H          DATA 0x95
0000            265   _TMR3L          DATA 0x94
0000            266   _TMR3RLH        DATA 0x93
0000            267   _TMR3RLL        DATA 0x92
0000            268   _TMR4CN0        DATA 0x98
0000            269   _TMR4CN1        DATA 0xff
0000            270   _TMR4H          DATA 0xa5
0000            271   _TMR4L          DATA 0xa4
0000            272   _TMR4RLH        DATA 0xa3
0000            273   _TMR4RLL        DATA 0xa2
0000            274   _TMR5CN0        DATA 0xc0
0000            275   _TMR5CN1        DATA 0xf1
0000            276   _TMR5H          DATA 0xd5
0000            277   _TMR5L          DATA 0xd4
0000            278   _TMR5RLH        DATA 0xd3
0000            279   _TMR5RLL        DATA 0xd2
0000            280   _UART0PCF       DATA 0xd9
0000            281   _UART1FCN0      DATA 0x9d
0000            282   _UART1FCN1      DATA 0xd8
0000            283   _UART1FCT       DATA 0xfa
0000            284   _UART1LIN       DATA 0x9e
0000            285   _UART1PCF       DATA 0xda
0000            286   _VDM0CN         DATA 0xff
0000            287   _WDTCN          DATA 0x97
0000            288   _XBR0           DATA 0xe1
0000            289   _XBR1           DATA 0xe2
0000            290   _XBR2           DATA 0xe3
0000            291   _XOSC0CN        DATA 0x86
0000            292   _DPTR           DATA 0x8382
0000            293   _TMR2RL         DATA 0xcbca
0000            294   _TMR3RL         DATA 0x9392
0000            295   _TMR4RL         DATA 0xa3a2
0000            296   _TMR5RL         DATA 0xd3d2
0000            297   _TMR0           DATA 0x8c8a
0000            298   _TMR1           DATA 0x8d8b
0000            299   _TMR2           DATA 0xcfce
0000            300   _TMR3           DATA 0x9594
0000            301   _TMR4           DATA 0xa5a4
0000            302   _TMR5           DATA 0xd5d4
0000            303   _SBRL1          DATA 0x9695
0000            304   _PCA0           DATA 0xfaf9
0000            305   _PCA0CP0        DATA 0xfcfb
0000            306   _PCA0CP1        DATA 0xeae9
0000            307   _PCA0CP2        DATA 0xeceb
0000            308   _PCA0CP3        DATA 0xf5f4
0000            309   _PCA0CP4        DATA 0x8584
0000            310   _PCA0CP5        DATA 0xdedd
0000            311   _ADC0ASA        DATA 0xb6b5
0000            312   _ADC0GT         DATA 0xc4c3
0000            313   _ADC0           DATA 0xbebd
0000            314   _ADC0LT         DATA 0xc6c5
0000            315   _DAC0           DATA 0x8584
0000            316   _DAC1           DATA 0x8a89
0000            317   _DAC2           DATA 0x8c8b
0000            318   _DAC3           DATA 0x8e8d
0000            319   ;--------------------------------------------------------
0000            320   ; special function bits
0000            321   ;--------------------------------------------------------
0000            322   _ACC_0          BIT 0xe0
0000            323   _ACC_1          BIT 0xe1
0000            324   _ACC_2          BIT 0xe2
0000            325   _ACC_3          BIT 0xe3
0000            326   _ACC_4          BIT 0xe4
0000            327   _ACC_5          BIT 0xe5
0000            328   _ACC_6          BIT 0xe6
0000            329   _ACC_7          BIT 0xe7
0000            330   _TEMPE          BIT 0xe8
0000            331   _ADGN0          BIT 0xe9
0000            332   _ADGN1          BIT 0xea
0000            333   _ADWINT         BIT 0xeb
0000            334   _ADBUSY         BIT 0xec
0000            335   _ADINT          BIT 0xed
0000            336   _IPOEN          BIT 0xee
0000            337   _ADEN           BIT 0xef
0000            338   _B_0            BIT 0xf0
0000            339   _B_1            BIT 0xf1
0000            340   _B_2            BIT 0xf2
0000            341   _B_3            BIT 0xf3
0000            342   _B_4            BIT 0xf4
0000            343   _B_5            BIT 0xf5
0000            344   _B_6            BIT 0xf6
0000            345   _B_7            BIT 0xf7
0000            346   _C0FIF          BIT 0xe8
0000            347   _C0RIF          BIT 0xe9
0000            348   _C1FIF          BIT 0xea
0000            349   _C1RIF          BIT 0xeb
0000            350   _C2FIF          BIT 0xec
0000            351   _C2RIF          BIT 0xed
0000            352   _C3FIF          BIT 0xee
0000            353   _C3RIF          BIT 0xef
0000            354   _D1SRC0         BIT 0x88
0000            355   _D1SRC1         BIT 0x89
0000            356   _D1AMEN         BIT 0x8a
0000            357   _D01REFSL       BIT 0x8b
0000            358   _D3SRC0         BIT 0x8c
0000            359   _D3SRC1         BIT 0x8d
0000            360   _D3AMEN         BIT 0x8e
0000            361   _D23REFSL       BIT 0x8f
0000            362   _D0UDIS         BIT 0x98
0000            363   _D1UDIS         BIT 0x99
0000            364   _D2UDIS         BIT 0x9a
0000            365   _D3UDIS         BIT 0x9b
0000            366   _EX0            BIT 0xa8
0000            367   _ET0            BIT 0xa9
0000            368   _EX1            BIT 0xaa
0000            369   _ET1            BIT 0xab
0000            370   _ES0            BIT 0xac
0000            371   _ET2            BIT 0xad
0000            372   _ESPI0          BIT 0xae
0000            373   _EA             BIT 0xaf
0000            374   _PX0            BIT 0xb8
0000            375   _PT0            BIT 0xb9
0000            376   _PX1            BIT 0xba
0000            377   _PT1            BIT 0xbb
0000            378   _PS0            BIT 0xbc
0000            379   _PT2            BIT 0xbd
0000            380   _PSPI0          BIT 0xbe
0000            381   _P0_0           BIT 0x80
0000            382   _P0_1           BIT 0x81
0000            383   _P0_2           BIT 0x82
0000            384   _P0_3           BIT 0x83
0000            385   _P0_4           BIT 0x84
0000            386   _P0_5           BIT 0x85
0000            387   _P0_6           BIT 0x86
0000            388   _P0_7           BIT 0x87
0000            389   _P1_0           BIT 0x90
0000            390   _P1_1           BIT 0x91
0000            391   _P1_2           BIT 0x92
0000            392   _P1_3           BIT 0x93
0000            393   _P1_4           BIT 0x94
0000            394   _P1_5           BIT 0x95
0000            395   _P1_6           BIT 0x96
0000            396   _P1_7           BIT 0x97
0000            397   _P2_0           BIT 0xa0
0000            398   _P2_1           BIT 0xa1
0000            399   _P2_2           BIT 0xa2
0000            400   _P2_3           BIT 0xa3
0000            401   _P2_4           BIT 0xa4
0000            402   _P2_5           BIT 0xa5
0000            403   _P2_6           BIT 0xa6
0000            404   _P3_0           BIT 0xb0
0000            405   _P3_1           BIT 0xb1
0000            406   _P3_2           BIT 0xb2
0000            407   _P3_3           BIT 0xb3
0000            408   _P3_4           BIT 0xb4
0000            409   _P3_7           BIT 0xb7
0000            410   _CCF0           BIT 0xd8
0000            411   _CCF1           BIT 0xd9
0000            412   _CCF2           BIT 0xda
0000            413   _CCF3           BIT 0xdb
0000            414   _CCF4           BIT 0xdc
0000            415   _CCF5           BIT 0xdd
0000            416   _CR             BIT 0xde
0000            417   _CF             BIT 0xdf
0000            418   _PARITY         BIT 0xd0
0000            419   _F1             BIT 0xd1
0000            420   _OV             BIT 0xd2
0000            421   _RS0            BIT 0xd3
0000            422   _RS1            BIT 0xd4
0000            423   _F0             BIT 0xd5
0000            424   _AC             BIT 0xd6
0000            425   _CY             BIT 0xd7
0000            426   _RI             BIT 0x98
0000            427   _TI             BIT 0x99
0000            428   _RB8            BIT 0x9a
0000            429   _TB8            BIT 0x9b
0000            430   _REN            BIT 0x9c
0000            431   _CE             BIT 0x9d
0000            432   _SMODE          BIT 0x9e
0000            433   _RI1            BIT 0xc8
0000            434   _TI1            BIT 0xc9
0000            435   _RBX1           BIT 0xca
0000            436   _TBX1           BIT 0xcb
0000            437   _REN1           BIT 0xcc
0000            438   _PERR1          BIT 0xcd
0000            439   _OVR1           BIT 0xce
0000            440   _SI             BIT 0xc0
0000            441   _ACK            BIT 0xc1
0000            442   _ARBLOST        BIT 0xc2
0000            443   _ACKRQ          BIT 0xc3
0000            444   _STO            BIT 0xc4
0000            445   _STA            BIT 0xc5
0000            446   _TXMODE         BIT 0xc6
0000            447   _MASTER         BIT 0xc7
0000            448   _SPIEN          BIT 0xf8
0000            449   _TXNF           BIT 0xf9
0000            450   _NSSMD0         BIT 0xfa
0000            451   _NSSMD1         BIT 0xfb
0000            452   _RXOVRN         BIT 0xfc
0000            453   _MODF           BIT 0xfd
0000            454   _WCOL           BIT 0xfe
0000            455   _SPIF           BIT 0xff
0000            456   _IT0            BIT 0x88
0000            457   _IE0            BIT 0x89
0000            458   _IT1            BIT 0x8a
0000            459   _IE1            BIT 0x8b
0000            460   _TR0            BIT 0x8c
0000            461   _TF0            BIT 0x8d
0000            462   _TR1            BIT 0x8e
0000            463   _TF1            BIT 0x8f
0000            464   _T2XCLK0        BIT 0xc8
0000            465   _T2XCLK1        BIT 0xc9
0000            466   _TR2            BIT 0xca
0000            467   _T2SPLIT        BIT 0xcb
0000            468   _TF2CEN         BIT 0xcc
0000            469   _TF2LEN         BIT 0xcd
0000            470   _TF2L           BIT 0xce
0000            471   _TF2H           BIT 0xcf
0000            472   _T4XCLK0        BIT 0x98
0000            473   _T4XCLK1        BIT 0x99
0000            474   _TR4            BIT 0x9a
0000            475   _T4SPLIT        BIT 0x9b
0000            476   _TF4CEN         BIT 0x9c
0000            477   _TF4LEN         BIT 0x9d
0000            478   _TF4L           BIT 0x9e
0000            479   _TF4H           BIT 0x9f
0000            480   _T5XCLK0        BIT 0xc0
0000            481   _T5XCLK1        BIT 0xc1
0000            482   _TR5            BIT 0xc2
0000            483   _T5SPLIT        BIT 0xc3
0000            484   _TF5CEN         BIT 0xc4
0000            485   _TF5LEN         BIT 0xc5
0000            486   _TF5L           BIT 0xc6
0000            487   _TF5H           BIT 0xc7
0000            488   _RIE            BIT 0xd8
0000            489   _RXTO0          BIT 0xd9
0000            490   _RXTO1          BIT 0xda
0000            491   _RFRQ           BIT 0xdb
0000            492   _TIE            BIT 0xdc
0000            493   _TXHOLD         BIT 0xdd
0000            494   _TXNF1          BIT 0xde
0000            495   _TFRQ           BIT 0xdf
0000            496   ;--------------------------------------------------------
0000            497   ; overlayable register banks
0000            498   ;--------------------------------------------------------
0000            499            rbank0 segment data overlay
0000            500   ;--------------------------------------------------------
0000            501   ; internal ram data
0000            502   ;--------------------------------------------------------
0000            503            rseg R_DSEG
0000            504   _LCDprint_PARM_2:
0000            505            ds 1
0001            506   ;--------------------------------------------------------
0001            507   ; overlayable items in internal ram 
0001            508   ;--------------------------------------------------------
0000            509            rseg    R_OSEG
0000            510            rseg    R_OSEG
0000            511   _InitPinADC_PARM_2:
0000            512            ds 1
0001            513            rseg    R_OSEG
0001            514            rseg    R_OSEG
0001            515            rseg    R_OSEG
0001            516   ;--------------------------------------------------------
0001            517   ; indirectly addressable internal ram data
0001            518   ;--------------------------------------------------------
0000            519            rseg R_ISEG
0000            520   _buff:
0000            521            ds 20
0014            522   ;--------------------------------------------------------
0014            523   ; absolute internal ram data
0014            524   ;--------------------------------------------------------
0000            525            DSEG
0000            526   ;--------------------------------------------------------
0000            527   ; bit data
0000            528   ;--------------------------------------------------------
0000            529            rseg R_BSEG
0000            530   _LCDprint_PARM_3:
0000            531            DBIT    1
0001            532   ;--------------------------------------------------------
0001            533   ; paged external ram data
0001            534   ;--------------------------------------------------------
0000            535            rseg R_PSEG
0000            536   ;--------------------------------------------------------
0000            537   ; external ram data
0000            538   ;--------------------------------------------------------
0000            539            rseg R_XSEG
0000            540   ;--------------------------------------------------------
0000            541   ; absolute external ram data
0000            542   ;--------------------------------------------------------
0000            543            XSEG
0000            544   ;--------------------------------------------------------
0000            545   ; external initialized ram data
0000            546   ;--------------------------------------------------------
0000            547            rseg R_IXSEG
0000            548            rseg R_HOME
0000            549            rseg R_GSINIT
0000            550            rseg R_CSEG
0000            551   ;--------------------------------------------------------
0000            552   ; Reset entry point and interrupt vectors
0000            553   ;--------------------------------------------------------
0000            554            CSEG at 0x0000
0000 020000     555            ljmp    _crt0
0003            556   ;--------------------------------------------------------
0003            557   ; global & static initialisations
0003            558   ;--------------------------------------------------------
0000            559            rseg R_HOME
0000            560            rseg R_GSINIT
0000            561            rseg R_GSINIT
0000            562   ;--------------------------------------------------------
0000            563   ; data variables initialization
0000            564   ;--------------------------------------------------------
0000            565            rseg R_DINIT
0000            566            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            567   ;--------------------------------------------------------
0000            568   ; code
0000            569   ;--------------------------------------------------------
0000            570            rseg R_CSEG
0000            571   ;------------------------------------------------------------
0000            572   ;Allocation info for local variables in function '_c51_external_startup'
0000            573   ;------------------------------------------------------------
0000            574   ;------------------------------------------------------------
0000            575   ;        EFM8_JDY40_test.c:30: char _c51_external_startup (void)
0000            576   ;        -----------------------------------------
0000            577   ;         function _c51_external_startup
0000            578   ;        -----------------------------------------
0000            579   __c51_external_startup:
0000            580            using   0
0000            581   ;        EFM8_JDY40_test.c:33: SFRPAGE = 0x00;
0000 75A700     582            mov     _SFRPAGE,#0x00
0003            583   ;        EFM8_JDY40_test.c:34: WDTCN = 0xDE; //First key
0003 7597DE     584            mov     _WDTCN,#0xDE
0006            585   ;        EFM8_JDY40_test.c:35: WDTCN = 0xAD; //Second key
0006 7597AD     586            mov     _WDTCN,#0xAD
0009            587   ;        EFM8_JDY40_test.c:37: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     588            mov     _VDM0CN,#0x80
000C            589   ;        EFM8_JDY40_test.c:38: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     590            mov     _RSTSRC,#0x06
000F            591   ;        EFM8_JDY40_test.c:45: SFRPAGE = 0x10;
000F 75A710     592            mov     _SFRPAGE,#0x10
0012            593   ;        EFM8_JDY40_test.c:46: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     594            mov     _PFE0CN,#0x20
0015            595   ;        EFM8_JDY40_test.c:47: SFRPAGE = 0x00;
0015 75A700     596            mov     _SFRPAGE,#0x00
0018            597   ;        EFM8_JDY40_test.c:68: CLKSEL = 0x00;
0018 75A900     598            mov     _CLKSEL,#0x00
001B            599   ;        EFM8_JDY40_test.c:69: CLKSEL = 0x00;
001B 75A900     600            mov     _CLKSEL,#0x00
001E            601   ;        EFM8_JDY40_test.c:70: while ((CLKSEL & 0x80) == 0);
001E            602   L002001?:
001E E5A9       603            mov     a,_CLKSEL
0020 30E790     604            jnb     acc.7,L002001?
0023            605   ;        EFM8_JDY40_test.c:71: CLKSEL = 0x03;
0023 75A903     606            mov     _CLKSEL,#0x03
0026            607   ;        EFM8_JDY40_test.c:72: CLKSEL = 0x03;
0026 75A903     608            mov     _CLKSEL,#0x03
0029            609   ;        EFM8_JDY40_test.c:73: while ((CLKSEL & 0x80) == 0);
0029            610   L002004?:
0029 E5A9       611            mov     a,_CLKSEL
002B 30E710     612            jnb     acc.7,L002004?
002E            613   ;        EFM8_JDY40_test.c:78: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     614            orl     _P0MDOUT,#0x11
0031            615   ;        EFM8_JDY40_test.c:79: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     616            orl     _P2MDOUT,#0x01
0034            617   ;        EFM8_JDY40_test.c:80: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     618            mov     _XBR0,#0x01
0037            619   ;        EFM8_JDY40_test.c:81: XBR1     = 0X00;
0037 75E200     620            mov     _XBR1,#0x00
003A            621   ;        EFM8_JDY40_test.c:82: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     622            mov     _XBR2,#0x41
003D            623   ;        EFM8_JDY40_test.c:88: SCON0 = 0x10;
003D 759810     624            mov     _SCON0,#0x10
0040            625   ;        EFM8_JDY40_test.c:89: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     626            mov     _TH1,#0xE6
0043            627   ;        EFM8_JDY40_test.c:90: TL1 = TH1;      // Init Timer1
0043 858D8B     628            mov     _TL1,_TH1
0046            629   ;        EFM8_JDY40_test.c:91: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     630            anl     _TMOD,#0x0F
0049            631   ;        EFM8_JDY40_test.c:92: TMOD |=  0x20;                       
0049 438920     632            orl     _TMOD,#0x20
004C            633   ;        EFM8_JDY40_test.c:93: TR1 = 1; // START Timer1
004C D28E       634            setb    _TR1
004E            635   ;        EFM8_JDY40_test.c:94: TI = 1;  // Indicate TX0 ready
004E D299       636            setb    _TI
0050            637   ;        EFM8_JDY40_test.c:96: return 0;
0050 758200     638            mov     dpl,#0x00
0053 22         639            ret
0054            640   ;------------------------------------------------------------
0054            641   ;Allocation info for local variables in function 'InitADC'
0054            642   ;------------------------------------------------------------
0054            643   ;------------------------------------------------------------
0054            644   ;        EFM8_JDY40_test.c:99: void InitADC (void)
0054            645   ;        -----------------------------------------
0054            646   ;         function InitADC
0054            647   ;        -----------------------------------------
0054            648   _InitADC:
0054            649   ;        EFM8_JDY40_test.c:101: SFRPAGE = 0x00;
0054 75A700     650            mov     _SFRPAGE,#0x00
0057            651   ;        EFM8_JDY40_test.c:102: ADEN=0; // Disable ADC
0057 C2EF       652            clr     _ADEN
0059            653   ;        EFM8_JDY40_test.c:107: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     654            mov     _ADC0CN1,#0x80
005C            655   ;        EFM8_JDY40_test.c:111: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     656            mov     _ADC0CF0,#0x20
005F            657   ;        EFM8_JDY40_test.c:115: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     658            mov     _ADC0CF1,#0x1E
0062            659   ;        EFM8_JDY40_test.c:124: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     660            mov     _ADC0CN0,#0x00
0065            661   ;        EFM8_JDY40_test.c:129: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     662            mov     _ADC0CF2,#0x3F
0068            663   ;        EFM8_JDY40_test.c:133: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     664            mov     _ADC0CN2,#0x00
006B            665   ;        EFM8_JDY40_test.c:135: ADEN=1; // Enable ADC
006B D2EF       666            setb    _ADEN
006D 22         667            ret
006E            668   ;------------------------------------------------------------
006E            669   ;Allocation info for local variables in function 'Timer3us'
006E            670   ;------------------------------------------------------------
006E            671   ;us                        Allocated to registers r2 
006E            672   ;i                         Allocated to registers r3 
006E            673   ;------------------------------------------------------------
006E            674   ;        EFM8_JDY40_test.c:140: void Timer3us(unsigned char us)
006E            675   ;        -----------------------------------------
006E            676   ;         function Timer3us
006E            677   ;        -----------------------------------------
006E            678   _Timer3us:
006E AA82       679            mov     r2,dpl
0070            680   ;        EFM8_JDY40_test.c:145: CKCON0|=0b_0100_0000;
0070 438E40     681            orl     _CKCON0,#0x40
0073            682   ;        EFM8_JDY40_test.c:147: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     683            mov     _TMR3RL,#0xB8
0076 7593FF     684            mov     (_TMR3RL >> 8),#0xFF
0079            685   ;        EFM8_JDY40_test.c:148: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     686            mov     _TMR3,_TMR3RL
007C 859395     687            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            688   ;        EFM8_JDY40_test.c:150: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     689            mov     _TMR3CN0,#0x04
0082            690   ;        EFM8_JDY40_test.c:151: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       691            mov     r3,#0x00
0084            692   L004004?:
0084 C3         693            clr     c
0085 EB         694            mov     a,r3
0086 9A         695            subb    a,r2
0087 5000       696            jnc     L004007?
0089            697   ;        EFM8_JDY40_test.c:153: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            698   L004001?:
0089 E591       699            mov     a,_TMR3CN0
008B 30E710     700            jnb     acc.7,L004001?
008E            701   ;        EFM8_JDY40_test.c:154: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     702            anl     _TMR3CN0,#0x7F
0091            703   ;        EFM8_JDY40_test.c:151: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         704            inc     r3
0092 8000       705            sjmp    L004004?
0094            706   L004007?:
0094            707   ;        EFM8_JDY40_test.c:156: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     708            mov     _TMR3CN0,#0x00
0097 22         709            ret
0098            710   ;------------------------------------------------------------
0098            711   ;Allocation info for local variables in function 'TIMER0_Init'
0098            712   ;------------------------------------------------------------
0098            713   ;------------------------------------------------------------
0098            714   ;        EFM8_JDY40_test.c:159: void TIMER0_Init(void)
0098            715   ;        -----------------------------------------
0098            716   ;         function TIMER0_Init
0098            717   ;        -----------------------------------------
0098            718   _TIMER0_Init:
0098            719   ;        EFM8_JDY40_test.c:161: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0098 5389F0     720            anl     _TMOD,#0xF0
009B            721   ;        EFM8_JDY40_test.c:162: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
009B 438901     722            orl     _TMOD,#0x01
009E            723   ;        EFM8_JDY40_test.c:163: TR0=0; // Stop Timer/Counter 0
009E C28C       724            clr     _TR0
00A0 22         725            ret
00A1            726   ;------------------------------------------------------------
00A1            727   ;Allocation info for local variables in function 'waitms'
00A1            728   ;------------------------------------------------------------
00A1            729   ;ms                        Allocated to registers r2 r3 
00A1            730   ;j                         Allocated to registers r4 r5 
00A1            731   ;k                         Allocated to registers r6 
00A1            732   ;------------------------------------------------------------
00A1            733   ;        EFM8_JDY40_test.c:166: void waitms (unsigned int ms)
00A1            734   ;        -----------------------------------------
00A1            735   ;         function waitms
00A1            736   ;        -----------------------------------------
00A1            737   _waitms:
00A1 AA82       738            mov     r2,dpl
00A3 AB83       739            mov     r3,dph
00A5            740   ;        EFM8_JDY40_test.c:170: for(j=0; j<ms; j++)
00A5 7C00       741            mov     r4,#0x00
00A7 7D00       742            mov     r5,#0x00
00A9            743   L006005?:
00A9 C3         744            clr     c
00AA EC         745            mov     a,r4
00AB 9A         746            subb    a,r2
00AC ED         747            mov     a,r5
00AD 9B         748            subb    a,r3
00AE 5000       749            jnc     L006009?
00B0            750   ;        EFM8_JDY40_test.c:171: for (k=0; k<4; k++) Timer3us(250);
00B0 7E00       751            mov     r6,#0x00
00B2            752   L006001?:
00B2 BE0450     753            cjne    r6,#0x04,L006018?
00B5            754   L006018?:
00B5 5000       755            jnc     L006007?
00B7 7582FA     756            mov     dpl,#0xFA
00BA C002       757            push    ar2
00BC C003       758            push    ar3
00BE C004       759            push    ar4
00C0 C005       760            push    ar5
00C2 C006       761            push    ar6
00C4 120000     762            lcall   _Timer3us
00C7 D006       763            pop     ar6
00C9 D005       764            pop     ar5
00CB D004       765            pop     ar4
00CD D003       766            pop     ar3
00CF D002       767            pop     ar2
00D1 0E         768            inc     r6
00D2 8000       769            sjmp    L006001?
00D4            770   L006007?:
00D4            771   ;        EFM8_JDY40_test.c:170: for(j=0; j<ms; j++)
00D4 0C         772            inc     r4
00D5 BC0090     773            cjne    r4,#0x00,L006005?
00D8 0D         774            inc     r5
00D9 8000       775            sjmp    L006005?
00DB            776   L006009?:
00DB 22         777            ret
00DC            778   ;------------------------------------------------------------
00DC            779   ;Allocation info for local variables in function 'InitPinADC'
00DC            780   ;------------------------------------------------------------
00DC            781   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00DC            782   ;portno                    Allocated to registers r2 
00DC            783   ;mask                      Allocated to registers r3 
00DC            784   ;------------------------------------------------------------
00DC            785   ;        EFM8_JDY40_test.c:174: void InitPinADC (unsigned char portno, unsigned char pinno)
00DC            786   ;        -----------------------------------------
00DC            787   ;         function InitPinADC
00DC            788   ;        -----------------------------------------
00DC            789   _InitPinADC:
00DC AA82       790            mov     r2,dpl
00DE            791   ;        EFM8_JDY40_test.c:178: mask=1<<pinno;
00DE 8560F0     792            mov     b,_InitPinADC_PARM_2
00E1 05F0       793            inc     b
00E3 7401       794            mov     a,#0x01
00E5 8000       795            sjmp    L007013?
00E7            796   L007011?:
00E7 25E0       797            add     a,acc
00E9            798   L007013?:
00E9 D5F050     799            djnz    b,L007011?
00EC FB         800            mov     r3,a
00ED            801   ;        EFM8_JDY40_test.c:180: SFRPAGE = 0x20;
00ED 75A720     802            mov     _SFRPAGE,#0x20
00F0            803   ;        EFM8_JDY40_test.c:181: switch (portno)
00F0 BA0090     804            cjne    r2,#0x00,L007014?
00F3 8000       805            sjmp    L007001?
00F5            806   L007014?:
00F5 BA0110     807            cjne    r2,#0x01,L007015?
00F8 8000       808            sjmp    L007002?
00FA            809   L007015?:
00FA            810   ;        EFM8_JDY40_test.c:183: case 0:
00FA BA0290     811            cjne    r2,#0x02,L007005?
00FD 8000       812            sjmp    L007003?
00FF            813   L007001?:
00FF            814   ;        EFM8_JDY40_test.c:184: P0MDIN &= (~mask); // Set pin as analog input
00FF EB         815            mov     a,r3
0100 F4         816            cpl     a
0101 FA         817            mov     r2,a
0102 52F1       818            anl     _P0MDIN,a
0104            819   ;        EFM8_JDY40_test.c:185: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0104 EB         820            mov     a,r3
0105 42D4       821            orl     _P0SKIP,a
0107            822   ;        EFM8_JDY40_test.c:186: break;
0107            823   ;        EFM8_JDY40_test.c:187: case 1:
0107 8000       824            sjmp    L007005?
0109            825   L007002?:
0109            826   ;        EFM8_JDY40_test.c:188: P1MDIN &= (~mask); // Set pin as analog input
0109 EB         827            mov     a,r3
010A F4         828            cpl     a
010B FA         829            mov     r2,a
010C 52F2       830            anl     _P1MDIN,a
010E            831   ;        EFM8_JDY40_test.c:189: P1SKIP |= mask; // Skip Crossbar decoding for this pin
010E EB         832            mov     a,r3
010F 42D5       833            orl     _P1SKIP,a
0111            834   ;        EFM8_JDY40_test.c:190: break;
0111            835   ;        EFM8_JDY40_test.c:191: case 2:
0111 8000       836            sjmp    L007005?
0113            837   L007003?:
0113            838   ;        EFM8_JDY40_test.c:192: P2MDIN &= (~mask); // Set pin as analog input
0113 EB         839            mov     a,r3
0114 F4         840            cpl     a
0115 FA         841            mov     r2,a
0116 52F3       842            anl     _P2MDIN,a
0118            843   ;        EFM8_JDY40_test.c:193: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0118 EB         844            mov     a,r3
0119 42CC       845            orl     _P2SKIP,a
011B            846   ;        EFM8_JDY40_test.c:197: }
011B            847   L007005?:
011B            848   ;        EFM8_JDY40_test.c:198: SFRPAGE = 0x00;
011B 75A700     849            mov     _SFRPAGE,#0x00
011E 22         850            ret
011F            851   ;------------------------------------------------------------
011F            852   ;Allocation info for local variables in function 'ADC_at_Pin'
011F            853   ;------------------------------------------------------------
011F            854   ;pin                       Allocated to registers 
011F            855   ;------------------------------------------------------------
011F            856   ;        EFM8_JDY40_test.c:201: unsigned int ADC_at_Pin(unsigned char pin)
011F            857   ;        -----------------------------------------
011F            858   ;         function ADC_at_Pin
011F            859   ;        -----------------------------------------
011F            860   _ADC_at_Pin:
011F 8582BB     861            mov     _ADC0MX,dpl
0122            862   ;        EFM8_JDY40_test.c:204: ADINT = 0;
0122 C2ED       863            clr     _ADINT
0124            864   ;        EFM8_JDY40_test.c:205: ADBUSY = 1;     // Convert voltage at the pin
0124 D2EC       865            setb    _ADBUSY
0126            866   ;        EFM8_JDY40_test.c:206: while (!ADINT); // Wait for conversion to complete
0126            867   L008001?:
0126 30ED10     868            jnb     _ADINT,L008001?
0129            869   ;        EFM8_JDY40_test.c:207: return (ADC0);
0129 85BD82     870            mov     dpl,_ADC0
012C 85BE83     871            mov     dph,(_ADC0 >> 8)
012F 22         872            ret
0130            873   ;------------------------------------------------------------
0130            874   ;Allocation info for local variables in function 'Get_ADC'
0130            875   ;------------------------------------------------------------
0130            876   ;------------------------------------------------------------
0130            877   ;        EFM8_JDY40_test.c:210: unsigned int Get_ADC (void)
0130            878   ;        -----------------------------------------
0130            879   ;         function Get_ADC
0130            880   ;        -----------------------------------------
0130            881   _Get_ADC:
0130            882   ;        EFM8_JDY40_test.c:212: ADINT = 0;
0130 C2ED       883            clr     _ADINT
0132            884   ;        EFM8_JDY40_test.c:213: ADBUSY = 1;
0132 D2EC       885            setb    _ADBUSY
0134            886   ;        EFM8_JDY40_test.c:214: while (!ADINT); // Wait for conversion to complete
0134            887   L009001?:
0134 30ED50     888            jnb     _ADINT,L009001?
0137            889   ;        EFM8_JDY40_test.c:215: return (ADC0);
0137 85BD82     890            mov     dpl,_ADC0
013A 85BE83     891            mov     dph,(_ADC0 >> 8)
013D 22         892            ret
013E            893   ;------------------------------------------------------------
013E            894   ;Allocation info for local variables in function 'Volts_at_Pin'
013E            895   ;------------------------------------------------------------
013E            896   ;pin                       Allocated to registers r2 
013E            897   ;------------------------------------------------------------
013E            898   ;        EFM8_JDY40_test.c:219: float Volts_at_Pin(unsigned char pin)
013E            899   ;        -----------------------------------------
013E            900   ;         function Volts_at_Pin
013E            901   ;        -----------------------------------------
013E            902   _Volts_at_Pin:
013E            903   ;        EFM8_JDY40_test.c:221: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
013E 120000     904            lcall   _ADC_at_Pin
0141 120000     905            lcall   ___uint2fs
0144 AA82       906            mov     r2,dpl
0146 AB83       907            mov     r3,dph
0148 ACF0       908            mov     r4,b
014A FD         909            mov     r5,a
014B C002       910            push    ar2
014D C003       911            push    ar3
014F C004       912            push    ar4
0151 C005       913            push    ar5
0153 903333     914            mov     dptr,#0x3333
0156 75F09B     915            mov     b,#0x9B
0159 7440       916            mov     a,#0x40
015B 120000     917            lcall   ___fsmul
015E AA82       918            mov     r2,dpl
0160 AB83       919            mov     r3,dph
0162 ACF0       920            mov     r4,b
0164 FD         921            mov     r5,a
0165 E581       922            mov     a,sp
0167 24FC       923            add     a,#0xfc
0169 F581       924            mov     sp,a
016B E4         925            clr     a
016C C0E0       926            push    acc
016E 74FC       927            mov     a,#0xFC
0170 C0E0       928            push    acc
0172 747F       929            mov     a,#0x7F
0174 C0E0       930            push    acc
0176 7446       931            mov     a,#0x46
0178 C0E0       932            push    acc
017A 8A82       933            mov     dpl,r2
017C 8B83       934            mov     dph,r3
017E 8CF0       935            mov     b,r4
0180 ED         936            mov     a,r5
0181 120000     937            lcall   ___fsdiv
0184 AA82       938            mov     r2,dpl
0186 AB83       939            mov     r3,dph
0188 ACF0       940            mov     r4,b
018A FD         941            mov     r5,a
018B E581       942            mov     a,sp
018D 24FC       943            add     a,#0xfc
018F F581       944            mov     sp,a
0191 8A82       945            mov     dpl,r2
0193 8B83       946            mov     dph,r3
0195 8CF0       947            mov     b,r4
0197 ED         948            mov     a,r5
0198 22         949            ret
0199            950   ;------------------------------------------------------------
0199            951   ;Allocation info for local variables in function 'UART1_Init'
0199            952   ;------------------------------------------------------------
0199            953   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0199            954   ;------------------------------------------------------------
0199            955   ;        EFM8_JDY40_test.c:224: void UART1_Init (unsigned long baudrate)
0199            956   ;        -----------------------------------------
0199            957   ;         function UART1_Init
0199            958   ;        -----------------------------------------
0199            959   _UART1_Init:
0199 AA82       960            mov     r2,dpl
019B AB83       961            mov     r3,dph
019D ACF0       962            mov     r4,b
019F FD         963            mov     r5,a
01A0            964   ;        EFM8_JDY40_test.c:226: SFRPAGE = 0x20;
01A0 75A720     965            mov     _SFRPAGE,#0x20
01A3            966   ;        EFM8_JDY40_test.c:227: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01A3 75930C     967            mov     _SMOD1,#0x0C
01A6            968   ;        EFM8_JDY40_test.c:228: SCON1 = 0x10;
01A6 75C810     969            mov     _SCON1,#0x10
01A9            970   ;        EFM8_JDY40_test.c:229: SBCON1 =0x00;   // disable baud rate generator
01A9 759400     971            mov     _SBCON1,#0x00
01AC            972   ;        EFM8_JDY40_test.c:230: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01AC 8A00       973            mov     __divulong_PARM_2,r2
01AE 8B01       974            mov     (__divulong_PARM_2 + 1),r3
01B0 8C02       975            mov     (__divulong_PARM_2 + 2),r4
01B2 8D03       976            mov     (__divulong_PARM_2 + 3),r5
01B4 90A200     977            mov     dptr,#0xA200
01B7 75F04A     978            mov     b,#0x4A
01BA 7404       979            mov     a,#0x04
01BC 120000     980            lcall   __divulong
01BF AA82       981            mov     r2,dpl
01C1 AB83       982            mov     r3,dph
01C3 ACF0       983            mov     r4,b
01C5 FD         984            mov     r5,a
01C6 750018     985            mov     __divulong_PARM_2,#0x18
01C9 E4         986            clr     a
01CA F501       987            mov     (__divulong_PARM_2 + 1),a
01CC F502       988            mov     (__divulong_PARM_2 + 2),a
01CE F503       989            mov     (__divulong_PARM_2 + 3),a
01D0 8A82       990            mov     dpl,r2
01D2 8B83       991            mov     dph,r3
01D4 8CF0       992            mov     b,r4
01D6 ED         993            mov     a,r5
01D7 120000     994            lcall   __divulong
01DA AA82       995            mov     r2,dpl
01DC AB83       996            mov     r3,dph
01DE ACF0       997            mov     r4,b
01E0 FD         998            mov     r5,a
01E1 E4         999            clr     a
01E2 C3        1000            clr     c
01E3 9A        1001            subb    a,r2
01E4 FA        1002            mov     r2,a
01E5 E4        1003            clr     a
01E6 9B        1004            subb    a,r3
01E7 FB        1005            mov     r3,a
01E8 7401      1006            mov     a,#0x01
01EA 9C        1007            subb    a,r4
01EB E4        1008            clr     a
01EC 9D        1009            subb    a,r5
01ED 8A95      1010            mov     _SBRL1,r2
01EF 8B96      1011            mov     (_SBRL1 >> 8),r3
01F1           1012   ;        EFM8_JDY40_test.c:231: TI1 = 1; // indicate ready for TX
01F1 D2C9      1013            setb    _TI1
01F3           1014   ;        EFM8_JDY40_test.c:232: SBCON1 |= 0x40;   // enable baud rate generator
01F3 439440    1015            orl     _SBCON1,#0x40
01F6           1016   ;        EFM8_JDY40_test.c:233: SFRPAGE = 0x00;
01F6 75A700    1017            mov     _SFRPAGE,#0x00
01F9 22        1018            ret
01FA           1019   ;------------------------------------------------------------
01FA           1020   ;Allocation info for local variables in function 'putchar1'
01FA           1021   ;------------------------------------------------------------
01FA           1022   ;c                         Allocated to registers r2 
01FA           1023   ;------------------------------------------------------------
01FA           1024   ;        EFM8_JDY40_test.c:236: void putchar1 (char c) 
01FA           1025   ;        -----------------------------------------
01FA           1026   ;         function putchar1
01FA           1027   ;        -----------------------------------------
01FA           1028   _putchar1:
01FA AA82      1029            mov     r2,dpl
01FC           1030   ;        EFM8_JDY40_test.c:238: SFRPAGE = 0x20;
01FC 75A720    1031            mov     _SFRPAGE,#0x20
01FF           1032   ;        EFM8_JDY40_test.c:239: while (!TI1);
01FF           1033   L012001?:
01FF           1034   ;        EFM8_JDY40_test.c:240: TI1=0;
01FF 10C960    1035            jbc     _TI1,L012008?
0202 8000      1036            sjmp    L012001?
0204           1037   L012008?:
0204           1038   ;        EFM8_JDY40_test.c:241: SBUF1 = c;
0204 8A92      1039            mov     _SBUF1,r2
0206           1040   ;        EFM8_JDY40_test.c:242: SFRPAGE = 0x00;
0206 75A700    1041            mov     _SFRPAGE,#0x00
0209 22        1042            ret
020A           1043   ;------------------------------------------------------------
020A           1044   ;Allocation info for local variables in function 'sendstr1'
020A           1045   ;------------------------------------------------------------
020A           1046   ;s                         Allocated to registers r2 r3 r4 
020A           1047   ;------------------------------------------------------------
020A           1048   ;        EFM8_JDY40_test.c:245: void sendstr1 (char * s)
020A           1049   ;        -----------------------------------------
020A           1050   ;         function sendstr1
020A           1051   ;        -----------------------------------------
020A           1052   _sendstr1:
020A AA82      1053            mov     r2,dpl
020C AB83      1054            mov     r3,dph
020E ACF0      1055            mov     r4,b
0210           1056   ;        EFM8_JDY40_test.c:247: while(*s)
0210           1057   L013001?:
0210 8A82      1058            mov     dpl,r2
0212 8B83      1059            mov     dph,r3
0214 8CF0      1060            mov     b,r4
0216 120000    1061            lcall   __gptrget
0219 FD        1062            mov     r5,a
021A 6000      1063            jz      L013004?
021C           1064   ;        EFM8_JDY40_test.c:249: putchar1(*s);
021C 8D82      1065            mov     dpl,r5
021E C002      1066            push    ar2
0220 C003      1067            push    ar3
0222 C004      1068            push    ar4
0224 120000    1069            lcall   _putchar1
0227 D004      1070            pop     ar4
0229 D003      1071            pop     ar3
022B D002      1072            pop     ar2
022D           1073   ;        EFM8_JDY40_test.c:250: s++;     
022D 0A        1074            inc     r2
022E BA00A0    1075            cjne    r2,#0x00,L013001?
0231 0B        1076            inc     r3
0232 8000      1077            sjmp    L013001?
0234           1078   L013004?:
0234 22        1079            ret
0235           1080   ;------------------------------------------------------------
0235           1081   ;Allocation info for local variables in function 'getchar1'
0235           1082   ;------------------------------------------------------------
0235           1083   ;c                         Allocated to registers 
0235           1084   ;------------------------------------------------------------
0235           1085   ;        EFM8_JDY40_test.c:254: char getchar1 (void)
0235           1086   ;        -----------------------------------------
0235           1087   ;         function getchar1
0235           1088   ;        -----------------------------------------
0235           1089   _getchar1:
0235           1090   ;        EFM8_JDY40_test.c:257: SFRPAGE = 0x20;
0235 75A720    1091            mov     _SFRPAGE,#0x20
0238           1092   ;        EFM8_JDY40_test.c:258: while (!RI1);
0238           1093   L014001?:
0238           1094   ;        EFM8_JDY40_test.c:259: RI1=0;
0238 10C8A8    1095            jbc     _RI1,L014008?
023B 8000      1096            sjmp    L014001?
023D           1097   L014008?:
023D           1098   ;        EFM8_JDY40_test.c:261: SCON1&=0b_0011_1111;
023D 53C83F    1099            anl     _SCON1,#0x3F
0240           1100   ;        EFM8_JDY40_test.c:262: c = SBUF1;
0240 859282    1101            mov     dpl,_SBUF1
0243           1102   ;        EFM8_JDY40_test.c:263: SFRPAGE = 0x00;
0243 75A700    1103            mov     _SFRPAGE,#0x00
0246           1104   ;        EFM8_JDY40_test.c:264: return (c);
0246 22        1105            ret
0247           1106   ;------------------------------------------------------------
0247           1107   ;Allocation info for local variables in function 'getchar1_with_timeout'
0247           1108   ;------------------------------------------------------------
0247           1109   ;c                         Allocated to registers 
0247           1110   ;timeout                   Allocated to registers r2 r3 
0247           1111   ;------------------------------------------------------------
0247           1112   ;        EFM8_JDY40_test.c:267: char getchar1_with_timeout (void)
0247           1113   ;        -----------------------------------------
0247           1114   ;         function getchar1_with_timeout
0247           1115   ;        -----------------------------------------
0247           1116   _getchar1_with_timeout:
0247           1117   ;        EFM8_JDY40_test.c:271: SFRPAGE = 0x20;
0247 75A720    1118            mov     _SFRPAGE,#0x20
024A           1119   ;        EFM8_JDY40_test.c:273: while (!RI1)
024A 7A00      1120            mov     r2,#0x00
024C 7B00      1121            mov     r3,#0x00
024E           1122   L015003?:
024E 20C828    1123            jb      _RI1,L015005?
0251           1124   ;        EFM8_JDY40_test.c:275: SFRPAGE = 0x00;
0251 75A700    1125            mov     _SFRPAGE,#0x00
0254           1126   ;        EFM8_JDY40_test.c:276: Timer3us(20);
0254 758214    1127            mov     dpl,#0x14
0257 C002      1128            push    ar2
0259 C003      1129            push    ar3
025B 120000    1130            lcall   _Timer3us
025E D003      1131            pop     ar3
0260 D002      1132            pop     ar2
0262           1133   ;        EFM8_JDY40_test.c:277: SFRPAGE = 0x20;
0262 75A720    1134            mov     _SFRPAGE,#0x20
0265           1135   ;        EFM8_JDY40_test.c:278: timeout++;
0265 0A        1136            inc     r2
0266 BA0068    1137            cjne    r2,#0x00,L015012?
0269 0B        1138            inc     r3
026A           1139   L015012?:
026A           1140   ;        EFM8_JDY40_test.c:279: if(timeout==25000)
026A BAA8E8    1141            cjne    r2,#0xA8,L015003?
026D BB61E8    1142            cjne    r3,#0x61,L015003?
0270           1143   ;        EFM8_JDY40_test.c:281: SFRPAGE = 0x00;
0270 75A700    1144            mov     _SFRPAGE,#0x00
0273           1145   ;        EFM8_JDY40_test.c:282: return ('\n'); // Timeout after half second
0273 75820A    1146            mov     dpl,#0x0A
0276 22        1147            ret
0277           1148   L015005?:
0277           1149   ;        EFM8_JDY40_test.c:285: RI1=0;
0277 C2C8      1150            clr     _RI1
0279           1151   ;        EFM8_JDY40_test.c:287: SCON1&=0b_0011_1111;
0279 53C83F    1152            anl     _SCON1,#0x3F
027C           1153   ;        EFM8_JDY40_test.c:288: c = SBUF1;
027C 859282    1154            mov     dpl,_SBUF1
027F           1155   ;        EFM8_JDY40_test.c:289: SFRPAGE = 0x00;
027F 75A700    1156            mov     _SFRPAGE,#0x00
0282           1157   ;        EFM8_JDY40_test.c:290: return (c);
0282 22        1158            ret
0283           1159   ;------------------------------------------------------------
0283           1160   ;Allocation info for local variables in function 'getstr1'
0283           1161   ;------------------------------------------------------------
0283           1162   ;s                         Allocated to registers r2 r3 r4 
0283           1163   ;c                         Allocated to registers r5 
0283           1164   ;------------------------------------------------------------
0283           1165   ;        EFM8_JDY40_test.c:293: void getstr1 (char * s)
0283           1166   ;        -----------------------------------------
0283           1167   ;         function getstr1
0283           1168   ;        -----------------------------------------
0283           1169   _getstr1:
0283 AA82      1170            mov     r2,dpl
0285 AB83      1171            mov     r3,dph
0287 ACF0      1172            mov     r4,b
0289           1173   ;        EFM8_JDY40_test.c:297: while(1)
0289           1174   L016004?:
0289           1175   ;        EFM8_JDY40_test.c:299: c=getchar1_with_timeout();
0289 C002      1176            push    ar2
028B C003      1177            push    ar3
028D C004      1178            push    ar4
028F 120000    1179            lcall   _getchar1_with_timeout
0292 AD82      1180            mov     r5,dpl
0294 D004      1181            pop     ar4
0296 D003      1182            pop     ar3
0298 D002      1183            pop     ar2
029A           1184   ;        EFM8_JDY40_test.c:300: if(c=='\n')
029A BD0AE8    1185            cjne    r5,#0x0A,L016002?
029D           1186   ;        EFM8_JDY40_test.c:302: *s=0;
029D 8A82      1187            mov     dpl,r2
029F 8B83      1188            mov     dph,r3
02A1 8CF0      1189            mov     b,r4
02A3 E4        1190            clr     a
02A4           1191   ;        EFM8_JDY40_test.c:303: return;
02A4 020000    1192            ljmp    __gptrput
02A7           1193   L016002?:
02A7           1194   ;        EFM8_JDY40_test.c:305: *s=c;
02A7 8A82      1195            mov     dpl,r2
02A9 8B83      1196            mov     dph,r3
02AB 8CF0      1197            mov     b,r4
02AD ED        1198            mov     a,r5
02AE 120000    1199            lcall   __gptrput
02B1 A3        1200            inc     dptr
02B2 AA82      1201            mov     r2,dpl
02B4 AB83      1202            mov     r3,dph
02B6           1203   ;        EFM8_JDY40_test.c:306: s++;
02B6 8000      1204            sjmp    L016004?
02B8           1205   ;------------------------------------------------------------
02B8           1206   ;Allocation info for local variables in function 'RXU1'
02B8           1207   ;------------------------------------------------------------
02B8           1208   ;------------------------------------------------------------
02B8           1209   ;        EFM8_JDY40_test.c:311: bit RXU1 (void)
02B8           1210   ;        -----------------------------------------
02B8           1211   ;         function RXU1
02B8           1212   ;        -----------------------------------------
02B8           1213   _RXU1:
02B8           1214   ;        EFM8_JDY40_test.c:314: SFRPAGE = 0x20;
02B8 75A720    1215            mov     _SFRPAGE,#0x20
02BB           1216   ;        EFM8_JDY40_test.c:315: mybit=RI1;
02BB A2C8      1217            mov     c,_RI1
02BD           1218   ;        EFM8_JDY40_test.c:316: SFRPAGE = 0x00;
02BD 75A700    1219            mov     _SFRPAGE,#0x00
02C0           1220   ;        EFM8_JDY40_test.c:317: return mybit;
02C0 22        1221            ret
02C1           1222   ;------------------------------------------------------------
02C1           1223   ;Allocation info for local variables in function 'waitms_or_RI1'
02C1           1224   ;------------------------------------------------------------
02C1           1225   ;ms                        Allocated to registers r2 r3 
02C1           1226   ;j                         Allocated to registers r4 r5 
02C1           1227   ;k                         Allocated to registers r6 
02C1           1228   ;------------------------------------------------------------
02C1           1229   ;        EFM8_JDY40_test.c:320: void waitms_or_RI1 (unsigned int ms)
02C1           1230   ;        -----------------------------------------
02C1           1231   ;         function waitms_or_RI1
02C1           1232   ;        -----------------------------------------
02C1           1233   _waitms_or_RI1:
02C1 AA82      1234            mov     r2,dpl
02C3 AB83      1235            mov     r3,dph
02C5           1236   ;        EFM8_JDY40_test.c:324: for(j=0; j<ms; j++)
02C5 7C00      1237            mov     r4,#0x00
02C7 7D00      1238            mov     r5,#0x00
02C9           1239   L018007?:
02C9 C3        1240            clr     c
02CA EC        1241            mov     a,r4
02CB 9A        1242            subb    a,r2
02CC ED        1243            mov     a,r5
02CD 9B        1244            subb    a,r3
02CE 5000      1245            jnc     L018011?
02D0           1246   ;        EFM8_JDY40_test.c:326: for (k=0; k<4; k++)
02D0 7E00      1247            mov     r6,#0x00
02D2           1248   L018003?:
02D2 BE0428    1249            cjne    r6,#0x04,L018019?
02D5           1250   L018019?:
02D5 5000      1251            jnc     L018009?
02D7           1252   ;        EFM8_JDY40_test.c:328: if(RXU1()) return;
02D7 C002      1253            push    ar2
02D9 C003      1254            push    ar3
02DB C004      1255            push    ar4
02DD C005      1256            push    ar5
02DF C006      1257            push    ar6
02E1 120000    1258            lcall   _RXU1
02E4 E4        1259            clr     a
02E5 33        1260            rlc     a
02E6 D006      1261            pop     ar6
02E8 D005      1262            pop     ar5
02EA D004      1263            pop     ar4
02EC D003      1264            pop     ar3
02EE D002      1265            pop     ar2
02F0 6000      1266            jz      L018002?
02F2 22        1267            ret
02F3           1268   L018002?:
02F3           1269   ;        EFM8_JDY40_test.c:329: Timer3us(250);
02F3 7582FA    1270            mov     dpl,#0xFA
02F6 C002      1271            push    ar2
02F8 C003      1272            push    ar3
02FA C004      1273            push    ar4
02FC C005      1274            push    ar5
02FE C006      1275            push    ar6
0300 120000    1276            lcall   _Timer3us
0303 D006      1277            pop     ar6
0305 D005      1278            pop     ar5
0307 D004      1279            pop     ar4
0309 D003      1280            pop     ar3
030B D002      1281            pop     ar2
030D           1282   ;        EFM8_JDY40_test.c:326: for (k=0; k<4; k++)
030D 0E        1283            inc     r6
030E 8000      1284            sjmp    L018003?
0310           1285   L018009?:
0310           1286   ;        EFM8_JDY40_test.c:324: for(j=0; j<ms; j++)
0310 0C        1287            inc     r4
0311 BC0068    1288            cjne    r4,#0x00,L018007?
0314 0D        1289            inc     r5
0315 8000      1290            sjmp    L018007?
0317           1291   L018011?:
0317 22        1292            ret
0318           1293   ;------------------------------------------------------------
0318           1294   ;Allocation info for local variables in function 'SendATCommand'
0318           1295   ;------------------------------------------------------------
0318           1296   ;s                         Allocated to registers r2 r3 r4 
0318           1297   ;------------------------------------------------------------
0318           1298   ;        EFM8_JDY40_test.c:334: void SendATCommand (char * s)
0318           1299   ;        -----------------------------------------
0318           1300   ;         function SendATCommand
0318           1301   ;        -----------------------------------------
0318           1302   _SendATCommand:
0318 AA82      1303            mov     r2,dpl
031A AB83      1304            mov     r3,dph
031C ACF0      1305            mov     r4,b
031E           1306   ;        EFM8_JDY40_test.c:336: printf("Command: %s", s);
031E C002      1307            push    ar2
0320 C003      1308            push    ar3
0322 C004      1309            push    ar4
0324 C002      1310            push    ar2
0326 C003      1311            push    ar3
0328 C004      1312            push    ar4
032A 74E8      1313            mov     a,#__str_0
032C C0E0      1314            push    acc
032E 74C3      1315            mov     a,#(__str_0 >> 8)
0330 C0E0      1316            push    acc
0332 7480      1317            mov     a,#0x80
0334 C0E0      1318            push    acc
0336 120000    1319            lcall   _printf
0339 E581      1320            mov     a,sp
033B 24FA      1321            add     a,#0xfa
033D F581      1322            mov     sp,a
033F           1323   ;        EFM8_JDY40_test.c:337: P3_0=0; // 'set' pin to 0 is 'AT' mode.
033F C2B0      1324            clr     _P3_0
0341           1325   ;        EFM8_JDY40_test.c:338: waitms(5);
0341 900005    1326            mov     dptr,#0x0005
0344 120000    1327            lcall   _waitms
0347 D004      1328            pop     ar4
0349 D003      1329            pop     ar3
034B D002      1330            pop     ar2
034D           1331   ;        EFM8_JDY40_test.c:339: sendstr1(s);
034D 8A82      1332            mov     dpl,r2
034F 8B83      1333            mov     dph,r3
0351 8CF0      1334            mov     b,r4
0353 120000    1335            lcall   _sendstr1
0356           1336   ;        EFM8_JDY40_test.c:340: getstr1(buff);
0356 901850    1337            mov     dptr,#_buff
0359 75F040    1338            mov     b,#0x40
035C 120000    1339            lcall   _getstr1
035F           1340   ;        EFM8_JDY40_test.c:341: waitms(10);
035F 90000A    1341            mov     dptr,#0x000A
0362 120000    1342            lcall   _waitms
0365           1343   ;        EFM8_JDY40_test.c:342: P3_0=1; // 'set' pin to 1 is normal operation mode.
0365 D2B0      1344            setb    _P3_0
0367           1345   ;        EFM8_JDY40_test.c:343: printf("Response: %s\r\n", buff);
0367 7450      1346            mov     a,#_buff
0369 C0E0      1347            push    acc
036B 7418      1348            mov     a,#(_buff >> 8)
036D C0E0      1349            push    acc
036F 7440      1350            mov     a,#0x40
0371 C0E0      1351            push    acc
0373 7468      1352            mov     a,#__str_1
0375 C0E0      1353            push    acc
0377 74C4      1354            mov     a,#(__str_1 >> 8)
0379 C0E0      1355            push    acc
037B 7480      1356            mov     a,#0x80
037D C0E0      1357            push    acc
037F 120000    1358            lcall   _printf
0382 E581      1359            mov     a,sp
0384 24FA      1360            add     a,#0xfa
0386 F581      1361            mov     sp,a
0388 22        1362            ret
0389           1363   ;------------------------------------------------------------
0389           1364   ;Allocation info for local variables in function 'LCD_pulse'
0389           1365   ;------------------------------------------------------------
0389           1366   ;------------------------------------------------------------
0389           1367   ;        EFM8_JDY40_test.c:348: void LCD_pulse (void)
0389           1368   ;        -----------------------------------------
0389           1369   ;         function LCD_pulse
0389           1370   ;        -----------------------------------------
0389           1371   _LCD_pulse:
0389           1372   ;        EFM8_JDY40_test.c:350: LCD_E=1;
0389 D2A0      1373            setb    _P2_0
038B           1374   ;        EFM8_JDY40_test.c:351: Timer3us(40);
038B 758228    1375            mov     dpl,#0x28
038E 120000    1376            lcall   _Timer3us
0391           1377   ;        EFM8_JDY40_test.c:352: LCD_E=0;
0391 C2A0      1378            clr     _P2_0
0393 22        1379            ret
0394           1380   ;------------------------------------------------------------
0394           1381   ;Allocation info for local variables in function 'LCD_byte'
0394           1382   ;------------------------------------------------------------
0394           1383   ;x                         Allocated to registers r2 
0394           1384   ;------------------------------------------------------------
0394           1385   ;        EFM8_JDY40_test.c:355: void LCD_byte (unsigned char x)
0394           1386   ;        -----------------------------------------
0394           1387   ;         function LCD_byte
0394           1388   ;        -----------------------------------------
0394           1389   _LCD_byte:
0394 AA82      1390            mov     r2,dpl
0396           1391   ;        EFM8_JDY40_test.c:358: ACC=x; //Send high nible
0396 8AE0      1392            mov     _ACC,r2
0398           1393   ;        EFM8_JDY40_test.c:359: LCD_D7=ACC_7;
0398 A2E7      1394            mov     c,_ACC_7
039A 9290      1395            mov     _P1_0,c
039C           1396   ;        EFM8_JDY40_test.c:360: LCD_D6=ACC_6;
039C A2E6      1397            mov     c,_ACC_6
039E 9291      1398            mov     _P1_1,c
03A0           1399   ;        EFM8_JDY40_test.c:361: LCD_D5=ACC_5;
03A0 A2E5      1400            mov     c,_ACC_5
03A2 9292      1401            mov     _P1_2,c
03A4           1402   ;        EFM8_JDY40_test.c:362: LCD_D4=ACC_4;
03A4 A2E4      1403            mov     c,_ACC_4
03A6 9293      1404            mov     _P1_3,c
03A8           1405   ;        EFM8_JDY40_test.c:363: LCD_pulse();
03A8 C002      1406            push    ar2
03AA 120000    1407            lcall   _LCD_pulse
03AD           1408   ;        EFM8_JDY40_test.c:364: Timer3us(40);
03AD 758228    1409            mov     dpl,#0x28
03B0 120000    1410            lcall   _Timer3us
03B3 D002      1411            pop     ar2
03B5           1412   ;        EFM8_JDY40_test.c:365: ACC=x; //Send low nible
03B5 8AE0      1413            mov     _ACC,r2
03B7           1414   ;        EFM8_JDY40_test.c:366: LCD_D7=ACC_3;
03B7 A2E3      1415            mov     c,_ACC_3
03B9 9290      1416            mov     _P1_0,c
03BB           1417   ;        EFM8_JDY40_test.c:367: LCD_D6=ACC_2;
03BB A2E2      1418            mov     c,_ACC_2
03BD 9291      1419            mov     _P1_1,c
03BF           1420   ;        EFM8_JDY40_test.c:368: LCD_D5=ACC_1;
03BF A2E1      1421            mov     c,_ACC_1
03C1 9292      1422            mov     _P1_2,c
03C3           1423   ;        EFM8_JDY40_test.c:369: LCD_D4=ACC_0;
03C3 A2E0      1424            mov     c,_ACC_0
03C5 9293      1425            mov     _P1_3,c
03C7           1426   ;        EFM8_JDY40_test.c:370: LCD_pulse();
03C7 020000    1427            ljmp    _LCD_pulse
03CA           1428   ;------------------------------------------------------------
03CA           1429   ;Allocation info for local variables in function 'WriteData'
03CA           1430   ;------------------------------------------------------------
03CA           1431   ;x                         Allocated to registers r2 
03CA           1432   ;------------------------------------------------------------
03CA           1433   ;        EFM8_JDY40_test.c:373: void WriteData (unsigned char x)
03CA           1434   ;        -----------------------------------------
03CA           1435   ;         function WriteData
03CA           1436   ;        -----------------------------------------
03CA           1437   _WriteData:
03CA AA82      1438            mov     r2,dpl
03CC           1439   ;        EFM8_JDY40_test.c:375: LCD_RS=1;
03CC D297      1440            setb    _P1_7
03CE           1441   ;        EFM8_JDY40_test.c:376: LCD_byte(x);
03CE 8A82      1442            mov     dpl,r2
03D0 120000    1443            lcall   _LCD_byte
03D3           1444   ;        EFM8_JDY40_test.c:377: waitms(2);
03D3 900002    1445            mov     dptr,#0x0002
03D6 020000    1446            ljmp    _waitms
03D9           1447   ;------------------------------------------------------------
03D9           1448   ;Allocation info for local variables in function 'WriteCommand'
03D9           1449   ;------------------------------------------------------------
03D9           1450   ;x                         Allocated to registers r2 
03D9           1451   ;------------------------------------------------------------
03D9           1452   ;        EFM8_JDY40_test.c:380: void WriteCommand (unsigned char x)
03D9           1453   ;        -----------------------------------------
03D9           1454   ;         function WriteCommand
03D9           1455   ;        -----------------------------------------
03D9           1456   _WriteCommand:
03D9 AA82      1457            mov     r2,dpl
03DB           1458   ;        EFM8_JDY40_test.c:382: LCD_RS=0;
03DB C297      1459            clr     _P1_7
03DD           1460   ;        EFM8_JDY40_test.c:383: LCD_byte(x);
03DD 8A82      1461            mov     dpl,r2
03DF 120000    1462            lcall   _LCD_byte
03E2           1463   ;        EFM8_JDY40_test.c:384: waitms(5);
03E2 900005    1464            mov     dptr,#0x0005
03E5 020000    1465            ljmp    _waitms
03E8           1466   ;------------------------------------------------------------
03E8           1467   ;Allocation info for local variables in function 'LCD_4BIT'
03E8           1468   ;------------------------------------------------------------
03E8           1469   ;------------------------------------------------------------
03E8           1470   ;        EFM8_JDY40_test.c:387: void LCD_4BIT (void)
03E8           1471   ;        -----------------------------------------
03E8           1472   ;         function LCD_4BIT
03E8           1473   ;        -----------------------------------------
03E8           1474   _LCD_4BIT:
03E8           1475   ;        EFM8_JDY40_test.c:389: LCD_E=0; // Resting state of LCD's enable is zero
03E8 C2A0      1476            clr     _P2_0
03EA           1477   ;        EFM8_JDY40_test.c:391: waitms(20);
03EA 900014    1478            mov     dptr,#0x0014
03ED 120000    1479            lcall   _waitms
03F0           1480   ;        EFM8_JDY40_test.c:393: WriteCommand(0x33);
03F0 758233    1481            mov     dpl,#0x33
03F3 120000    1482            lcall   _WriteCommand
03F6           1483   ;        EFM8_JDY40_test.c:394: WriteCommand(0x33);
03F6 758233    1484            mov     dpl,#0x33
03F9 120000    1485            lcall   _WriteCommand
03FC           1486   ;        EFM8_JDY40_test.c:395: WriteCommand(0x32); // Change to 4-bit mode
03FC 758232    1487            mov     dpl,#0x32
03FF 120000    1488            lcall   _WriteCommand
0402           1489   ;        EFM8_JDY40_test.c:398: WriteCommand(0x28);
0402 758228    1490            mov     dpl,#0x28
0405 120000    1491            lcall   _WriteCommand
0408           1492   ;        EFM8_JDY40_test.c:399: WriteCommand(0x0c);
0408 75820C    1493            mov     dpl,#0x0C
040B 120000    1494            lcall   _WriteCommand
040E           1495   ;        EFM8_JDY40_test.c:400: WriteCommand(0x01); // Clear screen command (takes some time)
040E 758201    1496            mov     dpl,#0x01
0411 120000    1497            lcall   _WriteCommand
0414           1498   ;        EFM8_JDY40_test.c:401: waitms(20); // Wait for clear screen command to finsih.
0414 900014    1499            mov     dptr,#0x0014
0417 020000    1500            ljmp    _waitms
041A           1501   ;------------------------------------------------------------
041A           1502   ;Allocation info for local variables in function 'LCDprint'
041A           1503   ;------------------------------------------------------------
041A           1504   ;line                      Allocated with name '_LCDprint_PARM_2'
041A           1505   ;string                    Allocated to registers r2 r3 r4 
041A           1506   ;j                         Allocated to registers r5 r6 
041A           1507   ;------------------------------------------------------------
041A           1508   ;        EFM8_JDY40_test.c:404: void LCDprint(char * string, unsigned char line, bit clear)
041A           1509   ;        -----------------------------------------
041A           1510   ;         function LCDprint
041A           1511   ;        -----------------------------------------
041A           1512   _LCDprint:
041A AA82      1513            mov     r2,dpl
041C AB83      1514            mov     r3,dph
041E ACF0      1515            mov     r4,b
0420           1516   ;        EFM8_JDY40_test.c:408: WriteCommand(line==2?0xc0:0x80);
0420 7402      1517            mov     a,#0x02
0422 B5A0A8    1518            cjne    a,_LCDprint_PARM_2,L025013?
0425 7DC0      1519            mov     r5,#0xC0
0427 8000      1520            sjmp    L025014?
0429           1521   L025013?:
0429 7D80      1522            mov     r5,#0x80
042B           1523   L025014?:
042B 8D82      1524            mov     dpl,r5
042D C002      1525            push    ar2
042F C003      1526            push    ar3
0431 C004      1527            push    ar4
0433 120000    1528            lcall   _WriteCommand
0436           1529   ;        EFM8_JDY40_test.c:409: waitms(5);
0436 900005    1530            mov     dptr,#0x0005
0439 120000    1531            lcall   _waitms
043C D004      1532            pop     ar4
043E D003      1533            pop     ar3
0440 D002      1534            pop     ar2
0442           1535   ;        EFM8_JDY40_test.c:410: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
0442 7D00      1536            mov     r5,#0x00
0444 7E00      1537            mov     r6,#0x00
0446           1538   L025003?:
0446 ED        1539            mov     a,r5
0447 2A        1540            add     a,r2
0448 FF        1541            mov     r7,a
0449 EE        1542            mov     a,r6
044A 3B        1543            addc    a,r3
044B F8        1544            mov     r0,a
044C 8C01      1545            mov     ar1,r4
044E 8F82      1546            mov     dpl,r7
0450 8883      1547            mov     dph,r0
0452 89F0      1548            mov     b,r1
0454 120000    1549            lcall   __gptrget
0457 FF        1550            mov     r7,a
0458 6000      1551            jz      L025006?
045A 8F82      1552            mov     dpl,r7
045C C002      1553            push    ar2
045E C003      1554            push    ar3
0460 C004      1555            push    ar4
0462 C005      1556            push    ar5
0464 C006      1557            push    ar6
0466 120000    1558            lcall   _WriteData
0469 D006      1559            pop     ar6
046B D005      1560            pop     ar5
046D D004      1561            pop     ar4
046F D003      1562            pop     ar3
0471 D002      1563            pop     ar2
0473 0D        1564            inc     r5
0474 BD0028    1565            cjne    r5,#0x00,L025003?
0477 0E        1566            inc     r6
0478 8000      1567            sjmp    L025003?
047A           1568   L025006?:
047A           1569   ;        EFM8_JDY40_test.c:411: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
047A 3010A8    1570            jnb     _LCDprint_PARM_3,L025011?
047D 8D02      1571            mov     ar2,r5
047F 8E03      1572            mov     ar3,r6
0481           1573   L025007?:
0481 C3        1574            clr     c
0482 EA        1575            mov     a,r2
0483 9410      1576            subb    a,#0x10
0485 EB        1577            mov     a,r3
0486 6480      1578            xrl     a,#0x80
0488 9480      1579            subb    a,#0x80
048A 5000      1580            jnc     L025011?
048C 758220    1581            mov     dpl,#0x20
048F C002      1582            push    ar2
0491 C003      1583            push    ar3
0493 120000    1584            lcall   _WriteData
0496 D003      1585            pop     ar3
0498 D002      1586            pop     ar2
049A 0A        1587            inc     r2
049B BA00E8    1588            cjne    r2,#0x00,L025007?
049E 0B        1589            inc     r3
049F 8000      1590            sjmp    L025007?
04A1           1591   L025011?:
04A1 22        1592            ret
04A2           1593   ;------------------------------------------------------------
04A2           1594   ;Allocation info for local variables in function 'main'
04A2           1595   ;------------------------------------------------------------
04A2           1596   ;cnt                       Allocated to registers 
04A2           1597   ;volt_x                    Allocated to registers r2 r3 r4 r5 
04A2           1598   ;volt_y                    Allocated to registers r6 r7 r0 r1 
04A2           1599   ;------------------------------------------------------------
04A2           1600   ;        EFM8_JDY40_test.c:414: void main (void)
04A2           1601   ;        -----------------------------------------
04A2           1602   ;         function main
04A2           1603   ;        -----------------------------------------
04A2           1604   _main:
04A2           1605   ;        EFM8_JDY40_test.c:421: InitADC();
04A2 120000    1606            lcall   _InitADC
04A5           1607   ;        EFM8_JDY40_test.c:422: waitms(500);
04A5 9001F4    1608            mov     dptr,#0x01F4
04A8 120000    1609            lcall   _waitms
04AB           1610   ;        EFM8_JDY40_test.c:423: printf("\r\nJDY-40 test\r\n");
04AB 7428      1611            mov     a,#__str_2
04AD C0E0      1612            push    acc
04AF 74C6      1613            mov     a,#(__str_2 >> 8)
04B1 C0E0      1614            push    acc
04B3 7480      1615            mov     a,#0x80
04B5 C0E0      1616            push    acc
04B7 120000    1617            lcall   _printf
04BA 1581      1618            dec     sp
04BC 1581      1619            dec     sp
04BE 1581      1620            dec     sp
04C0           1621   ;        EFM8_JDY40_test.c:424: UART1_Init(9600);
04C0 902580    1622            mov     dptr,#0x2580
04C3 E4        1623            clr     a
04C4 F5F0      1624            mov     b,a
04C6 120000    1625            lcall   _UART1_Init
04C9           1626   ;        EFM8_JDY40_test.c:425: InitPinADC(2,4); //for y remote
04C9 756004    1627            mov     _InitPinADC_PARM_2,#0x04
04CC 758202    1628            mov     dpl,#0x02
04CF 120000    1629            lcall   _InitPinADC
04D2           1630   ;        EFM8_JDY40_test.c:426: InitPinADC(2,5); //for x remote
04D2 756005    1631            mov     _InitPinADC_PARM_2,#0x05
04D5 758202    1632            mov     dpl,#0x02
04D8 120000    1633            lcall   _InitPinADC
04DB           1634   ;        EFM8_JDY40_test.c:443: SendATCommand("AT+DVID9944\r\n");  
04DB 90C668    1635            mov     dptr,#__str_3
04DE 75F080    1636            mov     b,#0x80
04E1 120000    1637            lcall   _SendATCommand
04E4           1638   ;        EFM8_JDY40_test.c:446: SendATCommand("AT+VER\r\n");
04E4 90C6A8    1639            mov     dptr,#__str_4
04E7 75F080    1640            mov     b,#0x80
04EA 120000    1641            lcall   _SendATCommand
04ED           1642   ;        EFM8_JDY40_test.c:447: SendATCommand("AT+BAUD\r\n");
04ED 90C6E8    1643            mov     dptr,#__str_5
04F0 75F080    1644            mov     b,#0x80
04F3 120000    1645            lcall   _SendATCommand
04F6           1646   ;        EFM8_JDY40_test.c:448: SendATCommand("AT+RFID\r\n");
04F6 90C728    1647            mov     dptr,#__str_6
04F9 75F080    1648            mov     b,#0x80
04FC 120000    1649            lcall   _SendATCommand
04FF           1650   ;        EFM8_JDY40_test.c:449: SendATCommand("AT+DVID\r\n");
04FF 90C768    1651            mov     dptr,#__str_7
0502 75F080    1652            mov     b,#0x80
0505 120000    1653            lcall   _SendATCommand
0508           1654   ;        EFM8_JDY40_test.c:450: SendATCommand("AT+RFC\r\n");
0508 90C7A8    1655            mov     dptr,#__str_8
050B 75F080    1656            mov     b,#0x80
050E 120000    1657            lcall   _SendATCommand
0511           1658   ;        EFM8_JDY40_test.c:451: SendATCommand("AT+POWE\r\n");
0511 90C7E8    1659            mov     dptr,#__str_9
0514 75F080    1660            mov     b,#0x80
0517 120000    1661            lcall   _SendATCommand
051A           1662   ;        EFM8_JDY40_test.c:452: SendATCommand("AT+CLSS\r\n");
051A 90C828    1663            mov     dptr,#__str_10
051D 75F080    1664            mov     b,#0x80
0520 120000    1665            lcall   _SendATCommand
0523           1666   ;        EFM8_JDY40_test.c:454: printf("\r\Press and hold the BOOT button to transmit.\r\n");
0523 7468      1667            mov     a,#__str_11
0525 C0E0      1668            push    acc
0527 74C8      1669            mov     a,#(__str_11 >> 8)
0529 C0E0      1670            push    acc
052B 7480      1671            mov     a,#0x80
052D C0E0      1672            push    acc
052F 120000    1673            lcall   _printf
0532 1581      1674            dec     sp
0534 1581      1675            dec     sp
0536 1581      1676            dec     sp
0538           1677   ;        EFM8_JDY40_test.c:457: while(1)
0538           1678   L026002?:
0538           1679   ;        EFM8_JDY40_test.c:461: volt_x = Volts_at_Pin(QFP32_MUX_P2_5);
0538 758212    1680            mov     dpl,#0x12
053B 120000    1681            lcall   _Volts_at_Pin
053E AA82      1682            mov     r2,dpl
0540 AB83      1683            mov     r3,dph
0542 ACF0      1684            mov     r4,b
0544 FD        1685            mov     r5,a
0545           1686   ;        EFM8_JDY40_test.c:462: volt_y = Volts_at_Pin(QFP32_MUX_P2_4);
0545 758211    1687            mov     dpl,#0x11
0548 C002      1688            push    ar2
054A C003      1689            push    ar3
054C C004      1690            push    ar4
054E C005      1691            push    ar5
0550 120000    1692            lcall   _Volts_at_Pin
0553 AE82      1693            mov     r6,dpl
0555 AF83      1694            mov     r7,dph
0557 A8F0      1695            mov     r0,b
0559 F9        1696            mov     r1,a
055A D005      1697            pop     ar5
055C D004      1698            pop     ar4
055E D003      1699            pop     ar3
0560 D002      1700            pop     ar2
0562           1701   ;        EFM8_JDY40_test.c:463: printf("x: %4.2f\r\n",volt_x);
0562 C006      1702            push    ar6
0564 C007      1703            push    ar7
0566 C000      1704            push    ar0
0568 C001      1705            push    ar1
056A C002      1706            push    ar2
056C C003      1707            push    ar3
056E C004      1708            push    ar4
0570 C005      1709            push    ar5
0572 74E8      1710            mov     a,#__str_12
0574 C0E0      1711            push    acc
0576 74C8      1712            mov     a,#(__str_12 >> 8)
0578 C0E0      1713            push    acc
057A 7480      1714            mov     a,#0x80
057C C0E0      1715            push    acc
057E 120000    1716            lcall   _printf
0581 E581      1717            mov     a,sp
0583 24F9      1718            add     a,#0xf9
0585 F581      1719            mov     sp,a
0587           1720   ;        EFM8_JDY40_test.c:464: printf("y: %4.2f\r\n",volt_y);
0587 7428      1721            mov     a,#__str_13
0589 C0E0      1722            push    acc
058B 74C9      1723            mov     a,#(__str_13 >> 8)
058D C0E0      1724            push    acc
058F 7480      1725            mov     a,#0x80
0591 C0E0      1726            push    acc
0593 120000    1727            lcall   _printf
0596 E581      1728            mov     a,sp
0598 24F9      1729            add     a,#0xf9
059A F581      1730            mov     sp,a
059C           1731   ;        EFM8_JDY40_test.c:465: waitms(500);
059C 9001F4    1732            mov     dptr,#0x01F4
059F 120000    1733            lcall   _waitms
05A2 020000    1734            ljmp    L026002?
05A5           1735            rseg R_CSEG
05A5           1736   
0000           1737            rseg R_XINIT
0000           1738   
0000           1739            rseg R_CONST
0000           1740   __str_0:
0000 436F6D6D  1741            db 'Command: %s'
     616E643A
     202573
000B 00        1742            db 0x00
000C           1743   __str_1:
000C 52657370  1744            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1745            db 0x0D
0019 0A        1746            db 0x0A
001A 00        1747            db 0x00
001B           1748   __str_2:
001B 0D        1749            db 0x0D
001C 0A        1750            db 0x0A
001D 4A44592D  1751            db 'JDY-40 test'
     34302074
     657374
0028 0D        1752            db 0x0D
0029 0A        1753            db 0x0A
002A 00        1754            db 0x00
002B           1755   __str_3:
002B 41542B44  1756            db 'AT+DVID9944'
     56494439
     393434
0036 0D        1757            db 0x0D
0037 0A        1758            db 0x0A
0038 00        1759            db 0x00
0039           1760   __str_4:
0039 41542B56  1761            db 'AT+VER'
     4552
003F 0D        1762            db 0x0D
0040 0A        1763            db 0x0A
0041 00        1764            db 0x00
0042           1765   __str_5:
0042 41542B42  1766            db 'AT+BAUD'
     415544
0049 0D        1767            db 0x0D
004A 0A        1768            db 0x0A
004B 00        1769            db 0x00
004C           1770   __str_6:
004C 41542B52  1771            db 'AT+RFID'
     464944
0053 0D        1772            db 0x0D
0054 0A        1773            db 0x0A
0055 00        1774            db 0x00
0056           1775   __str_7:
0056 41542B44  1776            db 'AT+DVID'
     564944
005D 0D        1777            db 0x0D
005E 0A        1778            db 0x0A
005F 00        1779            db 0x00
0060           1780   __str_8:
0060 41542B52  1781            db 'AT+RFC'
     4643
0066 0D        1782            db 0x0D
0067 0A        1783            db 0x0A
0068 00        1784            db 0x00
0069           1785   __str_9:
0069 41542B50  1786            db 'AT+POWE'
     4F5745
0070 0D        1787            db 0x0D
0071 0A        1788            db 0x0A
0072 00        1789            db 0x00
0073           1790   __str_10:
0073 41542B43  1791            db 'AT+CLSS'
     4C5353
007A 0D        1792            db 0x0D
007B 0A        1793            db 0x0A
007C 00        1794            db 0x00
007D           1795   __str_11:
007D 0D        1796            db 0x0D
007E 50726573  1797            db 'Press and hold the BOOT button to transmit.'
     7320616E
     6420686F
     6C642074
     68652042
     4F4F5420
     62757474
     6F6E2074
     6F207472
     616E736D
     69742E
00A9 0D        1798            db 0x0D
00AA 0A        1799            db 0x0A
00AB 00        1800            db 0x00
00AC           1801   __str_12:
00AC 783A2025  1802            db 'x: %4.2f'
     342E3266
00B4 0D        1803            db 0x0D
00B5 0A        1804            db 0x0A
00B6 00        1805            db 0x00
00B7           1806   __str_13:
00B7 793A2025  1807            db 'y: %4.2f'
     342E3266
00BF 0D        1808            db 0x0D
00C0 0A        1809            db 0x0A
00C1 00        1810            db 0x00
00C2           1811   
0003           1812            CSEG
0003           1813   
0003           1814   end
