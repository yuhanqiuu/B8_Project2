0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
<<<<<<< HEAD
0000              4   ; This file was generated Fri Mar 22 17:16:22 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _LCDprint
0000             30            public _LCD_4BIT
0000             31            public _WriteCommand
0000             32            public _WriteData
0000             33            public _LCD_byte
0000             34            public _LCD_pulse
0000             35            public _SendATCommand
0000             36            public _waitms_or_RI1
0000             37            public _RXU1
0000             38            public _getstr1
0000             39            public _getchar1_with_timeout
0000             40            public _getchar1
0000             41            public _sendstr1
0000             42            public _putchar1
0000             43            public _UART1_Init
0000             44            public _Volts_at_Pin
0000             45            public _Get_ADC
0000             46            public _ADC_at_Pin
0000             47            public _InitPinADC
0000             48            public _waitms
0000             49            public _Timer2_ISR
0000             50            public _TIMER2_Init
0000             51            public _TIMER0_Init
0000             52            public _Timer3us
0000             53            public _InitADC
0000             54            public __c51_external_startup
0000             55            public _LCDprint_PARM_3
0000             56            public _buff
0000             57            public _LCDprint_PARM_2
0000             58   ;--------------------------------------------------------
0000             59   ; Special Function Registers
0000             60   ;--------------------------------------------------------
0000             61   _ACC            DATA 0xe0
0000             62   _ADC0ASAH       DATA 0xb6
0000             63   _ADC0ASAL       DATA 0xb5
0000             64   _ADC0ASCF       DATA 0xa1
0000             65   _ADC0ASCT       DATA 0xc7
0000             66   _ADC0CF0        DATA 0xbc
0000             67   _ADC0CF1        DATA 0xb9
0000             68   _ADC0CF2        DATA 0xdf
0000             69   _ADC0CN0        DATA 0xe8
0000             70   _ADC0CN1        DATA 0xb2
0000             71   _ADC0CN2        DATA 0xb3
0000             72   _ADC0GTH        DATA 0xc4
0000             73   _ADC0GTL        DATA 0xc3
0000             74   _ADC0H          DATA 0xbe
0000             75   _ADC0L          DATA 0xbd
0000             76   _ADC0LTH        DATA 0xc6
0000             77   _ADC0LTL        DATA 0xc5
0000             78   _ADC0MX         DATA 0xbb
0000             79   _B              DATA 0xf0
0000             80   _CKCON0         DATA 0x8e
0000             81   _CKCON1         DATA 0xa6
0000             82   _CLEN0          DATA 0xc6
0000             83   _CLIE0          DATA 0xc7
0000             84   _CLIF0          DATA 0xe8
0000             85   _CLKSEL         DATA 0xa9
0000             86   _CLOUT0         DATA 0xd1
0000             87   _CLU0CF         DATA 0xb1
0000             88   _CLU0FN         DATA 0xaf
0000             89   _CLU0MX         DATA 0x84
0000             90   _CLU1CF         DATA 0xb3
0000             91   _CLU1FN         DATA 0xb2
0000             92   _CLU1MX         DATA 0x85
0000             93   _CLU2CF         DATA 0xb6
0000             94   _CLU2FN         DATA 0xb5
0000             95   _CLU2MX         DATA 0x91
0000             96   _CLU3CF         DATA 0xbf
0000             97   _CLU3FN         DATA 0xbe
0000             98   _CLU3MX         DATA 0xae
0000             99   _CMP0CN0        DATA 0x9b
0000            100   _CMP0CN1        DATA 0x99
0000            101   _CMP0MD         DATA 0x9d
0000            102   _CMP0MX         DATA 0x9f
0000            103   _CMP1CN0        DATA 0xbf
0000            104   _CMP1CN1        DATA 0xac
0000            105   _CMP1MD         DATA 0xab
0000            106   _CMP1MX         DATA 0xaa
0000            107   _CRC0CN0        DATA 0xce
0000            108   _CRC0CN1        DATA 0x86
0000            109   _CRC0CNT        DATA 0xd3
0000            110   _CRC0DAT        DATA 0xcb
0000            111   _CRC0FLIP       DATA 0xcf
0000            112   _CRC0IN         DATA 0xca
0000            113   _CRC0ST         DATA 0xd2
0000            114   _DAC0CF0        DATA 0x91
0000            115   _DAC0CF1        DATA 0x92
0000            116   _DAC0H          DATA 0x85
0000            117   _DAC0L          DATA 0x84
0000            118   _DAC1CF0        DATA 0x93
0000            119   _DAC1CF1        DATA 0x94
0000            120   _DAC1H          DATA 0x8a
0000            121   _DAC1L          DATA 0x89
0000            122   _DAC2CF0        DATA 0x95
0000            123   _DAC2CF1        DATA 0x96
0000            124   _DAC2H          DATA 0x8c
0000            125   _DAC2L          DATA 0x8b
0000            126   _DAC3CF0        DATA 0x9a
0000            127   _DAC3CF1        DATA 0x9c
0000            128   _DAC3H          DATA 0x8e
0000            129   _DAC3L          DATA 0x8d
0000            130   _DACGCF0        DATA 0x88
0000            131   _DACGCF1        DATA 0x98
0000            132   _DACGCF2        DATA 0xa2
0000            133   _DERIVID        DATA 0xad
0000            134   _DEVICEID       DATA 0xb5
0000            135   _DPH            DATA 0x83
0000            136   _DPL            DATA 0x82
0000            137   _EIE1           DATA 0xe6
0000            138   _EIE2           DATA 0xf3
0000            139   _EIP1           DATA 0xbb
0000            140   _EIP1H          DATA 0xee
0000            141   _EIP2           DATA 0xed
0000            142   _EIP2H          DATA 0xf6
0000            143   _EMI0CN         DATA 0xe7
0000            144   _FLKEY          DATA 0xb7
0000            145   _HFO0CAL        DATA 0xc7
0000            146   _HFO1CAL        DATA 0xd6
0000            147   _HFOCN          DATA 0xef
0000            148   _I2C0ADM        DATA 0xff
0000            149   _I2C0CN0        DATA 0xba
0000            150   _I2C0DIN        DATA 0xbc
0000            151   _I2C0DOUT       DATA 0xbb
0000            152   _I2C0FCN0       DATA 0xad
0000            153   _I2C0FCN1       DATA 0xab
0000            154   _I2C0FCT        DATA 0xf5
0000            155   _I2C0SLAD       DATA 0xbd
0000            156   _I2C0STAT       DATA 0xb9
0000            157   _IE             DATA 0xa8
0000            158   _IP             DATA 0xb8
0000            159   _IPH            DATA 0xf2
0000            160   _IT01CF         DATA 0xe4
0000            161   _LFO0CN         DATA 0xb1
0000            162   _P0             DATA 0x80
0000            163   _P0MASK         DATA 0xfe
0000            164   _P0MAT          DATA 0xfd
0000            165   _P0MDIN         DATA 0xf1
0000            166   _P0MDOUT        DATA 0xa4
0000            167   _P0SKIP         DATA 0xd4
0000            168   _P1             DATA 0x90
0000            169   _P1MASK         DATA 0xee
0000            170   _P1MAT          DATA 0xed
0000            171   _P1MDIN         DATA 0xf2
0000            172   _P1MDOUT        DATA 0xa5
0000            173   _P1SKIP         DATA 0xd5
0000            174   _P2             DATA 0xa0
0000            175   _P2MASK         DATA 0xfc
0000            176   _P2MAT          DATA 0xfb
0000            177   _P2MDIN         DATA 0xf3
0000            178   _P2MDOUT        DATA 0xa6
0000            179   _P2SKIP         DATA 0xcc
0000            180   _P3             DATA 0xb0
0000            181   _P3MDIN         DATA 0xf4
0000            182   _P3MDOUT        DATA 0x9c
0000            183   _PCA0CENT       DATA 0x9e
0000            184   _PCA0CLR        DATA 0x9c
0000            185   _PCA0CN0        DATA 0xd8
0000            186   _PCA0CPH0       DATA 0xfc
0000            187   _PCA0CPH1       DATA 0xea
0000            188   _PCA0CPH2       DATA 0xec
0000            189   _PCA0CPH3       DATA 0xf5
0000            190   _PCA0CPH4       DATA 0x85
0000            191   _PCA0CPH5       DATA 0xde
0000            192   _PCA0CPL0       DATA 0xfb
0000            193   _PCA0CPL1       DATA 0xe9
0000            194   _PCA0CPL2       DATA 0xeb
0000            195   _PCA0CPL3       DATA 0xf4
0000            196   _PCA0CPL4       DATA 0x84
0000            197   _PCA0CPL5       DATA 0xdd
0000            198   _PCA0CPM0       DATA 0xda
0000            199   _PCA0CPM1       DATA 0xdb
0000            200   _PCA0CPM2       DATA 0xdc
0000            201   _PCA0CPM3       DATA 0xae
0000            202   _PCA0CPM4       DATA 0xaf
0000            203   _PCA0CPM5       DATA 0xcc
0000            204   _PCA0H          DATA 0xfa
0000            205   _PCA0L          DATA 0xf9
0000            206   _PCA0MD         DATA 0xd9
0000            207   _PCA0POL        DATA 0x96
0000            208   _PCA0PWM        DATA 0xf7
0000            209   _PCON0          DATA 0x87
0000            210   _PCON1          DATA 0xcd
0000            211   _PFE0CN         DATA 0xc1
0000            212   _PRTDRV         DATA 0xf6
0000            213   _PSCTL          DATA 0x8f
0000            214   _PSTAT0         DATA 0xaa
0000            215   _PSW            DATA 0xd0
0000            216   _REF0CN         DATA 0xd1
0000            217   _REG0CN         DATA 0xc9
0000            218   _REVID          DATA 0xb6
0000            219   _RSTSRC         DATA 0xef
0000            220   _SBCON1         DATA 0x94
0000            221   _SBRLH1         DATA 0x96
0000            222   _SBRLL1         DATA 0x95
0000            223   _SBUF           DATA 0x99
0000            224   _SBUF0          DATA 0x99
0000            225   _SBUF1          DATA 0x92
0000            226   _SCON           DATA 0x98
0000            227   _SCON0          DATA 0x98
0000            228   _SCON1          DATA 0xc8
0000            229   _SFRPAGE        DATA 0xa7
0000            230   _SFRPGCN        DATA 0xbc
0000            231   _SFRSTACK       DATA 0xd7
0000            232   _SMB0ADM        DATA 0xd6
0000            233   _SMB0ADR        DATA 0xd7
0000            234   _SMB0CF         DATA 0xc1
0000            235   _SMB0CN0        DATA 0xc0
0000            236   _SMB0DAT        DATA 0xc2
0000            237   _SMB0FCN0       DATA 0xc3
0000            238   _SMB0FCN1       DATA 0xc4
0000            239   _SMB0FCT        DATA 0xef
0000            240   _SMB0RXLN       DATA 0xc5
0000            241   _SMB0TC         DATA 0xac
0000            242   _SMOD1          DATA 0x93
0000            243   _SP             DATA 0x81
0000            244   _SPI0CFG        DATA 0xa1
0000            245   _SPI0CKR        DATA 0xa2
0000            246   _SPI0CN0        DATA 0xf8
0000            247   _SPI0DAT        DATA 0xa3
0000            248   _SPI0FCN0       DATA 0x9a
0000            249   _SPI0FCN1       DATA 0x9b
0000            250   _SPI0FCT        DATA 0xf7
0000            251   _SPI0PCF        DATA 0xdf
0000            252   _TCON           DATA 0x88
0000            253   _TH0            DATA 0x8c
0000            254   _TH1            DATA 0x8d
0000            255   _TL0            DATA 0x8a
0000            256   _TL1            DATA 0x8b
0000            257   _TMOD           DATA 0x89
0000            258   _TMR2CN0        DATA 0xc8
0000            259   _TMR2CN1        DATA 0xfd
0000            260   _TMR2H          DATA 0xcf
0000            261   _TMR2L          DATA 0xce
0000            262   _TMR2RLH        DATA 0xcb
0000            263   _TMR2RLL        DATA 0xca
0000            264   _TMR3CN0        DATA 0x91
0000            265   _TMR3CN1        DATA 0xfe
0000            266   _TMR3H          DATA 0x95
0000            267   _TMR3L          DATA 0x94
0000            268   _TMR3RLH        DATA 0x93
0000            269   _TMR3RLL        DATA 0x92
0000            270   _TMR4CN0        DATA 0x98
0000            271   _TMR4CN1        DATA 0xff
0000            272   _TMR4H          DATA 0xa5
0000            273   _TMR4L          DATA 0xa4
0000            274   _TMR4RLH        DATA 0xa3
0000            275   _TMR4RLL        DATA 0xa2
0000            276   _TMR5CN0        DATA 0xc0
0000            277   _TMR5CN1        DATA 0xf1
0000            278   _TMR5H          DATA 0xd5
0000            279   _TMR5L          DATA 0xd4
0000            280   _TMR5RLH        DATA 0xd3
0000            281   _TMR5RLL        DATA 0xd2
0000            282   _UART0PCF       DATA 0xd9
0000            283   _UART1FCN0      DATA 0x9d
0000            284   _UART1FCN1      DATA 0xd8
0000            285   _UART1FCT       DATA 0xfa
0000            286   _UART1LIN       DATA 0x9e
0000            287   _UART1PCF       DATA 0xda
0000            288   _VDM0CN         DATA 0xff
0000            289   _WDTCN          DATA 0x97
0000            290   _XBR0           DATA 0xe1
0000            291   _XBR1           DATA 0xe2
0000            292   _XBR2           DATA 0xe3
0000            293   _XOSC0CN        DATA 0x86
0000            294   _DPTR           DATA 0x8382
0000            295   _TMR2RL         DATA 0xcbca
0000            296   _TMR3RL         DATA 0x9392
0000            297   _TMR4RL         DATA 0xa3a2
0000            298   _TMR5RL         DATA 0xd3d2
0000            299   _TMR0           DATA 0x8c8a
0000            300   _TMR1           DATA 0x8d8b
0000            301   _TMR2           DATA 0xcfce
0000            302   _TMR3           DATA 0x9594
0000            303   _TMR4           DATA 0xa5a4
0000            304   _TMR5           DATA 0xd5d4
0000            305   _SBRL1          DATA 0x9695
0000            306   _PCA0           DATA 0xfaf9
0000            307   _PCA0CP0        DATA 0xfcfb
0000            308   _PCA0CP1        DATA 0xeae9
0000            309   _PCA0CP2        DATA 0xeceb
0000            310   _PCA0CP3        DATA 0xf5f4
0000            311   _PCA0CP4        DATA 0x8584
0000            312   _PCA0CP5        DATA 0xdedd
0000            313   _ADC0ASA        DATA 0xb6b5
0000            314   _ADC0GT         DATA 0xc4c3
0000            315   _ADC0           DATA 0xbebd
0000            316   _ADC0LT         DATA 0xc6c5
0000            317   _DAC0           DATA 0x8584
0000            318   _DAC1           DATA 0x8a89
0000            319   _DAC2           DATA 0x8c8b
0000            320   _DAC3           DATA 0x8e8d
0000            321   ;--------------------------------------------------------
0000            322   ; special function bits
0000            323   ;--------------------------------------------------------
0000            324   _ACC_0          BIT 0xe0
0000            325   _ACC_1          BIT 0xe1
0000            326   _ACC_2          BIT 0xe2
0000            327   _ACC_3          BIT 0xe3
0000            328   _ACC_4          BIT 0xe4
0000            329   _ACC_5          BIT 0xe5
0000            330   _ACC_6          BIT 0xe6
0000            331   _ACC_7          BIT 0xe7
0000            332   _TEMPE          BIT 0xe8
0000            333   _ADGN0          BIT 0xe9
0000            334   _ADGN1          BIT 0xea
0000            335   _ADWINT         BIT 0xeb
0000            336   _ADBUSY         BIT 0xec
0000            337   _ADINT          BIT 0xed
0000            338   _IPOEN          BIT 0xee
0000            339   _ADEN           BIT 0xef
0000            340   _B_0            BIT 0xf0
0000            341   _B_1            BIT 0xf1
0000            342   _B_2            BIT 0xf2
0000            343   _B_3            BIT 0xf3
0000            344   _B_4            BIT 0xf4
0000            345   _B_5            BIT 0xf5
0000            346   _B_6            BIT 0xf6
0000            347   _B_7            BIT 0xf7
0000            348   _C0FIF          BIT 0xe8
0000            349   _C0RIF          BIT 0xe9
0000            350   _C1FIF          BIT 0xea
0000            351   _C1RIF          BIT 0xeb
0000            352   _C2FIF          BIT 0xec
0000            353   _C2RIF          BIT 0xed
0000            354   _C3FIF          BIT 0xee
0000            355   _C3RIF          BIT 0xef
0000            356   _D1SRC0         BIT 0x88
0000            357   _D1SRC1         BIT 0x89
0000            358   _D1AMEN         BIT 0x8a
0000            359   _D01REFSL       BIT 0x8b
0000            360   _D3SRC0         BIT 0x8c
0000            361   _D3SRC1         BIT 0x8d
0000            362   _D3AMEN         BIT 0x8e
0000            363   _D23REFSL       BIT 0x8f
0000            364   _D0UDIS         BIT 0x98
0000            365   _D1UDIS         BIT 0x99
0000            366   _D2UDIS         BIT 0x9a
0000            367   _D3UDIS         BIT 0x9b
0000            368   _EX0            BIT 0xa8
0000            369   _ET0            BIT 0xa9
0000            370   _EX1            BIT 0xaa
0000            371   _ET1            BIT 0xab
0000            372   _ES0            BIT 0xac
0000            373   _ET2            BIT 0xad
0000            374   _ESPI0          BIT 0xae
0000            375   _EA             BIT 0xaf
0000            376   _PX0            BIT 0xb8
0000            377   _PT0            BIT 0xb9
0000            378   _PX1            BIT 0xba
0000            379   _PT1            BIT 0xbb
0000            380   _PS0            BIT 0xbc
0000            381   _PT2            BIT 0xbd
0000            382   _PSPI0          BIT 0xbe
0000            383   _P0_0           BIT 0x80
0000            384   _P0_1           BIT 0x81
0000            385   _P0_2           BIT 0x82
0000            386   _P0_3           BIT 0x83
0000            387   _P0_4           BIT 0x84
0000            388   _P0_5           BIT 0x85
0000            389   _P0_6           BIT 0x86
0000            390   _P0_7           BIT 0x87
0000            391   _P1_0           BIT 0x90
0000            392   _P1_1           BIT 0x91
0000            393   _P1_2           BIT 0x92
0000            394   _P1_3           BIT 0x93
0000            395   _P1_4           BIT 0x94
0000            396   _P1_5           BIT 0x95
0000            397   _P1_6           BIT 0x96
0000            398   _P1_7           BIT 0x97
0000            399   _P2_0           BIT 0xa0
0000            400   _P2_1           BIT 0xa1
0000            401   _P2_2           BIT 0xa2
0000            402   _P2_3           BIT 0xa3
0000            403   _P2_4           BIT 0xa4
0000            404   _P2_5           BIT 0xa5
0000            405   _P2_6           BIT 0xa6
0000            406   _P3_0           BIT 0xb0
0000            407   _P3_1           BIT 0xb1
0000            408   _P3_2           BIT 0xb2
0000            409   _P3_3           BIT 0xb3
0000            410   _P3_4           BIT 0xb4
0000            411   _P3_7           BIT 0xb7
0000            412   _CCF0           BIT 0xd8
0000            413   _CCF1           BIT 0xd9
0000            414   _CCF2           BIT 0xda
0000            415   _CCF3           BIT 0xdb
0000            416   _CCF4           BIT 0xdc
0000            417   _CCF5           BIT 0xdd
0000            418   _CR             BIT 0xde
0000            419   _CF             BIT 0xdf
0000            420   _PARITY         BIT 0xd0
0000            421   _F1             BIT 0xd1
0000            422   _OV             BIT 0xd2
0000            423   _RS0            BIT 0xd3
0000            424   _RS1            BIT 0xd4
0000            425   _F0             BIT 0xd5
0000            426   _AC             BIT 0xd6
0000            427   _CY             BIT 0xd7
0000            428   _RI             BIT 0x98
0000            429   _TI             BIT 0x99
0000            430   _RB8            BIT 0x9a
0000            431   _TB8            BIT 0x9b
0000            432   _REN            BIT 0x9c
0000            433   _CE             BIT 0x9d
0000            434   _SMODE          BIT 0x9e
0000            435   _RI1            BIT 0xc8
0000            436   _TI1            BIT 0xc9
0000            437   _RBX1           BIT 0xca
0000            438   _TBX1           BIT 0xcb
0000            439   _REN1           BIT 0xcc
0000            440   _PERR1          BIT 0xcd
0000            441   _OVR1           BIT 0xce
0000            442   _SI             BIT 0xc0
0000            443   _ACK            BIT 0xc1
0000            444   _ARBLOST        BIT 0xc2
0000            445   _ACKRQ          BIT 0xc3
0000            446   _STO            BIT 0xc4
0000            447   _STA            BIT 0xc5
0000            448   _TXMODE         BIT 0xc6
0000            449   _MASTER         BIT 0xc7
0000            450   _SPIEN          BIT 0xf8
0000            451   _TXNF           BIT 0xf9
0000            452   _NSSMD0         BIT 0xfa
0000            453   _NSSMD1         BIT 0xfb
0000            454   _RXOVRN         BIT 0xfc
0000            455   _MODF           BIT 0xfd
0000            456   _WCOL           BIT 0xfe
0000            457   _SPIF           BIT 0xff
0000            458   _IT0            BIT 0x88
0000            459   _IE0            BIT 0x89
0000            460   _IT1            BIT 0x8a
0000            461   _IE1            BIT 0x8b
0000            462   _TR0            BIT 0x8c
0000            463   _TF0            BIT 0x8d
0000            464   _TR1            BIT 0x8e
0000            465   _TF1            BIT 0x8f
0000            466   _T2XCLK0        BIT 0xc8
0000            467   _T2XCLK1        BIT 0xc9
0000            468   _TR2            BIT 0xca
0000            469   _T2SPLIT        BIT 0xcb
0000            470   _TF2CEN         BIT 0xcc
0000            471   _TF2LEN         BIT 0xcd
0000            472   _TF2L           BIT 0xce
0000            473   _TF2H           BIT 0xcf
0000            474   _T4XCLK0        BIT 0x98
0000            475   _T4XCLK1        BIT 0x99
0000            476   _TR4            BIT 0x9a
0000            477   _T4SPLIT        BIT 0x9b
0000            478   _TF4CEN         BIT 0x9c
0000            479   _TF4LEN         BIT 0x9d
0000            480   _TF4L           BIT 0x9e
0000            481   _TF4H           BIT 0x9f
0000            482   _T5XCLK0        BIT 0xc0
0000            483   _T5XCLK1        BIT 0xc1
0000            484   _TR5            BIT 0xc2
0000            485   _T5SPLIT        BIT 0xc3
0000            486   _TF5CEN         BIT 0xc4
0000            487   _TF5LEN         BIT 0xc5
0000            488   _TF5L           BIT 0xc6
0000            489   _TF5H           BIT 0xc7
0000            490   _RIE            BIT 0xd8
0000            491   _RXTO0          BIT 0xd9
0000            492   _RXTO1          BIT 0xda
0000            493   _RFRQ           BIT 0xdb
0000            494   _TIE            BIT 0xdc
0000            495   _TXHOLD         BIT 0xdd
0000            496   _TXNF1          BIT 0xde
0000            497   _TFRQ           BIT 0xdf
0000            498   ;--------------------------------------------------------
0000            499   ; overlayable register banks
0000            500   ;--------------------------------------------------------
0000            501            rbank0 segment data overlay
0000            502   ;--------------------------------------------------------
0000            503   ; internal ram data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_DSEG
0000            506   _LCDprint_PARM_2:
0000            507            ds 1
0001            508   _main_volt_x_1_123:
0001            509            ds 4
0005            510   ;--------------------------------------------------------
0005            511   ; overlayable items in internal ram 
0005            512   ;--------------------------------------------------------
0000            513            rseg    R_OSEG
0000            514            rseg    R_OSEG
0000            515   _InitPinADC_PARM_2:
0000            516            ds 1
0001            517            rseg    R_OSEG
0001            518            rseg    R_OSEG
0001            519            rseg    R_OSEG
0001            520   ;--------------------------------------------------------
0001            521   ; indirectly addressable internal ram data
0001            522   ;--------------------------------------------------------
0000            523            rseg R_ISEG
0000            524   _buff:
0000            525            ds 20
0014            526   ;--------------------------------------------------------
0014            527   ; absolute internal ram data
0014            528   ;--------------------------------------------------------
0000            529            DSEG
0000            530   ;--------------------------------------------------------
0000            531   ; bit data
0000            532   ;--------------------------------------------------------
0000            533            rseg R_BSEG
0000            534   _LCDprint_PARM_3:
0000            535            DBIT    1
0001            536   ;--------------------------------------------------------
0001            537   ; paged external ram data
0001            538   ;--------------------------------------------------------
0000            539            rseg R_PSEG
0000            540   ;--------------------------------------------------------
0000            541   ; external ram data
0000            542   ;--------------------------------------------------------
0000            543            rseg R_XSEG
0000            544   ;--------------------------------------------------------
0000            545   ; absolute external ram data
0000            546   ;--------------------------------------------------------
0000            547            XSEG
0000            548   ;--------------------------------------------------------
0000            549   ; external initialized ram data
0000            550   ;--------------------------------------------------------
0000            551            rseg R_IXSEG
0000            552            rseg R_HOME
0000            553            rseg R_GSINIT
0000            554            rseg R_CSEG
0000            555   ;--------------------------------------------------------
0000            556   ; Reset entry point and interrupt vectors
0000            557   ;--------------------------------------------------------
0000            558            CSEG at 0x0000
0000 020000     559            ljmp    _crt0
0003            560   ;--------------------------------------------------------
0003            561   ; global & static initialisations
0003            562   ;--------------------------------------------------------
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_GSINIT
0000            566   ;--------------------------------------------------------
0000            567   ; data variables initialization
0000            568   ;--------------------------------------------------------
0000            569            rseg R_DINIT
0000            570            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            571   ;--------------------------------------------------------
0000            572   ; code
0000            573   ;--------------------------------------------------------
0000            574            rseg R_CSEG
0000            575   ;------------------------------------------------------------
0000            576   ;Allocation info for local variables in function '_c51_external_startup'
0000            577   ;------------------------------------------------------------
0000            578   ;------------------------------------------------------------
0000            579   ;        EFM8_JDY40_test.c:35: char _c51_external_startup (void)
0000            580   ;        -----------------------------------------
0000            581   ;         function _c51_external_startup
0000            582   ;        -----------------------------------------
0000            583   __c51_external_startup:
0000            584            using   0
0000            585   ;        EFM8_JDY40_test.c:38: SFRPAGE = 0x00;
0000 75A700     586            mov     _SFRPAGE,#0x00
0003            587   ;        EFM8_JDY40_test.c:39: WDTCN = 0xDE; //First key
0003 7597DE     588            mov     _WDTCN,#0xDE
0006            589   ;        EFM8_JDY40_test.c:40: WDTCN = 0xAD; //Second key
0006 7597AD     590            mov     _WDTCN,#0xAD
0009            591   ;        EFM8_JDY40_test.c:42: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     592            mov     _VDM0CN,#0x80
000C            593   ;        EFM8_JDY40_test.c:43: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     594            mov     _RSTSRC,#0x06
000F            595   ;        EFM8_JDY40_test.c:50: SFRPAGE = 0x10;
000F 75A710     596            mov     _SFRPAGE,#0x10
0012            597   ;        EFM8_JDY40_test.c:51: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     598            mov     _PFE0CN,#0x20
0015            599   ;        EFM8_JDY40_test.c:52: SFRPAGE = 0x00;
0015 75A700     600            mov     _SFRPAGE,#0x00
0018            601   ;        EFM8_JDY40_test.c:73: CLKSEL = 0x00;
0018 75A900     602            mov     _CLKSEL,#0x00
001B            603   ;        EFM8_JDY40_test.c:74: CLKSEL = 0x00;
001B 75A900     604            mov     _CLKSEL,#0x00
001E            605   ;        EFM8_JDY40_test.c:75: while ((CLKSEL & 0x80) == 0);
001E            606   L002001?:
001E E5A9       607            mov     a,_CLKSEL
0020 30E760     608            jnb     acc.7,L002001?
0023            609   ;        EFM8_JDY40_test.c:76: CLKSEL = 0x03;
0023 75A903     610            mov     _CLKSEL,#0x03
0026            611   ;        EFM8_JDY40_test.c:77: CLKSEL = 0x03;
0026 75A903     612            mov     _CLKSEL,#0x03
0029            613   ;        EFM8_JDY40_test.c:78: while ((CLKSEL & 0x80) == 0);
0029            614   L002004?:
0029 E5A9       615            mov     a,_CLKSEL
002B 30E7E0     616            jnb     acc.7,L002004?
002E            617   ;        EFM8_JDY40_test.c:83: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     618            orl     _P0MDOUT,#0x11
0031            619   ;        EFM8_JDY40_test.c:84: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     620            orl     _P2MDOUT,#0x01
0034            621   ;        EFM8_JDY40_test.c:85: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     622            mov     _XBR0,#0x01
0037            623   ;        EFM8_JDY40_test.c:86: XBR1     = 0X00;
0037 75E200     624            mov     _XBR1,#0x00
003A            625   ;        EFM8_JDY40_test.c:87: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     626            mov     _XBR2,#0x41
003D            627   ;        EFM8_JDY40_test.c:93: SCON0 = 0x10;
003D 759810     628            mov     _SCON0,#0x10
0040            629   ;        EFM8_JDY40_test.c:94: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     630            mov     _TH1,#0xE6
0043            631   ;        EFM8_JDY40_test.c:95: TL1 = TH1;      // Init Timer1
0043 858D8B     632            mov     _TL1,_TH1
0046            633   ;        EFM8_JDY40_test.c:96: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     634            anl     _TMOD,#0x0F
0049            635   ;        EFM8_JDY40_test.c:97: TMOD |=  0x20;                       
0049 438920     636            orl     _TMOD,#0x20
004C            637   ;        EFM8_JDY40_test.c:98: TR1 = 1; // START Timer1
004C D28E       638            setb    _TR1
004E            639   ;        EFM8_JDY40_test.c:99: TI = 1;  // Indicate TX0 ready
004E D299       640            setb    _TI
0050            641   ;        EFM8_JDY40_test.c:101: return 0;
0050 758200     642            mov     dpl,#0x00
0053 22         643            ret
0054            644   ;------------------------------------------------------------
0054            645   ;Allocation info for local variables in function 'InitADC'
0054            646   ;------------------------------------------------------------
0054            647   ;------------------------------------------------------------
0054            648   ;        EFM8_JDY40_test.c:104: void InitADC (void)
0054            649   ;        -----------------------------------------
0054            650   ;         function InitADC
0054            651   ;        -----------------------------------------
0054            652   _InitADC:
0054            653   ;        EFM8_JDY40_test.c:106: SFRPAGE = 0x00;
0054 75A700     654            mov     _SFRPAGE,#0x00
0057            655   ;        EFM8_JDY40_test.c:107: ADEN=0; // Disable ADC
0057 C2EF       656            clr     _ADEN
0059            657   ;        EFM8_JDY40_test.c:112: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     658            mov     _ADC0CN1,#0x80
005C            659   ;        EFM8_JDY40_test.c:116: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     660            mov     _ADC0CF0,#0x20
005F            661   ;        EFM8_JDY40_test.c:120: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     662            mov     _ADC0CF1,#0x1E
0062            663   ;        EFM8_JDY40_test.c:129: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     664            mov     _ADC0CN0,#0x00
0065            665   ;        EFM8_JDY40_test.c:134: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     666            mov     _ADC0CF2,#0x3F
0068            667   ;        EFM8_JDY40_test.c:138: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     668            mov     _ADC0CN2,#0x00
006B            669   ;        EFM8_JDY40_test.c:140: ADEN=1; // Enable ADC
006B D2EF       670            setb    _ADEN
006D 22         671            ret
006E            672   ;------------------------------------------------------------
006E            673   ;Allocation info for local variables in function 'Timer3us'
006E            674   ;------------------------------------------------------------
006E            675   ;us                        Allocated to registers r2 
006E            676   ;i                         Allocated to registers r3 
006E            677   ;------------------------------------------------------------
006E            678   ;        EFM8_JDY40_test.c:145: void Timer3us(unsigned char us)
006E            679   ;        -----------------------------------------
006E            680   ;         function Timer3us
006E            681   ;        -----------------------------------------
006E            682   _Timer3us:
006E AA82       683            mov     r2,dpl
0070            684   ;        EFM8_JDY40_test.c:150: CKCON0|=0b_0100_0000;
0070 438E40     685            orl     _CKCON0,#0x40
0073            686   ;        EFM8_JDY40_test.c:152: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     687            mov     _TMR3RL,#0xB8
0076 7593FF     688            mov     (_TMR3RL >> 8),#0xFF
0079            689   ;        EFM8_JDY40_test.c:153: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     690            mov     _TMR3,_TMR3RL
007C 859395     691            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            692   ;        EFM8_JDY40_test.c:155: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     693            mov     _TMR3CN0,#0x04
0082            694   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       695            mov     r3,#0x00
0084            696   L004004?:
0084 C3         697            clr     c
0085 EB         698            mov     a,r3
0086 9A         699            subb    a,r2
0087 5000       700            jnc     L004007?
0089            701   ;        EFM8_JDY40_test.c:158: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            702   L004001?:
0089 E591       703            mov     a,_TMR3CN0
008B 30E7E0     704            jnb     acc.7,L004001?
008E            705   ;        EFM8_JDY40_test.c:159: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     706            anl     _TMR3CN0,#0x7F
0091            707   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         708            inc     r3
0092 8000       709            sjmp    L004004?
0094            710   L004007?:
0094            711   ;        EFM8_JDY40_test.c:161: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     712            mov     _TMR3CN0,#0x00
0097 22         713            ret
0098            714   ;------------------------------------------------------------
0098            715   ;Allocation info for local variables in function 'TIMER0_Init'
0098            716   ;------------------------------------------------------------
0098            717   ;------------------------------------------------------------
0098            718   ;        EFM8_JDY40_test.c:164: void TIMER0_Init(void)
0098            719   ;        -----------------------------------------
0098            720   ;         function TIMER0_Init
0098            721   ;        -----------------------------------------
0098            722   _TIMER0_Init:
0098            723   ;        EFM8_JDY40_test.c:166: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0098 5389F0     724            anl     _TMOD,#0xF0
009B            725   ;        EFM8_JDY40_test.c:167: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
009B 438901     726            orl     _TMOD,#0x01
009E            727   ;        EFM8_JDY40_test.c:168: TR0=0; // Stop Timer/Counter 0
009E C28C       728            clr     _TR0
00A0 22         729            ret
00A1            730   ;------------------------------------------------------------
00A1            731   ;Allocation info for local variables in function 'TIMER2_Init'
00A1            732   ;------------------------------------------------------------
00A1            733   ;------------------------------------------------------------
00A1            734   ;        EFM8_JDY40_test.c:174: void TIMER2_Init(void){
00A1            735   ;        -----------------------------------------
00A1            736   ;         function TIMER2_Init
00A1            737   ;        -----------------------------------------
00A1            738   _TIMER2_Init:
00A1            739   ;        EFM8_JDY40_test.c:176: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
00A1 75C800     740            mov     _TMR2CN0,#0x00
00A4            741   ;        EFM8_JDY40_test.c:177: CKCON0|=0b_0001_0000;
00A4 438E10     742            orl     _CKCON0,#0x10
00A7            743   ;        EFM8_JDY40_test.c:178: TMR2RL=(-(SYSCLK/(2*DEFAULT_F))); // Initialize reload value
00A7 75CAEE     744            mov     _TMR2RL,#0xEE
00AA 75CBF6     745            mov     (_TMR2RL >> 8),#0xF6
00AD            746   ;        EFM8_JDY40_test.c:179: TMR2=0xffff;   // Set to reload immediately
00AD 75CEFF     747            mov     _TMR2,#0xFF
00B0 75CFFF     748            mov     (_TMR2 >> 8),#0xFF
00B3            749   ;        EFM8_JDY40_test.c:180: ET2=1;         // Enable Timer2 interrupts
00B3 D2AD       750            setb    _ET2
00B5            751   ;        EFM8_JDY40_test.c:181: TR2=1;         // Start Timer2
00B5 D2CA       752            setb    _TR2
00B7            753   ;        EFM8_JDY40_test.c:182: EA=1; // Global interrupt enable
00B7 D2AF       754            setb    _EA
00B9 22         755            ret
00BA            756   ;------------------------------------------------------------
00BA            757   ;Allocation info for local variables in function 'Timer2_ISR'
00BA            758   ;------------------------------------------------------------
00BA            759   ;------------------------------------------------------------
00BA            760   ;        EFM8_JDY40_test.c:185: void Timer2_ISR (void) //interrupt INTERRUPT_TIMER2
00BA            761   ;        -----------------------------------------
00BA            762   ;         function Timer2_ISR
00BA            763   ;        -----------------------------------------
00BA            764   _Timer2_ISR:
00BA            765   ;        EFM8_JDY40_test.c:187: TF2H = 0; // Clear Timer2 interrupt flag
00BA C2CF       766            clr     _TF2H
00BC            767   ;        EFM8_JDY40_test.c:188: OUT0=!OUT0;
00BC B2B3       768            cpl     _P3_3
00BE 22         769            ret
00BF            770   ;------------------------------------------------------------
00BF            771   ;Allocation info for local variables in function 'waitms'
00BF            772   ;------------------------------------------------------------
00BF            773   ;ms                        Allocated to registers r2 r3 
00BF            774   ;j                         Allocated to registers r4 r5 
00BF            775   ;k                         Allocated to registers r6 
00BF            776   ;------------------------------------------------------------
00BF            777   ;        EFM8_JDY40_test.c:192: void waitms (unsigned int ms)
00BF            778   ;        -----------------------------------------
00BF            779   ;         function waitms
00BF            780   ;        -----------------------------------------
00BF            781   _waitms:
00BF AA82       782            mov     r2,dpl
00C1 AB83       783            mov     r3,dph
00C3            784   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00C3 7C00       785            mov     r4,#0x00
00C5 7D00       786            mov     r5,#0x00
00C7            787   L008005?:
00C7 C3         788            clr     c
00C8 EC         789            mov     a,r4
00C9 9A         790            subb    a,r2
00CA ED         791            mov     a,r5
00CB 9B         792            subb    a,r3
00CC 5000       793            jnc     L008009?
00CE            794   ;        EFM8_JDY40_test.c:197: for (k=0; k<4; k++) Timer3us(250);
00CE 7E00       795            mov     r6,#0x00
00D0            796   L008001?:
00D0 BE0420     797            cjne    r6,#0x04,L008018?
00D3            798   L008018?:
00D3 5000       799            jnc     L008007?
00D5 7582FA     800            mov     dpl,#0xFA
00D8 C002       801            push    ar2
00DA C003       802            push    ar3
00DC C004       803            push    ar4
00DE C005       804            push    ar5
00E0 C006       805            push    ar6
00E2 120000     806            lcall   _Timer3us
00E5 D006       807            pop     ar6
00E7 D005       808            pop     ar5
00E9 D004       809            pop     ar4
00EB D003       810            pop     ar3
00ED D002       811            pop     ar2
00EF 0E         812            inc     r6
00F0 8000       813            sjmp    L008001?
00F2            814   L008007?:
00F2            815   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00F2 0C         816            inc     r4
00F3 BC0060     817            cjne    r4,#0x00,L008005?
00F6 0D         818            inc     r5
00F7 8000       819            sjmp    L008005?
00F9            820   L008009?:
00F9 22         821            ret
00FA            822   ;------------------------------------------------------------
00FA            823   ;Allocation info for local variables in function 'InitPinADC'
00FA            824   ;------------------------------------------------------------
00FA            825   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00FA            826   ;portno                    Allocated to registers r2 
00FA            827   ;mask                      Allocated to registers r3 
00FA            828   ;------------------------------------------------------------
00FA            829   ;        EFM8_JDY40_test.c:200: void InitPinADC (unsigned char portno, unsigned char pinno)
00FA            830   ;        -----------------------------------------
00FA            831   ;         function InitPinADC
00FA            832   ;        -----------------------------------------
00FA            833   _InitPinADC:
00FA AA82       834            mov     r2,dpl
00FC            835   ;        EFM8_JDY40_test.c:204: mask=1<<pinno;
00FC 8560F0     836            mov     b,_InitPinADC_PARM_2
00FF 05F0       837            inc     b
0101 7401       838            mov     a,#0x01
0103 8000       839            sjmp    L009013?
0105            840   L009011?:
0105 25E0       841            add     a,acc
0107            842   L009013?:
0107 D5F020     843            djnz    b,L009011?
010A FB         844            mov     r3,a
010B            845   ;        EFM8_JDY40_test.c:206: SFRPAGE = 0x20;
010B 75A720     846            mov     _SFRPAGE,#0x20
010E            847   ;        EFM8_JDY40_test.c:207: switch (portno)
010E BA0060     848            cjne    r2,#0x00,L009014?
0111 8000       849            sjmp    L009001?
0113            850   L009014?:
0113 BA01E0     851            cjne    r2,#0x01,L009015?
0116 8000       852            sjmp    L009002?
0118            853   L009015?:
0118            854   ;        EFM8_JDY40_test.c:209: case 0:
0118 BA0260     855            cjne    r2,#0x02,L009005?
011B 8000       856            sjmp    L009003?
011D            857   L009001?:
011D            858   ;        EFM8_JDY40_test.c:210: P0MDIN &= (~mask); // Set pin as analog input
011D EB         859            mov     a,r3
011E F4         860            cpl     a
011F FA         861            mov     r2,a
0120 52F1       862            anl     _P0MDIN,a
0122            863   ;        EFM8_JDY40_test.c:211: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0122 EB         864            mov     a,r3
0123 42D4       865            orl     _P0SKIP,a
0125            866   ;        EFM8_JDY40_test.c:212: break;
0125            867   ;        EFM8_JDY40_test.c:213: case 1:
0125 8000       868            sjmp    L009005?
0127            869   L009002?:
0127            870   ;        EFM8_JDY40_test.c:214: P1MDIN &= (~mask); // Set pin as analog input
0127 EB         871            mov     a,r3
0128 F4         872            cpl     a
0129 FA         873            mov     r2,a
012A 52F2       874            anl     _P1MDIN,a
012C            875   ;        EFM8_JDY40_test.c:215: P1SKIP |= mask; // Skip Crossbar decoding for this pin
012C EB         876            mov     a,r3
012D 42D5       877            orl     _P1SKIP,a
012F            878   ;        EFM8_JDY40_test.c:216: break;
012F            879   ;        EFM8_JDY40_test.c:217: case 2:
012F 8000       880            sjmp    L009005?
0131            881   L009003?:
0131            882   ;        EFM8_JDY40_test.c:218: P2MDIN &= (~mask); // Set pin as analog input
0131 EB         883            mov     a,r3
0132 F4         884            cpl     a
0133 FA         885            mov     r2,a
0134 52F3       886            anl     _P2MDIN,a
0136            887   ;        EFM8_JDY40_test.c:219: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0136 EB         888            mov     a,r3
0137 42CC       889            orl     _P2SKIP,a
0139            890   ;        EFM8_JDY40_test.c:223: }
0139            891   L009005?:
0139            892   ;        EFM8_JDY40_test.c:224: SFRPAGE = 0x00;
0139 75A700     893            mov     _SFRPAGE,#0x00
013C 22         894            ret
013D            895   ;------------------------------------------------------------
013D            896   ;Allocation info for local variables in function 'ADC_at_Pin'
013D            897   ;------------------------------------------------------------
013D            898   ;pin                       Allocated to registers 
013D            899   ;------------------------------------------------------------
013D            900   ;        EFM8_JDY40_test.c:227: unsigned int ADC_at_Pin(unsigned char pin)
013D            901   ;        -----------------------------------------
013D            902   ;         function ADC_at_Pin
013D            903   ;        -----------------------------------------
013D            904   _ADC_at_Pin:
013D 8582BB     905            mov     _ADC0MX,dpl
0140            906   ;        EFM8_JDY40_test.c:230: ADINT = 0;
0140 C2ED       907            clr     _ADINT
0142            908   ;        EFM8_JDY40_test.c:231: ADBUSY = 1;     // Convert voltage at the pin
0142 D2EC       909            setb    _ADBUSY
0144            910   ;        EFM8_JDY40_test.c:232: while (!ADINT); // Wait for conversion to complete
0144            911   L010001?:
0144 30EDE0     912            jnb     _ADINT,L010001?
0147            913   ;        EFM8_JDY40_test.c:233: return (ADC0);
0147 85BD82     914            mov     dpl,_ADC0
014A 85BE83     915            mov     dph,(_ADC0 >> 8)
014D 22         916            ret
014E            917   ;------------------------------------------------------------
014E            918   ;Allocation info for local variables in function 'Get_ADC'
014E            919   ;------------------------------------------------------------
014E            920   ;------------------------------------------------------------
014E            921   ;        EFM8_JDY40_test.c:236: unsigned int Get_ADC (void)
014E            922   ;        -----------------------------------------
014E            923   ;         function Get_ADC
014E            924   ;        -----------------------------------------
014E            925   _Get_ADC:
014E            926   ;        EFM8_JDY40_test.c:238: ADINT = 0;
014E C2ED       927            clr     _ADINT
0150            928   ;        EFM8_JDY40_test.c:239: ADBUSY = 1;
0150 D2EC       929            setb    _ADBUSY
0152            930   ;        EFM8_JDY40_test.c:240: while (!ADINT); // Wait for conversion to complete
0152            931   L011001?:
0152 30ED20     932            jnb     _ADINT,L011001?
0155            933   ;        EFM8_JDY40_test.c:241: return (ADC0);
0155 85BD82     934            mov     dpl,_ADC0
0158 85BE83     935            mov     dph,(_ADC0 >> 8)
015B 22         936            ret
015C            937   ;------------------------------------------------------------
015C            938   ;Allocation info for local variables in function 'Volts_at_Pin'
015C            939   ;------------------------------------------------------------
015C            940   ;pin                       Allocated to registers r2 
015C            941   ;------------------------------------------------------------
015C            942   ;        EFM8_JDY40_test.c:245: float Volts_at_Pin(unsigned char pin)
015C            943   ;        -----------------------------------------
015C            944   ;         function Volts_at_Pin
015C            945   ;        -----------------------------------------
015C            946   _Volts_at_Pin:
015C            947   ;        EFM8_JDY40_test.c:247: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
015C 120000     948            lcall   _ADC_at_Pin
015F 120000     949            lcall   ___uint2fs
0162 AA82       950            mov     r2,dpl
0164 AB83       951            mov     r3,dph
0166 ACF0       952            mov     r4,b
0168 FD         953            mov     r5,a
0169 C002       954            push    ar2
016B C003       955            push    ar3
016D C004       956            push    ar4
016F C005       957            push    ar5
0171 903333     958            mov     dptr,#0x3333
0174 75F09B     959            mov     b,#0x9B
0177 7440       960            mov     a,#0x40
0179 120000     961            lcall   ___fsmul
017C AA82       962            mov     r2,dpl
017E AB83       963            mov     r3,dph
0180 ACF0       964            mov     r4,b
0182 FD         965            mov     r5,a
0183 E581       966            mov     a,sp
0185 24FC       967            add     a,#0xfc
0187 F581       968            mov     sp,a
0189 E4         969            clr     a
018A C0E0       970            push    acc
018C 74FC       971            mov     a,#0xFC
018E C0E0       972            push    acc
0190 747F       973            mov     a,#0x7F
0192 C0E0       974            push    acc
0194 7446       975            mov     a,#0x46
0196 C0E0       976            push    acc
0198 8A82       977            mov     dpl,r2
019A 8B83       978            mov     dph,r3
019C 8CF0       979            mov     b,r4
019E ED         980            mov     a,r5
019F 120000     981            lcall   ___fsdiv
01A2 AA82       982            mov     r2,dpl
01A4 AB83       983            mov     r3,dph
01A6 ACF0       984            mov     r4,b
01A8 FD         985            mov     r5,a
01A9 E581       986            mov     a,sp
01AB 24FC       987            add     a,#0xfc
01AD F581       988            mov     sp,a
01AF 8A82       989            mov     dpl,r2
01B1 8B83       990            mov     dph,r3
01B3 8CF0       991            mov     b,r4
01B5 ED         992            mov     a,r5
01B6 22         993            ret
01B7            994   ;------------------------------------------------------------
01B7            995   ;Allocation info for local variables in function 'UART1_Init'
01B7            996   ;------------------------------------------------------------
01B7            997   ;baudrate                  Allocated to registers r2 r3 r4 r5 
01B7            998   ;------------------------------------------------------------
01B7            999   ;        EFM8_JDY40_test.c:250: void UART1_Init (unsigned long baudrate)
01B7           1000   ;        -----------------------------------------
01B7           1001   ;         function UART1_Init
01B7           1002   ;        -----------------------------------------
01B7           1003   _UART1_Init:
01B7 AA82      1004            mov     r2,dpl
01B9 AB83      1005            mov     r3,dph
01BB ACF0      1006            mov     r4,b
01BD FD        1007            mov     r5,a
01BE           1008   ;        EFM8_JDY40_test.c:252: SFRPAGE = 0x20;
01BE 75A720    1009            mov     _SFRPAGE,#0x20
01C1           1010   ;        EFM8_JDY40_test.c:253: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01C1 75930C    1011            mov     _SMOD1,#0x0C
01C4           1012   ;        EFM8_JDY40_test.c:254: SCON1 = 0x10;
01C4 75C810    1013            mov     _SCON1,#0x10
01C7           1014   ;        EFM8_JDY40_test.c:255: SBCON1 =0x00;   // disable baud rate generator
01C7 759400    1015            mov     _SBCON1,#0x00
01CA           1016   ;        EFM8_JDY40_test.c:256: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01CA 8A00      1017            mov     __divulong_PARM_2,r2
01CC 8B01      1018            mov     (__divulong_PARM_2 + 1),r3
01CE 8C02      1019            mov     (__divulong_PARM_2 + 2),r4
01D0 8D03      1020            mov     (__divulong_PARM_2 + 3),r5
01D2 90A200    1021            mov     dptr,#0xA200
01D5 75F04A    1022            mov     b,#0x4A
01D8 7404      1023            mov     a,#0x04
01DA 120000    1024            lcall   __divulong
01DD AA82      1025            mov     r2,dpl
01DF AB83      1026            mov     r3,dph
01E1 ACF0      1027            mov     r4,b
01E3 FD        1028            mov     r5,a
01E4 750018    1029            mov     __divulong_PARM_2,#0x18
01E7 E4        1030            clr     a
01E8 F501      1031            mov     (__divulong_PARM_2 + 1),a
01EA F502      1032            mov     (__divulong_PARM_2 + 2),a
01EC F503      1033            mov     (__divulong_PARM_2 + 3),a
01EE 8A82      1034            mov     dpl,r2
01F0 8B83      1035            mov     dph,r3
01F2 8CF0      1036            mov     b,r4
01F4 ED        1037            mov     a,r5
01F5 120000    1038            lcall   __divulong
01F8 AA82      1039            mov     r2,dpl
01FA AB83      1040            mov     r3,dph
01FC ACF0      1041            mov     r4,b
01FE FD        1042            mov     r5,a
01FF E4        1043            clr     a
0200 C3        1044            clr     c
0201 9A        1045            subb    a,r2
0202 FA        1046            mov     r2,a
0203 E4        1047            clr     a
0204 9B        1048            subb    a,r3
0205 FB        1049            mov     r3,a
0206 7401      1050            mov     a,#0x01
0208 9C        1051            subb    a,r4
0209 E4        1052            clr     a
020A 9D        1053            subb    a,r5
020B 8A95      1054            mov     _SBRL1,r2
020D 8B96      1055            mov     (_SBRL1 >> 8),r3
020F           1056   ;        EFM8_JDY40_test.c:257: TI1 = 1; // indicate ready for TX
020F D2C9      1057            setb    _TI1
0211           1058   ;        EFM8_JDY40_test.c:258: SBCON1 |= 0x40;   // enable baud rate generator
0211 439440    1059            orl     _SBCON1,#0x40
0214           1060   ;        EFM8_JDY40_test.c:259: SFRPAGE = 0x00;
0214 75A700    1061            mov     _SFRPAGE,#0x00
0217 22        1062            ret
0218           1063   ;------------------------------------------------------------
0218           1064   ;Allocation info for local variables in function 'putchar1'
0218           1065   ;------------------------------------------------------------
0218           1066   ;c                         Allocated to registers r2 
0218           1067   ;------------------------------------------------------------
0218           1068   ;        EFM8_JDY40_test.c:262: void putchar1 (char c) 
0218           1069   ;        -----------------------------------------
0218           1070   ;         function putchar1
0218           1071   ;        -----------------------------------------
0218           1072   _putchar1:
0218 AA82      1073            mov     r2,dpl
021A           1074   ;        EFM8_JDY40_test.c:264: SFRPAGE = 0x20;
021A 75A720    1075            mov     _SFRPAGE,#0x20
021D           1076   ;        EFM8_JDY40_test.c:265: while (!TI1);
021D           1077   L014001?:
021D           1078   ;        EFM8_JDY40_test.c:266: TI1=0;
021D 10C930    1079            jbc     _TI1,L014008?
0220 8000      1080            sjmp    L014001?
0222           1081   L014008?:
0222           1082   ;        EFM8_JDY40_test.c:267: SBUF1 = c;
0222 8A92      1083            mov     _SBUF1,r2
0224           1084   ;        EFM8_JDY40_test.c:268: SFRPAGE = 0x00;
0224 75A700    1085            mov     _SFRPAGE,#0x00
0227 22        1086            ret
0228           1087   ;------------------------------------------------------------
0228           1088   ;Allocation info for local variables in function 'sendstr1'
0228           1089   ;------------------------------------------------------------
0228           1090   ;s                         Allocated to registers r2 r3 r4 
0228           1091   ;------------------------------------------------------------
0228           1092   ;        EFM8_JDY40_test.c:271: void sendstr1 (char * s)
0228           1093   ;        -----------------------------------------
0228           1094   ;         function sendstr1
0228           1095   ;        -----------------------------------------
0228           1096   _sendstr1:
0228 AA82      1097            mov     r2,dpl
022A AB83      1098            mov     r3,dph
022C ACF0      1099            mov     r4,b
022E           1100   ;        EFM8_JDY40_test.c:273: while(*s)
022E           1101   L015001?:
022E 8A82      1102            mov     dpl,r2
0230 8B83      1103            mov     dph,r3
0232 8CF0      1104            mov     b,r4
0234 120000    1105            lcall   __gptrget
0237 FD        1106            mov     r5,a
0238 6000      1107            jz      L015004?
023A           1108   ;        EFM8_JDY40_test.c:275: putchar1(*s);
023A 8D82      1109            mov     dpl,r5
023C C002      1110            push    ar2
023E C003      1111            push    ar3
0240 C004      1112            push    ar4
0242 120000    1113            lcall   _putchar1
0245 D004      1114            pop     ar4
0247 D003      1115            pop     ar3
0249 D002      1116            pop     ar2
024B           1117   ;        EFM8_JDY40_test.c:276: s++;     
024B 0A        1118            inc     r2
024C BA0070    1119            cjne    r2,#0x00,L015001?
024F 0B        1120            inc     r3
0250 8000      1121            sjmp    L015001?
0252           1122   L015004?:
0252 22        1123            ret
0253           1124   ;------------------------------------------------------------
0253           1125   ;Allocation info for local variables in function 'getchar1'
0253           1126   ;------------------------------------------------------------
0253           1127   ;c                         Allocated to registers 
0253           1128   ;------------------------------------------------------------
0253           1129   ;        EFM8_JDY40_test.c:280: char getchar1 (void)
0253           1130   ;        -----------------------------------------
0253           1131   ;         function getchar1
0253           1132   ;        -----------------------------------------
0253           1133   _getchar1:
0253           1134   ;        EFM8_JDY40_test.c:283: SFRPAGE = 0x20;
0253 75A720    1135            mov     _SFRPAGE,#0x20
0256           1136   ;        EFM8_JDY40_test.c:284: while (!RI1);
0256           1137   L016001?:
0256           1138   ;        EFM8_JDY40_test.c:285: RI1=0;
0256 10C870    1139            jbc     _RI1,L016008?
0259 8000      1140            sjmp    L016001?
025B           1141   L016008?:
025B           1142   ;        EFM8_JDY40_test.c:287: SCON1&=0b_0011_1111;
025B 53C83F    1143            anl     _SCON1,#0x3F
025E           1144   ;        EFM8_JDY40_test.c:288: c = SBUF1;
025E 859282    1145            mov     dpl,_SBUF1
0261           1146   ;        EFM8_JDY40_test.c:289: SFRPAGE = 0x00;
0261 75A700    1147            mov     _SFRPAGE,#0x00
0264           1148   ;        EFM8_JDY40_test.c:290: return (c);
0264 22        1149            ret
0265           1150   ;------------------------------------------------------------
0265           1151   ;Allocation info for local variables in function 'getchar1_with_timeout'
0265           1152   ;------------------------------------------------------------
0265           1153   ;c                         Allocated to registers 
0265           1154   ;timeout                   Allocated to registers r2 r3 
0265           1155   ;------------------------------------------------------------
0265           1156   ;        EFM8_JDY40_test.c:293: char getchar1_with_timeout (void)
0265           1157   ;        -----------------------------------------
0265           1158   ;         function getchar1_with_timeout
0265           1159   ;        -----------------------------------------
0265           1160   _getchar1_with_timeout:
0265           1161   ;        EFM8_JDY40_test.c:297: SFRPAGE = 0x20;
0265 75A720    1162            mov     _SFRPAGE,#0x20
0268           1163   ;        EFM8_JDY40_test.c:299: while (!RI1)
0268 7A00      1164            mov     r2,#0x00
026A 7B00      1165            mov     r3,#0x00
026C           1166   L017003?:
026C 20C8F0    1167            jb      _RI1,L017005?
026F           1168   ;        EFM8_JDY40_test.c:301: SFRPAGE = 0x00;
026F 75A700    1169            mov     _SFRPAGE,#0x00
0272           1170   ;        EFM8_JDY40_test.c:302: Timer3us(20);
0272 758214    1171            mov     dpl,#0x14
0275 C002      1172            push    ar2
0277 C003      1173            push    ar3
0279 120000    1174            lcall   _Timer3us
027C D003      1175            pop     ar3
027E D002      1176            pop     ar2
0280           1177   ;        EFM8_JDY40_test.c:303: SFRPAGE = 0x20;
0280 75A720    1178            mov     _SFRPAGE,#0x20
0283           1179   ;        EFM8_JDY40_test.c:304: timeout++;
0283 0A        1180            inc     r2
0284 BA0030    1181            cjne    r2,#0x00,L017012?
0287 0B        1182            inc     r3
0288           1183   L017012?:
0288           1184   ;        EFM8_JDY40_test.c:305: if(timeout==25000)
0288 BAA8B0    1185            cjne    r2,#0xA8,L017003?
028B BB61B0    1186            cjne    r3,#0x61,L017003?
028E           1187   ;        EFM8_JDY40_test.c:307: SFRPAGE = 0x00;
028E 75A700    1188            mov     _SFRPAGE,#0x00
0291           1189   ;        EFM8_JDY40_test.c:308: return ('\n'); // Timeout after half second
0291 75820A    1190            mov     dpl,#0x0A
0294 22        1191            ret
0295           1192   L017005?:
0295           1193   ;        EFM8_JDY40_test.c:311: RI1=0;
0295 C2C8      1194            clr     _RI1
0297           1195   ;        EFM8_JDY40_test.c:313: SCON1&=0b_0011_1111;
0297 53C83F    1196            anl     _SCON1,#0x3F
029A           1197   ;        EFM8_JDY40_test.c:314: c = SBUF1;
029A 859282    1198            mov     dpl,_SBUF1
029D           1199   ;        EFM8_JDY40_test.c:315: SFRPAGE = 0x00;
029D 75A700    1200            mov     _SFRPAGE,#0x00
02A0           1201   ;        EFM8_JDY40_test.c:316: return (c);
02A0 22        1202            ret
02A1           1203   ;------------------------------------------------------------
02A1           1204   ;Allocation info for local variables in function 'getstr1'
02A1           1205   ;------------------------------------------------------------
02A1           1206   ;s                         Allocated to registers r2 r3 r4 
02A1           1207   ;c                         Allocated to registers r5 
02A1           1208   ;------------------------------------------------------------
02A1           1209   ;        EFM8_JDY40_test.c:319: void getstr1 (char * s)
02A1           1210   ;        -----------------------------------------
02A1           1211   ;         function getstr1
02A1           1212   ;        -----------------------------------------
02A1           1213   _getstr1:
02A1 AA82      1214            mov     r2,dpl
02A3 AB83      1215            mov     r3,dph
02A5 ACF0      1216            mov     r4,b
02A7           1217   ;        EFM8_JDY40_test.c:323: while(1)
02A7           1218   L018004?:
02A7           1219   ;        EFM8_JDY40_test.c:325: c=getchar1_with_timeout();
02A7 C002      1220            push    ar2
02A9 C003      1221            push    ar3
02AB C004      1222            push    ar4
02AD 120000    1223            lcall   _getchar1_with_timeout
02B0 AD82      1224            mov     r5,dpl
02B2 D004      1225            pop     ar4
02B4 D003      1226            pop     ar3
02B6 D002      1227            pop     ar2
02B8           1228   ;        EFM8_JDY40_test.c:326: if(c=='\n')
02B8 BD0AB0    1229            cjne    r5,#0x0A,L018002?
02BB           1230   ;        EFM8_JDY40_test.c:328: *s=0;
02BB 8A82      1231            mov     dpl,r2
02BD 8B83      1232            mov     dph,r3
02BF 8CF0      1233            mov     b,r4
02C1 E4        1234            clr     a
02C2           1235   ;        EFM8_JDY40_test.c:329: return;
02C2 020000    1236            ljmp    __gptrput
02C5           1237   L018002?:
02C5           1238   ;        EFM8_JDY40_test.c:331: *s=c;
02C5 8A82      1239            mov     dpl,r2
02C7 8B83      1240            mov     dph,r3
02C9 8CF0      1241            mov     b,r4
02CB ED        1242            mov     a,r5
02CC 120000    1243            lcall   __gptrput
02CF A3        1244            inc     dptr
02D0 AA82      1245            mov     r2,dpl
02D2 AB83      1246            mov     r3,dph
02D4           1247   ;        EFM8_JDY40_test.c:332: s++;
02D4 8000      1248            sjmp    L018004?
02D6           1249   ;------------------------------------------------------------
02D6           1250   ;Allocation info for local variables in function 'RXU1'
02D6           1251   ;------------------------------------------------------------
02D6           1252   ;------------------------------------------------------------
02D6           1253   ;        EFM8_JDY40_test.c:337: bit RXU1 (void)
02D6           1254   ;        -----------------------------------------
02D6           1255   ;         function RXU1
02D6           1256   ;        -----------------------------------------
02D6           1257   _RXU1:
02D6           1258   ;        EFM8_JDY40_test.c:340: SFRPAGE = 0x20;
02D6 75A720    1259            mov     _SFRPAGE,#0x20
02D9           1260   ;        EFM8_JDY40_test.c:341: mybit=RI1;
02D9 A2C8      1261            mov     c,_RI1
02DB           1262   ;        EFM8_JDY40_test.c:342: SFRPAGE = 0x00;
02DB 75A700    1263            mov     _SFRPAGE,#0x00
02DE           1264   ;        EFM8_JDY40_test.c:343: return mybit;
02DE 22        1265            ret
02DF           1266   ;------------------------------------------------------------
02DF           1267   ;Allocation info for local variables in function 'waitms_or_RI1'
02DF           1268   ;------------------------------------------------------------
02DF           1269   ;ms                        Allocated to registers r2 r3 
02DF           1270   ;j                         Allocated to registers r4 r5 
02DF           1271   ;k                         Allocated to registers r6 
02DF           1272   ;------------------------------------------------------------
02DF           1273   ;        EFM8_JDY40_test.c:346: void waitms_or_RI1 (unsigned int ms)
02DF           1274   ;        -----------------------------------------
02DF           1275   ;         function waitms_or_RI1
02DF           1276   ;        -----------------------------------------
02DF           1277   _waitms_or_RI1:
02DF AA82      1278            mov     r2,dpl
02E1 AB83      1279            mov     r3,dph
02E3           1280   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
02E3 7C00      1281            mov     r4,#0x00
02E5 7D00      1282            mov     r5,#0x00
02E7           1283   L020007?:
02E7 C3        1284            clr     c
02E8 EC        1285            mov     a,r4
02E9 9A        1286            subb    a,r2
02EA ED        1287            mov     a,r5
02EB 9B        1288            subb    a,r3
02EC 5000      1289            jnc     L020011?
02EE           1290   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
02EE 7E00      1291            mov     r6,#0x00
02F0           1292   L020003?:
02F0 BE04F0    1293            cjne    r6,#0x04,L020019?
02F3           1294   L020019?:
02F3 5000      1295            jnc     L020009?
02F5           1296   ;        EFM8_JDY40_test.c:354: if(RXU1()) return;
02F5 C002      1297            push    ar2
02F7 C003      1298            push    ar3
02F9 C004      1299            push    ar4
02FB C005      1300            push    ar5
02FD C006      1301            push    ar6
02FF 120000    1302            lcall   _RXU1
0302 E4        1303            clr     a
0303 33        1304            rlc     a
0304 D006      1305            pop     ar6
0306 D005      1306            pop     ar5
0308 D004      1307            pop     ar4
030A D003      1308            pop     ar3
030C D002      1309            pop     ar2
030E 6000      1310            jz      L020002?
0310 22        1311            ret
0311           1312   L020002?:
0311           1313   ;        EFM8_JDY40_test.c:355: Timer3us(250);
0311 7582FA    1314            mov     dpl,#0xFA
0314 C002      1315            push    ar2
0316 C003      1316            push    ar3
0318 C004      1317            push    ar4
031A C005      1318            push    ar5
031C C006      1319            push    ar6
031E 120000    1320            lcall   _Timer3us
0321 D006      1321            pop     ar6
0323 D005      1322            pop     ar5
0325 D004      1323            pop     ar4
0327 D003      1324            pop     ar3
0329 D002      1325            pop     ar2
032B           1326   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
032B 0E        1327            inc     r6
032C 8000      1328            sjmp    L020003?
032E           1329   L020009?:
032E           1330   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
032E 0C        1331            inc     r4
032F BC0030    1332            cjne    r4,#0x00,L020007?
0332 0D        1333            inc     r5
0333 8000      1334            sjmp    L020007?
0335           1335   L020011?:
0335 22        1336            ret
0336           1337   ;------------------------------------------------------------
0336           1338   ;Allocation info for local variables in function 'SendATCommand'
0336           1339   ;------------------------------------------------------------
0336           1340   ;s                         Allocated to registers r2 r3 r4 
0336           1341   ;------------------------------------------------------------
0336           1342   ;        EFM8_JDY40_test.c:360: void SendATCommand (char * s)
0336           1343   ;        -----------------------------------------
0336           1344   ;         function SendATCommand
0336           1345   ;        -----------------------------------------
0336           1346   _SendATCommand:
0336 AA82      1347            mov     r2,dpl
0338 AB83      1348            mov     r3,dph
033A ACF0      1349            mov     r4,b
033C           1350   ;        EFM8_JDY40_test.c:362: printf("Command: %s", s);
033C C002      1351            push    ar2
033E C003      1352            push    ar3
0340 C004      1353            push    ar4
0342 C002      1354            push    ar2
0344 C003      1355            push    ar3
0346 C004      1356            push    ar4
0348 74B0      1357            mov     a,#__str_0
034A C0E0      1358            push    acc
034C 74C4      1359            mov     a,#(__str_0 >> 8)
034E C0E0      1360            push    acc
0350 7480      1361            mov     a,#0x80
0352 C0E0      1362            push    acc
0354 120000    1363            lcall   _printf
0357 E581      1364            mov     a,sp
0359 24FA      1365            add     a,#0xfa
035B F581      1366            mov     sp,a
035D           1367   ;        EFM8_JDY40_test.c:363: P3_0=0; // 'set' pin to 0 is 'AT' mode.
035D C2B0      1368            clr     _P3_0
035F           1369   ;        EFM8_JDY40_test.c:364: waitms(5);
035F 900005    1370            mov     dptr,#0x0005
0362 120000    1371            lcall   _waitms
0365 D004      1372            pop     ar4
0367 D003      1373            pop     ar3
0369 D002      1374            pop     ar2
036B           1375   ;        EFM8_JDY40_test.c:365: sendstr1(s);
036B 8A82      1376            mov     dpl,r2
036D 8B83      1377            mov     dph,r3
036F 8CF0      1378            mov     b,r4
0371 120000    1379            lcall   _sendstr1
0374           1380   ;        EFM8_JDY40_test.c:366: getstr1(buff);
0374 9018D0    1381            mov     dptr,#_buff
0377 75F040    1382            mov     b,#0x40
037A 120000    1383            lcall   _getstr1
037D           1384   ;        EFM8_JDY40_test.c:367: waitms(10);
037D 90000A    1385            mov     dptr,#0x000A
0380 120000    1386            lcall   _waitms
0383           1387   ;        EFM8_JDY40_test.c:368: P3_0=1; // 'set' pin to 1 is normal operation mode.
0383 D2B0      1388            setb    _P3_0
0385           1389   ;        EFM8_JDY40_test.c:369: printf("Response: %s\r\n", buff);
0385 74D0      1390            mov     a,#_buff
0387 C0E0      1391            push    acc
0389 7418      1392            mov     a,#(_buff >> 8)
038B C0E0      1393            push    acc
038D 7440      1394            mov     a,#0x40
038F C0E0      1395            push    acc
0391 7430      1396            mov     a,#__str_1
0393 C0E0      1397            push    acc
0395 74C5      1398            mov     a,#(__str_1 >> 8)
0397 C0E0      1399            push    acc
0399 7480      1400            mov     a,#0x80
039B C0E0      1401            push    acc
039D 120000    1402            lcall   _printf
03A0 E581      1403            mov     a,sp
03A2 24FA      1404            add     a,#0xfa
03A4 F581      1405            mov     sp,a
03A6 22        1406            ret
03A7           1407   ;------------------------------------------------------------
03A7           1408   ;Allocation info for local variables in function 'LCD_pulse'
03A7           1409   ;------------------------------------------------------------
03A7           1410   ;------------------------------------------------------------
03A7           1411   ;        EFM8_JDY40_test.c:374: void LCD_pulse (void)
03A7           1412   ;        -----------------------------------------
03A7           1413   ;         function LCD_pulse
03A7           1414   ;        -----------------------------------------
03A7           1415   _LCD_pulse:
03A7           1416   ;        EFM8_JDY40_test.c:376: LCD_E=1;
03A7 D2A0      1417            setb    _P2_0
03A9           1418   ;        EFM8_JDY40_test.c:377: Timer3us(40);
03A9 758228    1419            mov     dpl,#0x28
03AC 120000    1420            lcall   _Timer3us
03AF           1421   ;        EFM8_JDY40_test.c:378: LCD_E=0;
03AF C2A0      1422            clr     _P2_0
03B1 22        1423            ret
03B2           1424   ;------------------------------------------------------------
03B2           1425   ;Allocation info for local variables in function 'LCD_byte'
03B2           1426   ;------------------------------------------------------------
03B2           1427   ;x                         Allocated to registers r2 
03B2           1428   ;------------------------------------------------------------
03B2           1429   ;        EFM8_JDY40_test.c:381: void LCD_byte (unsigned char x)
03B2           1430   ;        -----------------------------------------
03B2           1431   ;         function LCD_byte
03B2           1432   ;        -----------------------------------------
03B2           1433   _LCD_byte:
03B2 AA82      1434            mov     r2,dpl
03B4           1435   ;        EFM8_JDY40_test.c:384: ACC=x; //Send high nible
03B4 8AE0      1436            mov     _ACC,r2
03B6           1437   ;        EFM8_JDY40_test.c:385: LCD_D7=ACC_7;
03B6 A2E7      1438            mov     c,_ACC_7
03B8 9290      1439            mov     _P1_0,c
03BA           1440   ;        EFM8_JDY40_test.c:386: LCD_D6=ACC_6;
03BA A2E6      1441            mov     c,_ACC_6
03BC 9291      1442            mov     _P1_1,c
03BE           1443   ;        EFM8_JDY40_test.c:387: LCD_D5=ACC_5;
03BE A2E5      1444            mov     c,_ACC_5
03C0 9292      1445            mov     _P1_2,c
03C2           1446   ;        EFM8_JDY40_test.c:388: LCD_D4=ACC_4;
03C2 A2E4      1447            mov     c,_ACC_4
03C4 9293      1448            mov     _P1_3,c
03C6           1449   ;        EFM8_JDY40_test.c:389: LCD_pulse();
03C6 C002      1450            push    ar2
03C8 120000    1451            lcall   _LCD_pulse
03CB           1452   ;        EFM8_JDY40_test.c:390: Timer3us(40);
03CB 758228    1453            mov     dpl,#0x28
03CE 120000    1454            lcall   _Timer3us
03D1 D002      1455            pop     ar2
03D3           1456   ;        EFM8_JDY40_test.c:391: ACC=x; //Send low nible
03D3 8AE0      1457            mov     _ACC,r2
03D5           1458   ;        EFM8_JDY40_test.c:392: LCD_D7=ACC_3;
03D5 A2E3      1459            mov     c,_ACC_3
03D7 9290      1460            mov     _P1_0,c
03D9           1461   ;        EFM8_JDY40_test.c:393: LCD_D6=ACC_2;
03D9 A2E2      1462            mov     c,_ACC_2
03DB 9291      1463            mov     _P1_1,c
03DD           1464   ;        EFM8_JDY40_test.c:394: LCD_D5=ACC_1;
03DD A2E1      1465            mov     c,_ACC_1
03DF 9292      1466            mov     _P1_2,c
03E1           1467   ;        EFM8_JDY40_test.c:395: LCD_D4=ACC_0;
03E1 A2E0      1468            mov     c,_ACC_0
03E3 9293      1469            mov     _P1_3,c
03E5           1470   ;        EFM8_JDY40_test.c:396: LCD_pulse();
03E5 020000    1471            ljmp    _LCD_pulse
03E8           1472   ;------------------------------------------------------------
03E8           1473   ;Allocation info for local variables in function 'WriteData'
03E8           1474   ;------------------------------------------------------------
03E8           1475   ;x                         Allocated to registers r2 
03E8           1476   ;------------------------------------------------------------
03E8           1477   ;        EFM8_JDY40_test.c:399: void WriteData (unsigned char x)
03E8           1478   ;        -----------------------------------------
03E8           1479   ;         function WriteData
03E8           1480   ;        -----------------------------------------
03E8           1481   _WriteData:
03E8 AA82      1482            mov     r2,dpl
03EA           1483   ;        EFM8_JDY40_test.c:401: LCD_RS=1;
03EA D297      1484            setb    _P1_7
03EC           1485   ;        EFM8_JDY40_test.c:402: LCD_byte(x);
03EC 8A82      1486            mov     dpl,r2
03EE 120000    1487            lcall   _LCD_byte
03F1           1488   ;        EFM8_JDY40_test.c:403: waitms(2);
03F1 900002    1489            mov     dptr,#0x0002
03F4 020000    1490            ljmp    _waitms
03F7           1491   ;------------------------------------------------------------
03F7           1492   ;Allocation info for local variables in function 'WriteCommand'
03F7           1493   ;------------------------------------------------------------
03F7           1494   ;x                         Allocated to registers r2 
03F7           1495   ;------------------------------------------------------------
03F7           1496   ;        EFM8_JDY40_test.c:406: void WriteCommand (unsigned char x)
03F7           1497   ;        -----------------------------------------
03F7           1498   ;         function WriteCommand
03F7           1499   ;        -----------------------------------------
03F7           1500   _WriteCommand:
03F7 AA82      1501            mov     r2,dpl
03F9           1502   ;        EFM8_JDY40_test.c:408: LCD_RS=0;
03F9 C297      1503            clr     _P1_7
03FB           1504   ;        EFM8_JDY40_test.c:409: LCD_byte(x);
03FB 8A82      1505            mov     dpl,r2
03FD 120000    1506            lcall   _LCD_byte
0400           1507   ;        EFM8_JDY40_test.c:410: waitms(5);
0400 900005    1508            mov     dptr,#0x0005
0403 020000    1509            ljmp    _waitms
0406           1510   ;------------------------------------------------------------
0406           1511   ;Allocation info for local variables in function 'LCD_4BIT'
0406           1512   ;------------------------------------------------------------
0406           1513   ;------------------------------------------------------------
0406           1514   ;        EFM8_JDY40_test.c:413: void LCD_4BIT (void)
0406           1515   ;        -----------------------------------------
0406           1516   ;         function LCD_4BIT
0406           1517   ;        -----------------------------------------
0406           1518   _LCD_4BIT:
0406           1519   ;        EFM8_JDY40_test.c:415: LCD_E=0; // Resting state of LCD's enable is zero
0406 C2A0      1520            clr     _P2_0
0408           1521   ;        EFM8_JDY40_test.c:417: waitms(20);
0408 900014    1522            mov     dptr,#0x0014
040B 120000    1523            lcall   _waitms
040E           1524   ;        EFM8_JDY40_test.c:419: WriteCommand(0x33);
040E 758233    1525            mov     dpl,#0x33
0411 120000    1526            lcall   _WriteCommand
0414           1527   ;        EFM8_JDY40_test.c:420: WriteCommand(0x33);
0414 758233    1528            mov     dpl,#0x33
0417 120000    1529            lcall   _WriteCommand
041A           1530   ;        EFM8_JDY40_test.c:421: WriteCommand(0x32); // Change to 4-bit mode
041A 758232    1531            mov     dpl,#0x32
041D 120000    1532            lcall   _WriteCommand
0420           1533   ;        EFM8_JDY40_test.c:424: WriteCommand(0x28);
0420 758228    1534            mov     dpl,#0x28
0423 120000    1535            lcall   _WriteCommand
0426           1536   ;        EFM8_JDY40_test.c:425: WriteCommand(0x0c);
0426 75820C    1537            mov     dpl,#0x0C
0429 120000    1538            lcall   _WriteCommand
042C           1539   ;        EFM8_JDY40_test.c:426: WriteCommand(0x01); // Clear screen command (takes some time)
042C 758201    1540            mov     dpl,#0x01
042F 120000    1541            lcall   _WriteCommand
0432           1542   ;        EFM8_JDY40_test.c:427: waitms(20); // Wait for clear screen command to finsih.
0432 900014    1543            mov     dptr,#0x0014
0435 020000    1544            ljmp    _waitms
0438           1545   ;------------------------------------------------------------
0438           1546   ;Allocation info for local variables in function 'LCDprint'
0438           1547   ;------------------------------------------------------------
0438           1548   ;line                      Allocated with name '_LCDprint_PARM_2'
0438           1549   ;string                    Allocated to registers r2 r3 r4 
0438           1550   ;j                         Allocated to registers r5 r6 
0438           1551   ;------------------------------------------------------------
0438           1552   ;        EFM8_JDY40_test.c:430: void LCDprint(char * string, unsigned char line, bit clear)
0438           1553   ;        -----------------------------------------
0438           1554   ;         function LCDprint
0438           1555   ;        -----------------------------------------
0438           1556   _LCDprint:
0438 AA82      1557            mov     r2,dpl
043A AB83      1558            mov     r3,dph
043C ACF0      1559            mov     r4,b
043E           1560   ;        EFM8_JDY40_test.c:434: WriteCommand(line==2?0xc0:0x80);
043E 7402      1561            mov     a,#0x02
0440 B52070    1562            cjne    a,_LCDprint_PARM_2,L027013?
0443 7DC0      1563            mov     r5,#0xC0
0445 8000      1564            sjmp    L027014?
0447           1565   L027013?:
0447 7D80      1566            mov     r5,#0x80
0449           1567   L027014?:
0449 8D82      1568            mov     dpl,r5
044B C002      1569            push    ar2
044D C003      1570            push    ar3
044F C004      1571            push    ar4
0451 120000    1572            lcall   _WriteCommand
0454           1573   ;        EFM8_JDY40_test.c:435: waitms(5);
0454 900005    1574            mov     dptr,#0x0005
0457 120000    1575            lcall   _waitms
045A D004      1576            pop     ar4
045C D003      1577            pop     ar3
045E D002      1578            pop     ar2
0460           1579   ;        EFM8_JDY40_test.c:436: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
0460 7D00      1580            mov     r5,#0x00
0462 7E00      1581            mov     r6,#0x00
0464           1582   L027003?:
0464 ED        1583            mov     a,r5
0465 2A        1584            add     a,r2
0466 FF        1585            mov     r7,a
0467 EE        1586            mov     a,r6
0468 3B        1587            addc    a,r3
0469 F8        1588            mov     r0,a
046A 8C01      1589            mov     ar1,r4
046C 8F82      1590            mov     dpl,r7
046E 8883      1591            mov     dph,r0
0470 89F0      1592            mov     b,r1
0472 120000    1593            lcall   __gptrget
0475 FF        1594            mov     r7,a
0476 6000      1595            jz      L027006?
0478 8F82      1596            mov     dpl,r7
047A C002      1597            push    ar2
047C C003      1598            push    ar3
047E C004      1599            push    ar4
0480 C005      1600            push    ar5
0482 C006      1601            push    ar6
0484 120000    1602            lcall   _WriteData
0487 D006      1603            pop     ar6
0489 D005      1604            pop     ar5
048B D004      1605            pop     ar4
048D D003      1606            pop     ar3
048F D002      1607            pop     ar2
0491 0D        1608            inc     r5
0492 BD00F0    1609            cjne    r5,#0x00,L027003?
0495 0E        1610            inc     r6
0496 8000      1611            sjmp    L027003?
0498           1612   L027006?:
0498           1613   ;        EFM8_JDY40_test.c:437: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0498 309070    1614            jnb     _LCDprint_PARM_3,L027011?
049B 8D02      1615            mov     ar2,r5
049D 8E03      1616            mov     ar3,r6
049F           1617   L027007?:
049F C3        1618            clr     c
04A0 EA        1619            mov     a,r2
04A1 9410      1620            subb    a,#0x10
04A3 EB        1621            mov     a,r3
04A4 6480      1622            xrl     a,#0x80
04A6 9480      1623            subb    a,#0x80
04A8 5000      1624            jnc     L027011?
04AA 758220    1625            mov     dpl,#0x20
04AD C002      1626            push    ar2
04AF C003      1627            push    ar3
04B1 120000    1628            lcall   _WriteData
04B4 D003      1629            pop     ar3
04B6 D002      1630            pop     ar2
04B8 0A        1631            inc     r2
04B9 BA00B0    1632            cjne    r2,#0x00,L027007?
04BC 0B        1633            inc     r3
04BD 8000      1634            sjmp    L027007?
04BF           1635   L027011?:
04BF 22        1636            ret
04C0           1637   ;------------------------------------------------------------
04C0           1638   ;Allocation info for local variables in function 'main'
04C0           1639   ;------------------------------------------------------------
04C0           1640   ;cnt                       Allocated to registers r2 r3 
04C0           1641   ;volt_x                    Allocated with name '_main_volt_x_1_123'
04C0           1642   ;volt_y                    Allocated to registers r4 r5 r6 r7 
04C0           1643   ;frequency                 Allocated to registers r4 r5 r6 r7 
04C0           1644   ;------------------------------------------------------------
04C0           1645   ;        EFM8_JDY40_test.c:440: void main (void)
04C0           1646   ;        -----------------------------------------
04C0           1647   ;         function main
04C0           1648   ;        -----------------------------------------
04C0           1649   _main:
04C0           1650   ;        EFM8_JDY40_test.c:449: InitADC();
04C0 120000    1651            lcall   _InitADC
04C3           1652   ;        EFM8_JDY40_test.c:450: waitms(500);
04C3 9001F4    1653            mov     dptr,#0x01F4
04C6 120000    1654            lcall   _waitms
04C9           1655   ;        EFM8_JDY40_test.c:451: printf("\r\nJDY-40 test\r\n");
04C9 74F0      1656            mov     a,#__str_2
04CB C0E0      1657            push    acc
04CD 74C6      1658            mov     a,#(__str_2 >> 8)
04CF C0E0      1659            push    acc
04D1 7480      1660            mov     a,#0x80
04D3 C0E0      1661            push    acc
04D5 120000    1662            lcall   _printf
04D8 1581      1663            dec     sp
04DA 1581      1664            dec     sp
04DC 1581      1665            dec     sp
04DE           1666   ;        EFM8_JDY40_test.c:452: UART1_Init(9600);
04DE 902580    1667            mov     dptr,#0x2580
04E1 E4        1668            clr     a
04E2 F5F0      1669            mov     b,a
04E4 120000    1670            lcall   _UART1_Init
04E7           1671   ;        EFM8_JDY40_test.c:453: InitPinADC(2,4); //for y remote
04E7 756004    1672            mov     _InitPinADC_PARM_2,#0x04
04EA 758202    1673            mov     dpl,#0x02
04ED 120000    1674            lcall   _InitPinADC
04F0           1675   ;        EFM8_JDY40_test.c:454: InitPinADC(2,5); //for x remote
04F0 756005    1676            mov     _InitPinADC_PARM_2,#0x05
04F3 758202    1677            mov     dpl,#0x02
04F6 120000    1678            lcall   _InitPinADC
04F9           1679   ;        EFM8_JDY40_test.c:473: SendATCommand("AT+DVID9944\r\n");  
04F9 90C730    1680            mov     dptr,#__str_3
04FC 75F080    1681            mov     b,#0x80
04FF 120000    1682            lcall   _SendATCommand
0502           1683   ;        EFM8_JDY40_test.c:476: SendATCommand("AT+VER\r\n");
0502 90C770    1684            mov     dptr,#__str_4
0505 75F080    1685            mov     b,#0x80
0508 120000    1686            lcall   _SendATCommand
050B           1687   ;        EFM8_JDY40_test.c:477: SendATCommand("AT+BAUD\r\n");
050B 90C7B0    1688            mov     dptr,#__str_5
050E 75F080    1689            mov     b,#0x80
0511 120000    1690            lcall   _SendATCommand
0514           1691   ;        EFM8_JDY40_test.c:478: SendATCommand("AT+RFID\r\n");
0514 90C7F0    1692            mov     dptr,#__str_6
0517 75F080    1693            mov     b,#0x80
051A 120000    1694            lcall   _SendATCommand
051D           1695   ;        EFM8_JDY40_test.c:479: SendATCommand("AT+DVID\r\n");
051D 90C830    1696            mov     dptr,#__str_7
0520 75F080    1697            mov     b,#0x80
0523 120000    1698            lcall   _SendATCommand
0526           1699   ;        EFM8_JDY40_test.c:480: SendATCommand("AT+RFC\r\n");
0526 90C870    1700            mov     dptr,#__str_8
0529 75F080    1701            mov     b,#0x80
052C 120000    1702            lcall   _SendATCommand
052F           1703   ;        EFM8_JDY40_test.c:481: SendATCommand("AT+POWE\r\n");
052F 90C8B0    1704            mov     dptr,#__str_9
0532 75F080    1705            mov     b,#0x80
0535 120000    1706            lcall   _SendATCommand
0538           1707   ;        EFM8_JDY40_test.c:482: SendATCommand("AT+CLSS\r\n");
0538 90C8F0    1708            mov     dptr,#__str_10
053B 75F080    1709            mov     b,#0x80
053E 120000    1710            lcall   _SendATCommand
0541           1711   ;        EFM8_JDY40_test.c:484: printf("\r\nPress and hold the BOOT button to transmit.\r\n");
0541 7430      1712            mov     a,#__str_11
0543 C0E0      1713            push    acc
0545 74C9      1714            mov     a,#(__str_11 >> 8)
0547 C0E0      1715            push    acc
0549 7480      1716            mov     a,#0x80
054B C0E0      1717            push    acc
054D 120000    1718            lcall   _printf
0550 1581      1719            dec     sp
0552 1581      1720            dec     sp
0554 1581      1721            dec     sp
0556           1722   ;        EFM8_JDY40_test.c:487: while(1)
0556 7A00      1723            mov     r2,#0x00
0558 7B00      1724            mov     r3,#0x00
055A           1725   L028008?:
055A           1726   ;        EFM8_JDY40_test.c:492: volt_x = Volts_at_Pin(QFP32_MUX_P1_4);
055A 75820A    1727            mov     dpl,#0x0A
055D C002      1728            push    ar2
055F C003      1729            push    ar3
0561 120000    1730            lcall   _Volts_at_Pin
0564 8582E0    1731            mov     _main_volt_x_1_123,dpl
0567 8583E1    1732            mov     (_main_volt_x_1_123 + 1),dph
056A 85F0E2    1733            mov     (_main_volt_x_1_123 + 2),b
056D F5E3      1734            mov     (_main_volt_x_1_123 + 3),a
056F           1735   ;        EFM8_JDY40_test.c:493: volt_y = Volts_at_Pin(QFP32_MUX_P1_5);
056F 75820B    1736            mov     dpl,#0x0B
0572 120000    1737            lcall   _Volts_at_Pin
0575 AC82      1738            mov     r4,dpl
0577 AD83      1739            mov     r5,dph
0579 AEF0      1740            mov     r6,b
057B FF        1741            mov     r7,a
057C           1742   ;        EFM8_JDY40_test.c:500: sprintf(buff, "%f %f\r\n", volt_x, volt_y);
057C C004      1743            push    ar4
057E C005      1744            push    ar5
0580 C006      1745            push    ar6
0582 C007      1746            push    ar7
0584 C0E0      1747            push    _main_volt_x_1_123
0586 C0E1      1748            push    (_main_volt_x_1_123 + 1)
0588 C0E2      1749            push    (_main_volt_x_1_123 + 2)
058A C0E3      1750            push    (_main_volt_x_1_123 + 3)
058C 74B0      1751            mov     a,#__str_12
058E C0E0      1752            push    acc
0590 74C9      1753            mov     a,#(__str_12 >> 8)
0592 C0E0      1754            push    acc
0594 7480      1755            mov     a,#0x80
0596 C0E0      1756            push    acc
0598 74D0      1757            mov     a,#_buff
059A C0E0      1758            push    acc
059C 7418      1759            mov     a,#(_buff >> 8)
059E C0E0      1760            push    acc
05A0 7440      1761            mov     a,#0x40
05A2 C0E0      1762            push    acc
05A4 120000    1763            lcall   _sprintf
05A7 E581      1764            mov     a,sp
05A9 24F2      1765            add     a,#0xf2
05AB F581      1766            mov     sp,a
05AD           1767   ;        EFM8_JDY40_test.c:501: sendstr1(buff);
05AD 9018D0    1768            mov     dptr,#_buff
05B0 75F040    1769            mov     b,#0x40
05B3 120000    1770            lcall   _sendstr1
05B6           1771   ;        EFM8_JDY40_test.c:502: waitms_or_RI1(200);
05B6 9000C8    1772            mov     dptr,#0x00C8
05B9 120000    1773            lcall   _waitms_or_RI1
05BC D003      1774            pop     ar3
05BE D002      1775            pop     ar2
05C0           1776   ;        EFM8_JDY40_test.c:507: if(P3_7==0)
05C0 20B730    1777            jb      _P3_7,L028002?
05C3           1778   ;        EFM8_JDY40_test.c:509: sprintf(buff, "JDY40 test %d\r\n", cnt++);
05C3 8A04      1779            mov     ar4,r2
05C5 8B05      1780            mov     ar5,r3
05C7 0A        1781            inc     r2
05C8 BA0070    1782            cjne    r2,#0x00,L028018?
05CB 0B        1783            inc     r3
05CC           1784   L028018?:
05CC C002      1785            push    ar2
05CE C003      1786            push    ar3
05D0 C004      1787            push    ar4
05D2 C005      1788            push    ar5
05D4 74B0      1789            mov     a,#__str_13
05D6 C0E0      1790            push    acc
05D8 74CA      1791            mov     a,#(__str_13 >> 8)
05DA C0E0      1792            push    acc
05DC 7480      1793            mov     a,#0x80
05DE C0E0      1794            push    acc
05E0 74D0      1795            mov     a,#_buff
05E2 C0E0      1796            push    acc
05E4 7418      1797            mov     a,#(_buff >> 8)
05E6 C0E0      1798            push    acc
05E8 7440      1799            mov     a,#0x40
05EA C0E0      1800            push    acc
05EC 120000    1801            lcall   _sprintf
05EF E581      1802            mov     a,sp
05F1 24F8      1803            add     a,#0xf8
05F3 F581      1804            mov     sp,a
05F5           1805   ;        EFM8_JDY40_test.c:510: sendstr1(buff);
05F5 9018D0    1806            mov     dptr,#_buff
05F8 75F040    1807            mov     b,#0x40
05FB 120000    1808            lcall   _sendstr1
05FE           1809   ;        EFM8_JDY40_test.c:511: putchar('.');
05FE 75822E    1810            mov     dpl,#0x2E
0601 120000    1811            lcall   _putchar
0604           1812   ;        EFM8_JDY40_test.c:512: waitms_or_RI1(200);
0604 9000C8    1813            mov     dptr,#0x00C8
0607 120000    1814            lcall   _waitms_or_RI1
060A D003      1815            pop     ar3
060C D002      1816            pop     ar2
060E           1817   L028002?:
060E           1818   ;        EFM8_JDY40_test.c:515: if(RXU1())
060E C002      1819            push    ar2
0610 C003      1820            push    ar3
0612 120000    1821            lcall   _RXU1
0615 D003      1822            pop     ar3
0617 D002      1823            pop     ar2
0619 4000      1824            jc      L028019?
061B 020000    1825            ljmp    L028008?
061E           1826   L028019?:
061E           1827   ;        EFM8_JDY40_test.c:518: getstr1(buff);
061E 9018D0    1828            mov     dptr,#_buff
0621 75F040    1829            mov     b,#0x40
0624 C002      1830            push    ar2
0626 C003      1831            push    ar3
0628 120000    1832            lcall   _getstr1
062B           1833   ;        EFM8_JDY40_test.c:519: printf("Freq: %s\r\n", buff);
062B 74D0      1834            mov     a,#_buff
062D C0E0      1835            push    acc
062F 7418      1836            mov     a,#(_buff >> 8)
0631 C0E0      1837            push    acc
0633 7440      1838            mov     a,#0x40
0635 C0E0      1839            push    acc
0637 7470      1840            mov     a,#__str_14
0639 C0E0      1841            push    acc
063B 74CB      1842            mov     a,#(__str_14 >> 8)
063D C0E0      1843            push    acc
063F 7480      1844            mov     a,#0x80
0641 C0E0      1845            push    acc
0643 120000    1846            lcall   _printf
0646 E581      1847            mov     a,sp
0648 24FA      1848            add     a,#0xfa
064A F581      1849            mov     sp,a
064C           1850   ;        EFM8_JDY40_test.c:520: frequency = atof(buff); // change string -> float 
064C 9018D0    1851            mov     dptr,#_buff
064F 75F040    1852            mov     b,#0x40
0652 120000    1853            lcall   _atof
0655 AC82      1854            mov     r4,dpl
0657 AD83      1855            mov     r5,dph
0659 AEF0      1856            mov     r6,b
065B FF        1857            mov     r7,a
065C           1858   ;        EFM8_JDY40_test.c:523: if(frequency >= 2500){ //2500 is just a radom number we pick for now
065C E4        1859            clr     a
065D C0E0      1860            push    acc
065F 7440      1861            mov     a,#0x40
0661 C0E0      1862            push    acc
0663 741C      1863            mov     a,#0x1C
0665 C0E0      1864            push    acc
0667 7445      1865            mov     a,#0x45
0669 C0E0      1866            push    acc
066B 8C82      1867            mov     dpl,r4
066D 8D83      1868            mov     dph,r5
066F 8EF0      1869            mov     b,r6
0671 EF        1870            mov     a,r7
0672 120000    1871            lcall   ___fslt
0675 AC82      1872            mov     r4,dpl
0677 E581      1873            mov     a,sp
0679 24FC      1874            add     a,#0xfc
067B F581      1875            mov     sp,a
067D D003      1876            pop     ar3
067F D002      1877            pop     ar2
0681 EC        1878            mov     a,r4
0682 6000      1879            jz      L028020?
0684 020000    1880            ljmp    L028008?
0687           1881   L028020?:
0687           1882   ;        EFM8_JDY40_test.c:524: return;
0687 22        1883            ret
0688           1884            rseg R_CSEG
0688           1885   
0000           1886            rseg R_XINIT
0000           1887   
0000           1888            rseg R_CONST
0000           1889   __str_0:
0000 436F6D6D  1890            db 'Command: %s'
     616E643A
     202573
000B 00        1891            db 0x00
000C           1892   __str_1:
000C 52657370  1893            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1894            db 0x0D
0019 0A        1895            db 0x0A
001A 00        1896            db 0x00
001B           1897   __str_2:
001B 0D        1898            db 0x0D
001C 0A        1899            db 0x0A
001D 4A44592D  1900            db 'JDY-40 test'
     34302074
     657374
0028 0D        1901            db 0x0D
0029 0A        1902            db 0x0A
002A 00        1903            db 0x00
002B           1904   __str_3:
002B 41542B44  1905            db 'AT+DVID9944'
     56494439
     393434
0036 0D        1906            db 0x0D
0037 0A        1907            db 0x0A
0038 00        1908            db 0x00
0039           1909   __str_4:
0039 41542B56  1910            db 'AT+VER'
     4552
003F 0D        1911            db 0x0D
0040 0A        1912            db 0x0A
0041 00        1913            db 0x00
0042           1914   __str_5:
0042 41542B42  1915            db 'AT+BAUD'
     415544
0049 0D        1916            db 0x0D
004A 0A        1917            db 0x0A
004B 00        1918            db 0x00
004C           1919   __str_6:
004C 41542B52  1920            db 'AT+RFID'
     464944
0053 0D        1921            db 0x0D
0054 0A        1922            db 0x0A
0055 00        1923            db 0x00
0056           1924   __str_7:
0056 41542B44  1925            db 'AT+DVID'
     564944
005D 0D        1926            db 0x0D
005E 0A        1927            db 0x0A
005F 00        1928            db 0x00
0060           1929   __str_8:
0060 41542B52  1930            db 'AT+RFC'
     4643
0066 0D        1931            db 0x0D
0067 0A        1932            db 0x0A
0068 00        1933            db 0x00
0069           1934   __str_9:
0069 41542B50  1935            db 'AT+POWE'
     4F5745
0070 0D        1936            db 0x0D
0071 0A        1937            db 0x0A
0072 00        1938            db 0x00
0073           1939   __str_10:
0073 41542B43  1940            db 'AT+CLSS'
     4C5353
007A 0D        1941            db 0x0D
007B 0A        1942            db 0x0A
007C 00        1943            db 0x00
007D           1944   __str_11:
007D 0D        1945            db 0x0D
007E 0A        1946            db 0x0A
007F 50726573  1947            db 'Press and hold the BOOT button to transmit.'
=======
0000              4   ; This file was generated Fri Mar 22 16:24:49 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _LCDprint
0000             29            public _LCD_4BIT
0000             30            public _WriteCommand
0000             31            public _WriteData
0000             32            public _LCD_byte
0000             33            public _LCD_pulse
0000             34            public _SendATCommand
0000             35            public _waitms_or_RI1
0000             36            public _RXU1
0000             37            public _getstr1
0000             38            public _getchar1_with_timeout
0000             39            public _getchar1
0000             40            public _sendstr1
0000             41            public _putchar1
0000             42            public _UART1_Init
0000             43            public _Volts_at_Pin
0000             44            public _Get_ADC
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _waitms
0000             48            public _TIMER0_Init
0000             49            public _Timer3us
0000             50            public _InitADC
0000             51            public __c51_external_startup
0000             52            public _LCDprint_PARM_3
0000             53            public _buff
0000             54            public _LCDprint_PARM_2
0000             55   ;--------------------------------------------------------
0000             56   ; Special Function Registers
0000             57   ;--------------------------------------------------------
0000             58   _ACC            DATA 0xe0
0000             59   _ADC0ASAH       DATA 0xb6
0000             60   _ADC0ASAL       DATA 0xb5
0000             61   _ADC0ASCF       DATA 0xa1
0000             62   _ADC0ASCT       DATA 0xc7
0000             63   _ADC0CF0        DATA 0xbc
0000             64   _ADC0CF1        DATA 0xb9
0000             65   _ADC0CF2        DATA 0xdf
0000             66   _ADC0CN0        DATA 0xe8
0000             67   _ADC0CN1        DATA 0xb2
0000             68   _ADC0CN2        DATA 0xb3
0000             69   _ADC0GTH        DATA 0xc4
0000             70   _ADC0GTL        DATA 0xc3
0000             71   _ADC0H          DATA 0xbe
0000             72   _ADC0L          DATA 0xbd
0000             73   _ADC0LTH        DATA 0xc6
0000             74   _ADC0LTL        DATA 0xc5
0000             75   _ADC0MX         DATA 0xbb
0000             76   _B              DATA 0xf0
0000             77   _CKCON0         DATA 0x8e
0000             78   _CKCON1         DATA 0xa6
0000             79   _CLEN0          DATA 0xc6
0000             80   _CLIE0          DATA 0xc7
0000             81   _CLIF0          DATA 0xe8
0000             82   _CLKSEL         DATA 0xa9
0000             83   _CLOUT0         DATA 0xd1
0000             84   _CLU0CF         DATA 0xb1
0000             85   _CLU0FN         DATA 0xaf
0000             86   _CLU0MX         DATA 0x84
0000             87   _CLU1CF         DATA 0xb3
0000             88   _CLU1FN         DATA 0xb2
0000             89   _CLU1MX         DATA 0x85
0000             90   _CLU2CF         DATA 0xb6
0000             91   _CLU2FN         DATA 0xb5
0000             92   _CLU2MX         DATA 0x91
0000             93   _CLU3CF         DATA 0xbf
0000             94   _CLU3FN         DATA 0xbe
0000             95   _CLU3MX         DATA 0xae
0000             96   _CMP0CN0        DATA 0x9b
0000             97   _CMP0CN1        DATA 0x99
0000             98   _CMP0MD         DATA 0x9d
0000             99   _CMP0MX         DATA 0x9f
0000            100   _CMP1CN0        DATA 0xbf
0000            101   _CMP1CN1        DATA 0xac
0000            102   _CMP1MD         DATA 0xab
0000            103   _CMP1MX         DATA 0xaa
0000            104   _CRC0CN0        DATA 0xce
0000            105   _CRC0CN1        DATA 0x86
0000            106   _CRC0CNT        DATA 0xd3
0000            107   _CRC0DAT        DATA 0xcb
0000            108   _CRC0FLIP       DATA 0xcf
0000            109   _CRC0IN         DATA 0xca
0000            110   _CRC0ST         DATA 0xd2
0000            111   _DAC0CF0        DATA 0x91
0000            112   _DAC0CF1        DATA 0x92
0000            113   _DAC0H          DATA 0x85
0000            114   _DAC0L          DATA 0x84
0000            115   _DAC1CF0        DATA 0x93
0000            116   _DAC1CF1        DATA 0x94
0000            117   _DAC1H          DATA 0x8a
0000            118   _DAC1L          DATA 0x89
0000            119   _DAC2CF0        DATA 0x95
0000            120   _DAC2CF1        DATA 0x96
0000            121   _DAC2H          DATA 0x8c
0000            122   _DAC2L          DATA 0x8b
0000            123   _DAC3CF0        DATA 0x9a
0000            124   _DAC3CF1        DATA 0x9c
0000            125   _DAC3H          DATA 0x8e
0000            126   _DAC3L          DATA 0x8d
0000            127   _DACGCF0        DATA 0x88
0000            128   _DACGCF1        DATA 0x98
0000            129   _DACGCF2        DATA 0xa2
0000            130   _DERIVID        DATA 0xad
0000            131   _DEVICEID       DATA 0xb5
0000            132   _DPH            DATA 0x83
0000            133   _DPL            DATA 0x82
0000            134   _EIE1           DATA 0xe6
0000            135   _EIE2           DATA 0xf3
0000            136   _EIP1           DATA 0xbb
0000            137   _EIP1H          DATA 0xee
0000            138   _EIP2           DATA 0xed
0000            139   _EIP2H          DATA 0xf6
0000            140   _EMI0CN         DATA 0xe7
0000            141   _FLKEY          DATA 0xb7
0000            142   _HFO0CAL        DATA 0xc7
0000            143   _HFO1CAL        DATA 0xd6
0000            144   _HFOCN          DATA 0xef
0000            145   _I2C0ADM        DATA 0xff
0000            146   _I2C0CN0        DATA 0xba
0000            147   _I2C0DIN        DATA 0xbc
0000            148   _I2C0DOUT       DATA 0xbb
0000            149   _I2C0FCN0       DATA 0xad
0000            150   _I2C0FCN1       DATA 0xab
0000            151   _I2C0FCT        DATA 0xf5
0000            152   _I2C0SLAD       DATA 0xbd
0000            153   _I2C0STAT       DATA 0xb9
0000            154   _IE             DATA 0xa8
0000            155   _IP             DATA 0xb8
0000            156   _IPH            DATA 0xf2
0000            157   _IT01CF         DATA 0xe4
0000            158   _LFO0CN         DATA 0xb1
0000            159   _P0             DATA 0x80
0000            160   _P0MASK         DATA 0xfe
0000            161   _P0MAT          DATA 0xfd
0000            162   _P0MDIN         DATA 0xf1
0000            163   _P0MDOUT        DATA 0xa4
0000            164   _P0SKIP         DATA 0xd4
0000            165   _P1             DATA 0x90
0000            166   _P1MASK         DATA 0xee
0000            167   _P1MAT          DATA 0xed
0000            168   _P1MDIN         DATA 0xf2
0000            169   _P1MDOUT        DATA 0xa5
0000            170   _P1SKIP         DATA 0xd5
0000            171   _P2             DATA 0xa0
0000            172   _P2MASK         DATA 0xfc
0000            173   _P2MAT          DATA 0xfb
0000            174   _P2MDIN         DATA 0xf3
0000            175   _P2MDOUT        DATA 0xa6
0000            176   _P2SKIP         DATA 0xcc
0000            177   _P3             DATA 0xb0
0000            178   _P3MDIN         DATA 0xf4
0000            179   _P3MDOUT        DATA 0x9c
0000            180   _PCA0CENT       DATA 0x9e
0000            181   _PCA0CLR        DATA 0x9c
0000            182   _PCA0CN0        DATA 0xd8
0000            183   _PCA0CPH0       DATA 0xfc
0000            184   _PCA0CPH1       DATA 0xea
0000            185   _PCA0CPH2       DATA 0xec
0000            186   _PCA0CPH3       DATA 0xf5
0000            187   _PCA0CPH4       DATA 0x85
0000            188   _PCA0CPH5       DATA 0xde
0000            189   _PCA0CPL0       DATA 0xfb
0000            190   _PCA0CPL1       DATA 0xe9
0000            191   _PCA0CPL2       DATA 0xeb
0000            192   _PCA0CPL3       DATA 0xf4
0000            193   _PCA0CPL4       DATA 0x84
0000            194   _PCA0CPL5       DATA 0xdd
0000            195   _PCA0CPM0       DATA 0xda
0000            196   _PCA0CPM1       DATA 0xdb
0000            197   _PCA0CPM2       DATA 0xdc
0000            198   _PCA0CPM3       DATA 0xae
0000            199   _PCA0CPM4       DATA 0xaf
0000            200   _PCA0CPM5       DATA 0xcc
0000            201   _PCA0H          DATA 0xfa
0000            202   _PCA0L          DATA 0xf9
0000            203   _PCA0MD         DATA 0xd9
0000            204   _PCA0POL        DATA 0x96
0000            205   _PCA0PWM        DATA 0xf7
0000            206   _PCON0          DATA 0x87
0000            207   _PCON1          DATA 0xcd
0000            208   _PFE0CN         DATA 0xc1
0000            209   _PRTDRV         DATA 0xf6
0000            210   _PSCTL          DATA 0x8f
0000            211   _PSTAT0         DATA 0xaa
0000            212   _PSW            DATA 0xd0
0000            213   _REF0CN         DATA 0xd1
0000            214   _REG0CN         DATA 0xc9
0000            215   _REVID          DATA 0xb6
0000            216   _RSTSRC         DATA 0xef
0000            217   _SBCON1         DATA 0x94
0000            218   _SBRLH1         DATA 0x96
0000            219   _SBRLL1         DATA 0x95
0000            220   _SBUF           DATA 0x99
0000            221   _SBUF0          DATA 0x99
0000            222   _SBUF1          DATA 0x92
0000            223   _SCON           DATA 0x98
0000            224   _SCON0          DATA 0x98
0000            225   _SCON1          DATA 0xc8
0000            226   _SFRPAGE        DATA 0xa7
0000            227   _SFRPGCN        DATA 0xbc
0000            228   _SFRSTACK       DATA 0xd7
0000            229   _SMB0ADM        DATA 0xd6
0000            230   _SMB0ADR        DATA 0xd7
0000            231   _SMB0CF         DATA 0xc1
0000            232   _SMB0CN0        DATA 0xc0
0000            233   _SMB0DAT        DATA 0xc2
0000            234   _SMB0FCN0       DATA 0xc3
0000            235   _SMB0FCN1       DATA 0xc4
0000            236   _SMB0FCT        DATA 0xef
0000            237   _SMB0RXLN       DATA 0xc5
0000            238   _SMB0TC         DATA 0xac
0000            239   _SMOD1          DATA 0x93
0000            240   _SP             DATA 0x81
0000            241   _SPI0CFG        DATA 0xa1
0000            242   _SPI0CKR        DATA 0xa2
0000            243   _SPI0CN0        DATA 0xf8
0000            244   _SPI0DAT        DATA 0xa3
0000            245   _SPI0FCN0       DATA 0x9a
0000            246   _SPI0FCN1       DATA 0x9b
0000            247   _SPI0FCT        DATA 0xf7
0000            248   _SPI0PCF        DATA 0xdf
0000            249   _TCON           DATA 0x88
0000            250   _TH0            DATA 0x8c
0000            251   _TH1            DATA 0x8d
0000            252   _TL0            DATA 0x8a
0000            253   _TL1            DATA 0x8b
0000            254   _TMOD           DATA 0x89
0000            255   _TMR2CN0        DATA 0xc8
0000            256   _TMR2CN1        DATA 0xfd
0000            257   _TMR2H          DATA 0xcf
0000            258   _TMR2L          DATA 0xce
0000            259   _TMR2RLH        DATA 0xcb
0000            260   _TMR2RLL        DATA 0xca
0000            261   _TMR3CN0        DATA 0x91
0000            262   _TMR3CN1        DATA 0xfe
0000            263   _TMR3H          DATA 0x95
0000            264   _TMR3L          DATA 0x94
0000            265   _TMR3RLH        DATA 0x93
0000            266   _TMR3RLL        DATA 0x92
0000            267   _TMR4CN0        DATA 0x98
0000            268   _TMR4CN1        DATA 0xff
0000            269   _TMR4H          DATA 0xa5
0000            270   _TMR4L          DATA 0xa4
0000            271   _TMR4RLH        DATA 0xa3
0000            272   _TMR4RLL        DATA 0xa2
0000            273   _TMR5CN0        DATA 0xc0
0000            274   _TMR5CN1        DATA 0xf1
0000            275   _TMR5H          DATA 0xd5
0000            276   _TMR5L          DATA 0xd4
0000            277   _TMR5RLH        DATA 0xd3
0000            278   _TMR5RLL        DATA 0xd2
0000            279   _UART0PCF       DATA 0xd9
0000            280   _UART1FCN0      DATA 0x9d
0000            281   _UART1FCN1      DATA 0xd8
0000            282   _UART1FCT       DATA 0xfa
0000            283   _UART1LIN       DATA 0x9e
0000            284   _UART1PCF       DATA 0xda
0000            285   _VDM0CN         DATA 0xff
0000            286   _WDTCN          DATA 0x97
0000            287   _XBR0           DATA 0xe1
0000            288   _XBR1           DATA 0xe2
0000            289   _XBR2           DATA 0xe3
0000            290   _XOSC0CN        DATA 0x86
0000            291   _DPTR           DATA 0x8382
0000            292   _TMR2RL         DATA 0xcbca
0000            293   _TMR3RL         DATA 0x9392
0000            294   _TMR4RL         DATA 0xa3a2
0000            295   _TMR5RL         DATA 0xd3d2
0000            296   _TMR0           DATA 0x8c8a
0000            297   _TMR1           DATA 0x8d8b
0000            298   _TMR2           DATA 0xcfce
0000            299   _TMR3           DATA 0x9594
0000            300   _TMR4           DATA 0xa5a4
0000            301   _TMR5           DATA 0xd5d4
0000            302   _SBRL1          DATA 0x9695
0000            303   _PCA0           DATA 0xfaf9
0000            304   _PCA0CP0        DATA 0xfcfb
0000            305   _PCA0CP1        DATA 0xeae9
0000            306   _PCA0CP2        DATA 0xeceb
0000            307   _PCA0CP3        DATA 0xf5f4
0000            308   _PCA0CP4        DATA 0x8584
0000            309   _PCA0CP5        DATA 0xdedd
0000            310   _ADC0ASA        DATA 0xb6b5
0000            311   _ADC0GT         DATA 0xc4c3
0000            312   _ADC0           DATA 0xbebd
0000            313   _ADC0LT         DATA 0xc6c5
0000            314   _DAC0           DATA 0x8584
0000            315   _DAC1           DATA 0x8a89
0000            316   _DAC2           DATA 0x8c8b
0000            317   _DAC3           DATA 0x8e8d
0000            318   ;--------------------------------------------------------
0000            319   ; special function bits
0000            320   ;--------------------------------------------------------
0000            321   _ACC_0          BIT 0xe0
0000            322   _ACC_1          BIT 0xe1
0000            323   _ACC_2          BIT 0xe2
0000            324   _ACC_3          BIT 0xe3
0000            325   _ACC_4          BIT 0xe4
0000            326   _ACC_5          BIT 0xe5
0000            327   _ACC_6          BIT 0xe6
0000            328   _ACC_7          BIT 0xe7
0000            329   _TEMPE          BIT 0xe8
0000            330   _ADGN0          BIT 0xe9
0000            331   _ADGN1          BIT 0xea
0000            332   _ADWINT         BIT 0xeb
0000            333   _ADBUSY         BIT 0xec
0000            334   _ADINT          BIT 0xed
0000            335   _IPOEN          BIT 0xee
0000            336   _ADEN           BIT 0xef
0000            337   _B_0            BIT 0xf0
0000            338   _B_1            BIT 0xf1
0000            339   _B_2            BIT 0xf2
0000            340   _B_3            BIT 0xf3
0000            341   _B_4            BIT 0xf4
0000            342   _B_5            BIT 0xf5
0000            343   _B_6            BIT 0xf6
0000            344   _B_7            BIT 0xf7
0000            345   _C0FIF          BIT 0xe8
0000            346   _C0RIF          BIT 0xe9
0000            347   _C1FIF          BIT 0xea
0000            348   _C1RIF          BIT 0xeb
0000            349   _C2FIF          BIT 0xec
0000            350   _C2RIF          BIT 0xed
0000            351   _C3FIF          BIT 0xee
0000            352   _C3RIF          BIT 0xef
0000            353   _D1SRC0         BIT 0x88
0000            354   _D1SRC1         BIT 0x89
0000            355   _D1AMEN         BIT 0x8a
0000            356   _D01REFSL       BIT 0x8b
0000            357   _D3SRC0         BIT 0x8c
0000            358   _D3SRC1         BIT 0x8d
0000            359   _D3AMEN         BIT 0x8e
0000            360   _D23REFSL       BIT 0x8f
0000            361   _D0UDIS         BIT 0x98
0000            362   _D1UDIS         BIT 0x99
0000            363   _D2UDIS         BIT 0x9a
0000            364   _D3UDIS         BIT 0x9b
0000            365   _EX0            BIT 0xa8
0000            366   _ET0            BIT 0xa9
0000            367   _EX1            BIT 0xaa
0000            368   _ET1            BIT 0xab
0000            369   _ES0            BIT 0xac
0000            370   _ET2            BIT 0xad
0000            371   _ESPI0          BIT 0xae
0000            372   _EA             BIT 0xaf
0000            373   _PX0            BIT 0xb8
0000            374   _PT0            BIT 0xb9
0000            375   _PX1            BIT 0xba
0000            376   _PT1            BIT 0xbb
0000            377   _PS0            BIT 0xbc
0000            378   _PT2            BIT 0xbd
0000            379   _PSPI0          BIT 0xbe
0000            380   _P0_0           BIT 0x80
0000            381   _P0_1           BIT 0x81
0000            382   _P0_2           BIT 0x82
0000            383   _P0_3           BIT 0x83
0000            384   _P0_4           BIT 0x84
0000            385   _P0_5           BIT 0x85
0000            386   _P0_6           BIT 0x86
0000            387   _P0_7           BIT 0x87
0000            388   _P1_0           BIT 0x90
0000            389   _P1_1           BIT 0x91
0000            390   _P1_2           BIT 0x92
0000            391   _P1_3           BIT 0x93
0000            392   _P1_4           BIT 0x94
0000            393   _P1_5           BIT 0x95
0000            394   _P1_6           BIT 0x96
0000            395   _P1_7           BIT 0x97
0000            396   _P2_0           BIT 0xa0
0000            397   _P2_1           BIT 0xa1
0000            398   _P2_2           BIT 0xa2
0000            399   _P2_3           BIT 0xa3
0000            400   _P2_4           BIT 0xa4
0000            401   _P2_5           BIT 0xa5
0000            402   _P2_6           BIT 0xa6
0000            403   _P3_0           BIT 0xb0
0000            404   _P3_1           BIT 0xb1
0000            405   _P3_2           BIT 0xb2
0000            406   _P3_3           BIT 0xb3
0000            407   _P3_4           BIT 0xb4
0000            408   _P3_7           BIT 0xb7
0000            409   _CCF0           BIT 0xd8
0000            410   _CCF1           BIT 0xd9
0000            411   _CCF2           BIT 0xda
0000            412   _CCF3           BIT 0xdb
0000            413   _CCF4           BIT 0xdc
0000            414   _CCF5           BIT 0xdd
0000            415   _CR             BIT 0xde
0000            416   _CF             BIT 0xdf
0000            417   _PARITY         BIT 0xd0
0000            418   _F1             BIT 0xd1
0000            419   _OV             BIT 0xd2
0000            420   _RS0            BIT 0xd3
0000            421   _RS1            BIT 0xd4
0000            422   _F0             BIT 0xd5
0000            423   _AC             BIT 0xd6
0000            424   _CY             BIT 0xd7
0000            425   _RI             BIT 0x98
0000            426   _TI             BIT 0x99
0000            427   _RB8            BIT 0x9a
0000            428   _TB8            BIT 0x9b
0000            429   _REN            BIT 0x9c
0000            430   _CE             BIT 0x9d
0000            431   _SMODE          BIT 0x9e
0000            432   _RI1            BIT 0xc8
0000            433   _TI1            BIT 0xc9
0000            434   _RBX1           BIT 0xca
0000            435   _TBX1           BIT 0xcb
0000            436   _REN1           BIT 0xcc
0000            437   _PERR1          BIT 0xcd
0000            438   _OVR1           BIT 0xce
0000            439   _SI             BIT 0xc0
0000            440   _ACK            BIT 0xc1
0000            441   _ARBLOST        BIT 0xc2
0000            442   _ACKRQ          BIT 0xc3
0000            443   _STO            BIT 0xc4
0000            444   _STA            BIT 0xc5
0000            445   _TXMODE         BIT 0xc6
0000            446   _MASTER         BIT 0xc7
0000            447   _SPIEN          BIT 0xf8
0000            448   _TXNF           BIT 0xf9
0000            449   _NSSMD0         BIT 0xfa
0000            450   _NSSMD1         BIT 0xfb
0000            451   _RXOVRN         BIT 0xfc
0000            452   _MODF           BIT 0xfd
0000            453   _WCOL           BIT 0xfe
0000            454   _SPIF           BIT 0xff
0000            455   _IT0            BIT 0x88
0000            456   _IE0            BIT 0x89
0000            457   _IT1            BIT 0x8a
0000            458   _IE1            BIT 0x8b
0000            459   _TR0            BIT 0x8c
0000            460   _TF0            BIT 0x8d
0000            461   _TR1            BIT 0x8e
0000            462   _TF1            BIT 0x8f
0000            463   _T2XCLK0        BIT 0xc8
0000            464   _T2XCLK1        BIT 0xc9
0000            465   _TR2            BIT 0xca
0000            466   _T2SPLIT        BIT 0xcb
0000            467   _TF2CEN         BIT 0xcc
0000            468   _TF2LEN         BIT 0xcd
0000            469   _TF2L           BIT 0xce
0000            470   _TF2H           BIT 0xcf
0000            471   _T4XCLK0        BIT 0x98
0000            472   _T4XCLK1        BIT 0x99
0000            473   _TR4            BIT 0x9a
0000            474   _T4SPLIT        BIT 0x9b
0000            475   _TF4CEN         BIT 0x9c
0000            476   _TF4LEN         BIT 0x9d
0000            477   _TF4L           BIT 0x9e
0000            478   _TF4H           BIT 0x9f
0000            479   _T5XCLK0        BIT 0xc0
0000            480   _T5XCLK1        BIT 0xc1
0000            481   _TR5            BIT 0xc2
0000            482   _T5SPLIT        BIT 0xc3
0000            483   _TF5CEN         BIT 0xc4
0000            484   _TF5LEN         BIT 0xc5
0000            485   _TF5L           BIT 0xc6
0000            486   _TF5H           BIT 0xc7
0000            487   _RIE            BIT 0xd8
0000            488   _RXTO0          BIT 0xd9
0000            489   _RXTO1          BIT 0xda
0000            490   _RFRQ           BIT 0xdb
0000            491   _TIE            BIT 0xdc
0000            492   _TXHOLD         BIT 0xdd
0000            493   _TXNF1          BIT 0xde
0000            494   _TFRQ           BIT 0xdf
0000            495   ;--------------------------------------------------------
0000            496   ; overlayable register banks
0000            497   ;--------------------------------------------------------
0000            498            rbank0 segment data overlay
0000            499   ;--------------------------------------------------------
0000            500   ; internal ram data
0000            501   ;--------------------------------------------------------
0000            502            rseg R_DSEG
0000            503   _LCDprint_PARM_2:
0000            504            ds 1
0001            505   ;--------------------------------------------------------
0001            506   ; overlayable items in internal ram 
0001            507   ;--------------------------------------------------------
0000            508            rseg    R_OSEG
0000            509            rseg    R_OSEG
0000            510   _InitPinADC_PARM_2:
0000            511            ds 1
0001            512            rseg    R_OSEG
0001            513            rseg    R_OSEG
0001            514            rseg    R_OSEG
0001            515   ;--------------------------------------------------------
0001            516   ; indirectly addressable internal ram data
0001            517   ;--------------------------------------------------------
0000            518            rseg R_ISEG
0000            519   _buff:
0000            520            ds 20
0014            521   ;--------------------------------------------------------
0014            522   ; absolute internal ram data
0014            523   ;--------------------------------------------------------
0000            524            DSEG
0000            525   ;--------------------------------------------------------
0000            526   ; bit data
0000            527   ;--------------------------------------------------------
0000            528            rseg R_BSEG
0000            529   _LCDprint_PARM_3:
0000            530            DBIT    1
0001            531   ;--------------------------------------------------------
0001            532   ; paged external ram data
0001            533   ;--------------------------------------------------------
0000            534            rseg R_PSEG
0000            535   ;--------------------------------------------------------
0000            536   ; external ram data
0000            537   ;--------------------------------------------------------
0000            538            rseg R_XSEG
0000            539   ;--------------------------------------------------------
0000            540   ; absolute external ram data
0000            541   ;--------------------------------------------------------
0000            542            XSEG
0000            543   ;--------------------------------------------------------
0000            544   ; external initialized ram data
0000            545   ;--------------------------------------------------------
0000            546            rseg R_IXSEG
0000            547            rseg R_HOME
0000            548            rseg R_GSINIT
0000            549            rseg R_CSEG
0000            550   ;--------------------------------------------------------
0000            551   ; Reset entry point and interrupt vectors
0000            552   ;--------------------------------------------------------
0000            553            CSEG at 0x0000
0000 020000     554            ljmp    _crt0
0003            555   ;--------------------------------------------------------
0003            556   ; global & static initialisations
0003            557   ;--------------------------------------------------------
0000            558            rseg R_HOME
0000            559            rseg R_GSINIT
0000            560            rseg R_GSINIT
0000            561   ;--------------------------------------------------------
0000            562   ; data variables initialization
0000            563   ;--------------------------------------------------------
0000            564            rseg R_DINIT
0000            565            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            566   ;--------------------------------------------------------
0000            567   ; code
0000            568   ;--------------------------------------------------------
0000            569            rseg R_CSEG
0000            570   ;------------------------------------------------------------
0000            571   ;Allocation info for local variables in function '_c51_external_startup'
0000            572   ;------------------------------------------------------------
0000            573   ;------------------------------------------------------------
0000            574   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:31: char _c51_external_startup (void)
0000            575   ;        -----------------------------------------
0000            576   ;         function _c51_external_startup
0000            577   ;        -----------------------------------------
0000            578   __c51_external_startup:
0000            579            using   0
0000            580   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:34: SFRPAGE = 0x00;
0000 75A700     581            mov     _SFRPAGE,#0x00
0003            582   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:35: WDTCN = 0xDE; //First key
0003 7597DE     583            mov     _WDTCN,#0xDE
0006            584   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:36: WDTCN = 0xAD; //Second key
0006 7597AD     585            mov     _WDTCN,#0xAD
0009            586   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:38: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     587            mov     _VDM0CN,#0x80
000C            588   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:39: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     589            mov     _RSTSRC,#0x06
000F            590   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:46: SFRPAGE = 0x10;
000F 75A710     591            mov     _SFRPAGE,#0x10
0012            592   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:47: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     593            mov     _PFE0CN,#0x20
0015            594   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:48: SFRPAGE = 0x00;
0015 75A700     595            mov     _SFRPAGE,#0x00
0018            596   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:69: CLKSEL = 0x00;
0018 75A900     597            mov     _CLKSEL,#0x00
001B            598   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:70: CLKSEL = 0x00;
001B 75A900     599            mov     _CLKSEL,#0x00
001E            600   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:71: while ((CLKSEL & 0x80) == 0);
001E            601   L002001?:
001E E5A9       602            mov     a,_CLKSEL
0020 30E7C0     603            jnb     acc.7,L002001?
0023            604   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:72: CLKSEL = 0x03;
0023 75A903     605            mov     _CLKSEL,#0x03
0026            606   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:73: CLKSEL = 0x03;
0026 75A903     607            mov     _CLKSEL,#0x03
0029            608   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:74: while ((CLKSEL & 0x80) == 0);
0029            609   L002004?:
0029 E5A9       610            mov     a,_CLKSEL
002B 30E740     611            jnb     acc.7,L002004?
002E            612   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:79: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     613            orl     _P0MDOUT,#0x11
0031            614   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:80: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     615            orl     _P2MDOUT,#0x01
0034            616   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:81: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     617            mov     _XBR0,#0x01
0037            618   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:82: XBR1     = 0X00;
0037 75E200     619            mov     _XBR1,#0x00
003A            620   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:83: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     621            mov     _XBR2,#0x41
003D            622   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:89: SCON0 = 0x10;
003D 759810     623            mov     _SCON0,#0x10
0040            624   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:90: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     625            mov     _TH1,#0xE6
0043            626   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:91: TL1 = TH1;      // Init Timer1
0043 858D8B     627            mov     _TL1,_TH1
0046            628   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:92: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     629            anl     _TMOD,#0x0F
0049            630   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:93: TMOD |=  0x20;                       
0049 438920     631            orl     _TMOD,#0x20
004C            632   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:94: TR1 = 1; // START Timer1
004C D28E       633            setb    _TR1
004E            634   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:95: TI = 1;  // Indicate TX0 ready
004E D299       635            setb    _TI
0050            636   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:97: return 0;
0050 758200     637            mov     dpl,#0x00
0053 22         638            ret
0054            639   ;------------------------------------------------------------
0054            640   ;Allocation info for local variables in function 'InitADC'
0054            641   ;------------------------------------------------------------
0054            642   ;------------------------------------------------------------
0054            643   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:100: void InitADC (void)
0054            644   ;        -----------------------------------------
0054            645   ;         function InitADC
0054            646   ;        -----------------------------------------
0054            647   _InitADC:
0054            648   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:102: SFRPAGE = 0x00;
0054 75A700     649            mov     _SFRPAGE,#0x00
0057            650   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:103: ADEN=0; // Disable ADC
0057 C2EF       651            clr     _ADEN
0059            652   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:108: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     653            mov     _ADC0CN1,#0x80
005C            654   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:112: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     655            mov     _ADC0CF0,#0x20
005F            656   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:116: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     657            mov     _ADC0CF1,#0x1E
0062            658   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:125: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     659            mov     _ADC0CN0,#0x00
0065            660   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:130: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     661            mov     _ADC0CF2,#0x3F
0068            662   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:134: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     663            mov     _ADC0CN2,#0x00
006B            664   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:136: ADEN=1; // Enable ADC
006B D2EF       665            setb    _ADEN
006D 22         666            ret
006E            667   ;------------------------------------------------------------
006E            668   ;Allocation info for local variables in function 'Timer3us'
006E            669   ;------------------------------------------------------------
006E            670   ;us                        Allocated to registers r2 
006E            671   ;i                         Allocated to registers r3 
006E            672   ;------------------------------------------------------------
006E            673   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:141: void Timer3us(unsigned char us)
006E            674   ;        -----------------------------------------
006E            675   ;         function Timer3us
006E            676   ;        -----------------------------------------
006E            677   _Timer3us:
006E AA82       678            mov     r2,dpl
0070            679   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:146: CKCON0|=0b_0100_0000;
0070 438E40     680            orl     _CKCON0,#0x40
0073            681   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:148: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     682            mov     _TMR3RL,#0xB8
0076 7593FF     683            mov     (_TMR3RL >> 8),#0xFF
0079            684   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:149: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     685            mov     _TMR3,_TMR3RL
007C 859395     686            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            687   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:151: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     688            mov     _TMR3CN0,#0x04
0082            689   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:152: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       690            mov     r3,#0x00
0084            691   L004004?:
0084 C3         692            clr     c
0085 EB         693            mov     a,r3
0086 9A         694            subb    a,r2
0087 5000       695            jnc     L004007?
0089            696   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:154: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            697   L004001?:
0089 E591       698            mov     a,_TMR3CN0
008B 30E740     699            jnb     acc.7,L004001?
008E            700   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:155: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     701            anl     _TMR3CN0,#0x7F
0091            702   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:152: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         703            inc     r3
0092 8000       704            sjmp    L004004?
0094            705   L004007?:
0094            706   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:157: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     707            mov     _TMR3CN0,#0x00
0097 22         708            ret
0098            709   ;------------------------------------------------------------
0098            710   ;Allocation info for local variables in function 'TIMER0_Init'
0098            711   ;------------------------------------------------------------
0098            712   ;------------------------------------------------------------
0098            713   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:160: void TIMER0_Init(void)
0098            714   ;        -----------------------------------------
0098            715   ;         function TIMER0_Init
0098            716   ;        -----------------------------------------
0098            717   _TIMER0_Init:
0098            718   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:162: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0098 5389F0     719            anl     _TMOD,#0xF0
009B            720   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:163: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
009B 438901     721            orl     _TMOD,#0x01
009E            722   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:164: TR0=0; // Stop Timer/Counter 0
009E C28C       723            clr     _TR0
00A0 22         724            ret
00A1            725   ;------------------------------------------------------------
00A1            726   ;Allocation info for local variables in function 'waitms'
00A1            727   ;------------------------------------------------------------
00A1            728   ;ms                        Allocated to registers r2 r3 
00A1            729   ;j                         Allocated to registers r4 r5 
00A1            730   ;k                         Allocated to registers r6 
00A1            731   ;------------------------------------------------------------
00A1            732   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:167: void waitms (unsigned int ms)
00A1            733   ;        -----------------------------------------
00A1            734   ;         function waitms
00A1            735   ;        -----------------------------------------
00A1            736   _waitms:
00A1 AA82       737            mov     r2,dpl
00A3 AB83       738            mov     r3,dph
00A5            739   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:171: for(j=0; j<ms; j++)
00A5 7C00       740            mov     r4,#0x00
00A7 7D00       741            mov     r5,#0x00
00A9            742   L006005?:
00A9 C3         743            clr     c
00AA EC         744            mov     a,r4
00AB 9A         745            subb    a,r2
00AC ED         746            mov     a,r5
00AD 9B         747            subb    a,r3
00AE 5000       748            jnc     L006009?
00B0            749   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:172: for (k=0; k<4; k++) Timer3us(250);
00B0 7E00       750            mov     r6,#0x00
00B2            751   L006001?:
00B2 BE0480     752            cjne    r6,#0x04,L006018?
00B5            753   L006018?:
00B5 5000       754            jnc     L006007?
00B7 7582FA     755            mov     dpl,#0xFA
00BA C002       756            push    ar2
00BC C003       757            push    ar3
00BE C004       758            push    ar4
00C0 C005       759            push    ar5
00C2 C006       760            push    ar6
00C4 120000     761            lcall   _Timer3us
00C7 D006       762            pop     ar6
00C9 D005       763            pop     ar5
00CB D004       764            pop     ar4
00CD D003       765            pop     ar3
00CF D002       766            pop     ar2
00D1 0E         767            inc     r6
00D2 8000       768            sjmp    L006001?
00D4            769   L006007?:
00D4            770   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:171: for(j=0; j<ms; j++)
00D4 0C         771            inc     r4
00D5 BC00C0     772            cjne    r4,#0x00,L006005?
00D8 0D         773            inc     r5
00D9 8000       774            sjmp    L006005?
00DB            775   L006009?:
00DB 22         776            ret
00DC            777   ;------------------------------------------------------------
00DC            778   ;Allocation info for local variables in function 'InitPinADC'
00DC            779   ;------------------------------------------------------------
00DC            780   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00DC            781   ;portno                    Allocated to registers r2 
00DC            782   ;mask                      Allocated to registers r3 
00DC            783   ;------------------------------------------------------------
00DC            784   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:175: void InitPinADC (unsigned char portno, unsigned char pinno)
00DC            785   ;        -----------------------------------------
00DC            786   ;         function InitPinADC
00DC            787   ;        -----------------------------------------
00DC            788   _InitPinADC:
00DC AA82       789            mov     r2,dpl
00DE            790   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:179: mask=1<<pinno;
00DE 8538F0     791            mov     b,_InitPinADC_PARM_2
00E1 05F0       792            inc     b
00E3 7401       793            mov     a,#0x01
00E5 8000       794            sjmp    L007013?
00E7            795   L007011?:
00E7 25E0       796            add     a,acc
00E9            797   L007013?:
00E9 D5F080     798            djnz    b,L007011?
00EC FB         799            mov     r3,a
00ED            800   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:181: SFRPAGE = 0x20;
00ED 75A720     801            mov     _SFRPAGE,#0x20
00F0            802   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:182: switch (portno)
00F0 BA00C0     803            cjne    r2,#0x00,L007014?
00F3 8000       804            sjmp    L007001?
00F5            805   L007014?:
00F5 BA0140     806            cjne    r2,#0x01,L007015?
00F8 8000       807            sjmp    L007002?
00FA            808   L007015?:
00FA            809   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:184: case 0:
00FA BA02C0     810            cjne    r2,#0x02,L007005?
00FD 8000       811            sjmp    L007003?
00FF            812   L007001?:
00FF            813   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:185: P0MDIN &= (~mask); // Set pin as analog input
00FF EB         814            mov     a,r3
0100 F4         815            cpl     a
0101 FA         816            mov     r2,a
0102 52F1       817            anl     _P0MDIN,a
0104            818   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:186: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0104 EB         819            mov     a,r3
0105 42D4       820            orl     _P0SKIP,a
0107            821   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:187: break;
0107            822   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:188: case 1:
0107 8000       823            sjmp    L007005?
0109            824   L007002?:
0109            825   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:189: P1MDIN &= (~mask); // Set pin as analog input
0109 EB         826            mov     a,r3
010A F4         827            cpl     a
010B FA         828            mov     r2,a
010C 52F2       829            anl     _P1MDIN,a
010E            830   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:190: P1SKIP |= mask; // Skip Crossbar decoding for this pin
010E EB         831            mov     a,r3
010F 42D5       832            orl     _P1SKIP,a
0111            833   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:191: break;
0111            834   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:192: case 2:
0111 8000       835            sjmp    L007005?
0113            836   L007003?:
0113            837   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:193: P2MDIN &= (~mask); // Set pin as analog input
0113 EB         838            mov     a,r3
0114 F4         839            cpl     a
0115 FA         840            mov     r2,a
0116 52F3       841            anl     _P2MDIN,a
0118            842   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:194: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0118 EB         843            mov     a,r3
0119 42CC       844            orl     _P2SKIP,a
011B            845   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:198: }
011B            846   L007005?:
011B            847   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:199: SFRPAGE = 0x00;
011B 75A700     848            mov     _SFRPAGE,#0x00
011E 22         849            ret
011F            850   ;------------------------------------------------------------
011F            851   ;Allocation info for local variables in function 'ADC_at_Pin'
011F            852   ;------------------------------------------------------------
011F            853   ;pin                       Allocated to registers 
011F            854   ;------------------------------------------------------------
011F            855   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:202: unsigned int ADC_at_Pin(unsigned char pin)
011F            856   ;        -----------------------------------------
011F            857   ;         function ADC_at_Pin
011F            858   ;        -----------------------------------------
011F            859   _ADC_at_Pin:
011F 8582BB     860            mov     _ADC0MX,dpl
0122            861   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:205: ADINT = 0;
0122 C2ED       862            clr     _ADINT
0124            863   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:206: ADBUSY = 1;     // Convert voltage at the pin
0124 D2EC       864            setb    _ADBUSY
0126            865   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:207: while (!ADINT); // Wait for conversion to complete
0126            866   L008001?:
0126 30ED40     867            jnb     _ADINT,L008001?
0129            868   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:208: return (ADC0);
0129 85BD82     869            mov     dpl,_ADC0
012C 85BE83     870            mov     dph,(_ADC0 >> 8)
012F 22         871            ret
0130            872   ;------------------------------------------------------------
0130            873   ;Allocation info for local variables in function 'Get_ADC'
0130            874   ;------------------------------------------------------------
0130            875   ;------------------------------------------------------------
0130            876   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:211: unsigned int Get_ADC (void)
0130            877   ;        -----------------------------------------
0130            878   ;         function Get_ADC
0130            879   ;        -----------------------------------------
0130            880   _Get_ADC:
0130            881   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:213: ADINT = 0;
0130 C2ED       882            clr     _ADINT
0132            883   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:214: ADBUSY = 1;
0132 D2EC       884            setb    _ADBUSY
0134            885   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:215: while (!ADINT); // Wait for conversion to complete
0134            886   L009001?:
0134 30ED80     887            jnb     _ADINT,L009001?
0137            888   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:216: return (ADC0);
0137 85BD82     889            mov     dpl,_ADC0
013A 85BE83     890            mov     dph,(_ADC0 >> 8)
013D 22         891            ret
013E            892   ;------------------------------------------------------------
013E            893   ;Allocation info for local variables in function 'Volts_at_Pin'
013E            894   ;------------------------------------------------------------
013E            895   ;pin                       Allocated to registers r2 
013E            896   ;------------------------------------------------------------
013E            897   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:220: float Volts_at_Pin(unsigned char pin)
013E            898   ;        -----------------------------------------
013E            899   ;         function Volts_at_Pin
013E            900   ;        -----------------------------------------
013E            901   _Volts_at_Pin:
013E            902   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:222: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
013E 120000     903            lcall   _ADC_at_Pin
0141 120000     904            lcall   ___uint2fs
0144 AA82       905            mov     r2,dpl
0146 AB83       906            mov     r3,dph
0148 ACF0       907            mov     r4,b
014A FD         908            mov     r5,a
014B C002       909            push    ar2
014D C003       910            push    ar3
014F C004       911            push    ar4
0151 C005       912            push    ar5
0153 903333     913            mov     dptr,#0x3333
0156 75F09B     914            mov     b,#0x9B
0159 7440       915            mov     a,#0x40
015B 120000     916            lcall   ___fsmul
015E AA82       917            mov     r2,dpl
0160 AB83       918            mov     r3,dph
0162 ACF0       919            mov     r4,b
0164 FD         920            mov     r5,a
0165 E581       921            mov     a,sp
0167 24FC       922            add     a,#0xfc
0169 F581       923            mov     sp,a
016B E4         924            clr     a
016C C0E0       925            push    acc
016E 74FC       926            mov     a,#0xFC
0170 C0E0       927            push    acc
0172 747F       928            mov     a,#0x7F
0174 C0E0       929            push    acc
0176 7446       930            mov     a,#0x46
0178 C0E0       931            push    acc
017A 8A82       932            mov     dpl,r2
017C 8B83       933            mov     dph,r3
017E 8CF0       934            mov     b,r4
0180 ED         935            mov     a,r5
0181 120000     936            lcall   ___fsdiv
0184 AA82       937            mov     r2,dpl
0186 AB83       938            mov     r3,dph
0188 ACF0       939            mov     r4,b
018A FD         940            mov     r5,a
018B E581       941            mov     a,sp
018D 24FC       942            add     a,#0xfc
018F F581       943            mov     sp,a
0191 8A82       944            mov     dpl,r2
0193 8B83       945            mov     dph,r3
0195 8CF0       946            mov     b,r4
0197 ED         947            mov     a,r5
0198 22         948            ret
0199            949   ;------------------------------------------------------------
0199            950   ;Allocation info for local variables in function 'UART1_Init'
0199            951   ;------------------------------------------------------------
0199            952   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0199            953   ;------------------------------------------------------------
0199            954   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:225: void UART1_Init (unsigned long baudrate)
0199            955   ;        -----------------------------------------
0199            956   ;         function UART1_Init
0199            957   ;        -----------------------------------------
0199            958   _UART1_Init:
0199 AA82       959            mov     r2,dpl
019B AB83       960            mov     r3,dph
019D ACF0       961            mov     r4,b
019F FD         962            mov     r5,a
01A0            963   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:227: SFRPAGE = 0x20;
01A0 75A720     964            mov     _SFRPAGE,#0x20
01A3            965   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:228: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01A3 75930C     966            mov     _SMOD1,#0x0C
01A6            967   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:229: SCON1 = 0x10;
01A6 75C810     968            mov     _SCON1,#0x10
01A9            969   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:230: SBCON1 =0x00;   // disable baud rate generator
01A9 759400     970            mov     _SBCON1,#0x00
01AC            971   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:231: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01AC 8A00       972            mov     __divulong_PARM_2,r2
01AE 8B01       973            mov     (__divulong_PARM_2 + 1),r3
01B0 8C02       974            mov     (__divulong_PARM_2 + 2),r4
01B2 8D03       975            mov     (__divulong_PARM_2 + 3),r5
01B4 90A200     976            mov     dptr,#0xA200
01B7 75F04A     977            mov     b,#0x4A
01BA 7404       978            mov     a,#0x04
01BC 120000     979            lcall   __divulong
01BF AA82       980            mov     r2,dpl
01C1 AB83       981            mov     r3,dph
01C3 ACF0       982            mov     r4,b
01C5 FD         983            mov     r5,a
01C6 750018     984            mov     __divulong_PARM_2,#0x18
01C9 E4         985            clr     a
01CA F501       986            mov     (__divulong_PARM_2 + 1),a
01CC F502       987            mov     (__divulong_PARM_2 + 2),a
01CE F503       988            mov     (__divulong_PARM_2 + 3),a
01D0 8A82       989            mov     dpl,r2
01D2 8B83       990            mov     dph,r3
01D4 8CF0       991            mov     b,r4
01D6 ED         992            mov     a,r5
01D7 120000     993            lcall   __divulong
01DA AA82       994            mov     r2,dpl
01DC AB83       995            mov     r3,dph
01DE ACF0       996            mov     r4,b
01E0 FD         997            mov     r5,a
01E1 E4         998            clr     a
01E2 C3         999            clr     c
01E3 9A        1000            subb    a,r2
01E4 FA        1001            mov     r2,a
01E5 E4        1002            clr     a
01E6 9B        1003            subb    a,r3
01E7 FB        1004            mov     r3,a
01E8 7401      1005            mov     a,#0x01
01EA 9C        1006            subb    a,r4
01EB E4        1007            clr     a
01EC 9D        1008            subb    a,r5
01ED 8A95      1009            mov     _SBRL1,r2
01EF 8B96      1010            mov     (_SBRL1 >> 8),r3
01F1           1011   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:232: TI1 = 1; // indicate ready for TX
01F1 D2C9      1012            setb    _TI1
01F3           1013   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:233: SBCON1 |= 0x40;   // enable baud rate generator
01F3 439440    1014            orl     _SBCON1,#0x40
01F6           1015   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:234: SFRPAGE = 0x00;
01F6 75A700    1016            mov     _SFRPAGE,#0x00
01F9 22        1017            ret
01FA           1018   ;------------------------------------------------------------
01FA           1019   ;Allocation info for local variables in function 'putchar1'
01FA           1020   ;------------------------------------------------------------
01FA           1021   ;c                         Allocated to registers r2 
01FA           1022   ;------------------------------------------------------------
01FA           1023   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:237: void putchar1 (char c) 
01FA           1024   ;        -----------------------------------------
01FA           1025   ;         function putchar1
01FA           1026   ;        -----------------------------------------
01FA           1027   _putchar1:
01FA AA82      1028            mov     r2,dpl
01FC           1029   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:239: SFRPAGE = 0x20;
01FC 75A720    1030            mov     _SFRPAGE,#0x20
01FF           1031   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:240: while (!TI1);
01FF           1032   L012001?:
01FF           1033   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:241: TI1=0;
01FF 10C990    1034            jbc     _TI1,L012008?
0202 8000      1035            sjmp    L012001?
0204           1036   L012008?:
0204           1037   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:242: SBUF1 = c;
0204 8A92      1038            mov     _SBUF1,r2
0206           1039   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:243: SFRPAGE = 0x00;
0206 75A700    1040            mov     _SFRPAGE,#0x00
0209 22        1041            ret
020A           1042   ;------------------------------------------------------------
020A           1043   ;Allocation info for local variables in function 'sendstr1'
020A           1044   ;------------------------------------------------------------
020A           1045   ;s                         Allocated to registers r2 r3 r4 
020A           1046   ;------------------------------------------------------------
020A           1047   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:246: void sendstr1 (char * s)
020A           1048   ;        -----------------------------------------
020A           1049   ;         function sendstr1
020A           1050   ;        -----------------------------------------
020A           1051   _sendstr1:
020A AA82      1052            mov     r2,dpl
020C AB83      1053            mov     r3,dph
020E ACF0      1054            mov     r4,b
0210           1055   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:248: while(*s)
0210           1056   L013001?:
0210 8A82      1057            mov     dpl,r2
0212 8B83      1058            mov     dph,r3
0214 8CF0      1059            mov     b,r4
0216 120000    1060            lcall   __gptrget
0219 FD        1061            mov     r5,a
021A 6000      1062            jz      L013004?
021C           1063   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:250: putchar1(*s);
021C 8D82      1064            mov     dpl,r5
021E C002      1065            push    ar2
0220 C003      1066            push    ar3
0222 C004      1067            push    ar4
0224 120000    1068            lcall   _putchar1
0227 D004      1069            pop     ar4
0229 D003      1070            pop     ar3
022B D002      1071            pop     ar2
022D           1072   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:251: s++;        
022D 0A        1073            inc     r2
022E BA00D0    1074            cjne    r2,#0x00,L013001?
0231 0B        1075            inc     r3
0232 8000      1076            sjmp    L013001?
0234           1077   L013004?:
0234 22        1078            ret
0235           1079   ;------------------------------------------------------------
0235           1080   ;Allocation info for local variables in function 'getchar1'
0235           1081   ;------------------------------------------------------------
0235           1082   ;c                         Allocated to registers 
0235           1083   ;------------------------------------------------------------
0235           1084   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:255: char getchar1 (void)
0235           1085   ;        -----------------------------------------
0235           1086   ;         function getchar1
0235           1087   ;        -----------------------------------------
0235           1088   _getchar1:
0235           1089   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:258: SFRPAGE = 0x20;
0235 75A720    1090            mov     _SFRPAGE,#0x20
0238           1091   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:259: while (!RI1);
0238           1092   L014001?:
0238           1093   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:260: RI1=0;
0238 10C8D0    1094            jbc     _RI1,L014008?
023B 8000      1095            sjmp    L014001?
023D           1096   L014008?:
023D           1097   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:262: SCON1&=0b_0011_1111;
023D 53C83F    1098            anl     _SCON1,#0x3F
0240           1099   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:263: c = SBUF1;
0240 859282    1100            mov     dpl,_SBUF1
0243           1101   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:264: SFRPAGE = 0x00;
0243 75A700    1102            mov     _SFRPAGE,#0x00
0246           1103   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:265: return (c);
0246 22        1104            ret
0247           1105   ;------------------------------------------------------------
0247           1106   ;Allocation info for local variables in function 'getchar1_with_timeout'
0247           1107   ;------------------------------------------------------------
0247           1108   ;c                         Allocated to registers 
0247           1109   ;timeout                   Allocated to registers r2 r3 
0247           1110   ;------------------------------------------------------------
0247           1111   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:268: char getchar1_with_timeout (void)
0247           1112   ;        -----------------------------------------
0247           1113   ;         function getchar1_with_timeout
0247           1114   ;        -----------------------------------------
0247           1115   _getchar1_with_timeout:
0247           1116   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:272: SFRPAGE = 0x20;
0247 75A720    1117            mov     _SFRPAGE,#0x20
024A           1118   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:274: while (!RI1)
024A 7A00      1119            mov     r2,#0x00
024C 7B00      1120            mov     r3,#0x00
024E           1121   L015003?:
024E 20C850    1122            jb      _RI1,L015005?
0251           1123   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:276: SFRPAGE = 0x00;
0251 75A700    1124            mov     _SFRPAGE,#0x00
0254           1125   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:277: Timer3us(20);
0254 758214    1126            mov     dpl,#0x14
0257 C002      1127            push    ar2
0259 C003      1128            push    ar3
025B 120000    1129            lcall   _Timer3us
025E D003      1130            pop     ar3
0260 D002      1131            pop     ar2
0262           1132   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:278: SFRPAGE = 0x20;
0262 75A720    1133            mov     _SFRPAGE,#0x20
0265           1134   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:279: timeout++;
0265 0A        1135            inc     r2
0266 BA0090    1136            cjne    r2,#0x00,L015012?
0269 0B        1137            inc     r3
026A           1138   L015012?:
026A           1139   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:280: if(timeout==25000)
026A BAA810    1140            cjne    r2,#0xA8,L015003?
026D BB6110    1141            cjne    r3,#0x61,L015003?
0270           1142   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:282: SFRPAGE = 0x00;
0270 75A700    1143            mov     _SFRPAGE,#0x00
0273           1144   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:283: return ('\n'); // Timeout after half second
0273 75820A    1145            mov     dpl,#0x0A
0276 22        1146            ret
0277           1147   L015005?:
0277           1148   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:286: RI1=0;
0277 C2C8      1149            clr     _RI1
0279           1150   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:288: SCON1&=0b_0011_1111;
0279 53C83F    1151            anl     _SCON1,#0x3F
027C           1152   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:289: c = SBUF1;
027C 859282    1153            mov     dpl,_SBUF1
027F           1154   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:290: SFRPAGE = 0x00;
027F 75A700    1155            mov     _SFRPAGE,#0x00
0282           1156   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:291: return (c);
0282 22        1157            ret
0283           1158   ;------------------------------------------------------------
0283           1159   ;Allocation info for local variables in function 'getstr1'
0283           1160   ;------------------------------------------------------------
0283           1161   ;s                         Allocated to registers r2 r3 r4 
0283           1162   ;c                         Allocated to registers r5 
0283           1163   ;------------------------------------------------------------
0283           1164   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:294: void getstr1 (char * s)
0283           1165   ;        -----------------------------------------
0283           1166   ;         function getstr1
0283           1167   ;        -----------------------------------------
0283           1168   _getstr1:
0283 AA82      1169            mov     r2,dpl
0285 AB83      1170            mov     r3,dph
0287 ACF0      1171            mov     r4,b
0289           1172   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:298: while(1)
0289           1173   L016004?:
0289           1174   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:300: c=getchar1_with_timeout();
0289 C002      1175            push    ar2
028B C003      1176            push    ar3
028D C004      1177            push    ar4
028F 120000    1178            lcall   _getchar1_with_timeout
0292 AD82      1179            mov     r5,dpl
0294 D004      1180            pop     ar4
0296 D003      1181            pop     ar3
0298 D002      1182            pop     ar2
029A           1183   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:301: if(c=='\n')
029A BD0A10    1184            cjne    r5,#0x0A,L016002?
029D           1185   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:303: *s=0;
029D 8A82      1186            mov     dpl,r2
029F 8B83      1187            mov     dph,r3
02A1 8CF0      1188            mov     b,r4
02A3 E4        1189            clr     a
02A4           1190   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:304: return;
02A4 020000    1191            ljmp    __gptrput
02A7           1192   L016002?:
02A7           1193   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:306: *s=c;
02A7 8A82      1194            mov     dpl,r2
02A9 8B83      1195            mov     dph,r3
02AB 8CF0      1196            mov     b,r4
02AD ED        1197            mov     a,r5
02AE 120000    1198            lcall   __gptrput
02B1 A3        1199            inc     dptr
02B2 AA82      1200            mov     r2,dpl
02B4 AB83      1201            mov     r3,dph
02B6           1202   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:307: s++;
02B6 8000      1203            sjmp    L016004?
02B8           1204   ;------------------------------------------------------------
02B8           1205   ;Allocation info for local variables in function 'RXU1'
02B8           1206   ;------------------------------------------------------------
02B8           1207   ;------------------------------------------------------------
02B8           1208   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:312: bit RXU1 (void)
02B8           1209   ;        -----------------------------------------
02B8           1210   ;         function RXU1
02B8           1211   ;        -----------------------------------------
02B8           1212   _RXU1:
02B8           1213   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:315: SFRPAGE = 0x20;
02B8 75A720    1214            mov     _SFRPAGE,#0x20
02BB           1215   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:316: mybit=RI1;
02BB A2C8      1216            mov     c,_RI1
02BD           1217   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:317: SFRPAGE = 0x00;
02BD 75A700    1218            mov     _SFRPAGE,#0x00
02C0           1219   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:318: return mybit;
02C0 22        1220            ret
02C1           1221   ;------------------------------------------------------------
02C1           1222   ;Allocation info for local variables in function 'waitms_or_RI1'
02C1           1223   ;------------------------------------------------------------
02C1           1224   ;ms                        Allocated to registers r2 r3 
02C1           1225   ;j                         Allocated to registers r4 r5 
02C1           1226   ;k                         Allocated to registers r6 
02C1           1227   ;------------------------------------------------------------
02C1           1228   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:321: void waitms_or_RI1 (unsigned int ms)
02C1           1229   ;        -----------------------------------------
02C1           1230   ;         function waitms_or_RI1
02C1           1231   ;        -----------------------------------------
02C1           1232   _waitms_or_RI1:
02C1 AA82      1233            mov     r2,dpl
02C3 AB83      1234            mov     r3,dph
02C5           1235   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:325: for(j=0; j<ms; j++)
02C5 7C00      1236            mov     r4,#0x00
02C7 7D00      1237            mov     r5,#0x00
02C9           1238   L018007?:
02C9 C3        1239            clr     c
02CA EC        1240            mov     a,r4
02CB 9A        1241            subb    a,r2
02CC ED        1242            mov     a,r5
02CD 9B        1243            subb    a,r3
02CE 5000      1244            jnc     L018011?
02D0           1245   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:327: for (k=0; k<4; k++)
02D0 7E00      1246            mov     r6,#0x00
02D2           1247   L018003?:
02D2 BE0450    1248            cjne    r6,#0x04,L018019?
02D5           1249   L018019?:
02D5 5000      1250            jnc     L018009?
02D7           1251   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:329: if(RXU1()) return;
02D7 C002      1252            push    ar2
02D9 C003      1253            push    ar3
02DB C004      1254            push    ar4
02DD C005      1255            push    ar5
02DF C006      1256            push    ar6
02E1 120000    1257            lcall   _RXU1
02E4 E4        1258            clr     a
02E5 33        1259            rlc     a
02E6 D006      1260            pop     ar6
02E8 D005      1261            pop     ar5
02EA D004      1262            pop     ar4
02EC D003      1263            pop     ar3
02EE D002      1264            pop     ar2
02F0 6000      1265            jz      L018002?
02F2 22        1266            ret
02F3           1267   L018002?:
02F3           1268   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:330: Timer3us(250);
02F3 7582FA    1269            mov     dpl,#0xFA
02F6 C002      1270            push    ar2
02F8 C003      1271            push    ar3
02FA C004      1272            push    ar4
02FC C005      1273            push    ar5
02FE C006      1274            push    ar6
0300 120000    1275            lcall   _Timer3us
0303 D006      1276            pop     ar6
0305 D005      1277            pop     ar5
0307 D004      1278            pop     ar4
0309 D003      1279            pop     ar3
030B D002      1280            pop     ar2
030D           1281   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:327: for (k=0; k<4; k++)
030D 0E        1282            inc     r6
030E 8000      1283            sjmp    L018003?
0310           1284   L018009?:
0310           1285   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:325: for(j=0; j<ms; j++)
0310 0C        1286            inc     r4
0311 BC0090    1287            cjne    r4,#0x00,L018007?
0314 0D        1288            inc     r5
0315 8000      1289            sjmp    L018007?
0317           1290   L018011?:
0317 22        1291            ret
0318           1292   ;------------------------------------------------------------
0318           1293   ;Allocation info for local variables in function 'SendATCommand'
0318           1294   ;------------------------------------------------------------
0318           1295   ;s                         Allocated to registers r2 r3 r4 
0318           1296   ;------------------------------------------------------------
0318           1297   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:335: void SendATCommand (char * s)
0318           1298   ;        -----------------------------------------
0318           1299   ;         function SendATCommand
0318           1300   ;        -----------------------------------------
0318           1301   _SendATCommand:
0318 AA82      1302            mov     r2,dpl
031A AB83      1303            mov     r3,dph
031C ACF0      1304            mov     r4,b
031E           1305   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:337: printf("Command: %s", s);
031E C002      1306            push    ar2
0320 C003      1307            push    ar3
0322 C004      1308            push    ar4
0324 C002      1309            push    ar2
0326 C003      1310            push    ar3
0328 C004      1311            push    ar4
032A 7410      1312            mov     a,#__str_0
032C C0E0      1313            push    acc
032E 74C1      1314            mov     a,#(__str_0 >> 8)
0330 C0E0      1315            push    acc
0332 7480      1316            mov     a,#0x80
0334 C0E0      1317            push    acc
0336 120000    1318            lcall   _printf
0339 E581      1319            mov     a,sp
033B 24FA      1320            add     a,#0xfa
033D F581      1321            mov     sp,a
033F           1322   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:338: P3_0=0; // 'set' pin to 0 is 'AT' mode.
033F C2B0      1323            clr     _P3_0
0341           1324   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:339: waitms(5);
0341 900005    1325            mov     dptr,#0x0005
0344 120000    1326            lcall   _waitms
0347 D004      1327            pop     ar4
0349 D003      1328            pop     ar3
034B D002      1329            pop     ar2
034D           1330   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:340: sendstr1(s);
034D 8A82      1331            mov     dpl,r2
034F 8B83      1332            mov     dph,r3
0351 8CF0      1333            mov     b,r4
0353 120000    1334            lcall   _sendstr1
0356           1335   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:341: getstr1(buff);
0356 904728    1336            mov     dptr,#_buff
0359 75F040    1337            mov     b,#0x40
035C 120000    1338            lcall   _getstr1
035F           1339   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:342: waitms(10);
035F 90000A    1340            mov     dptr,#0x000A
0362 120000    1341            lcall   _waitms
0365           1342   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:343: P3_0=1; // 'set' pin to 1 is normal operation mode.
0365 D2B0      1343            setb    _P3_0
0367           1344   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:344: printf("Response: %s\r\n", buff);
0367 7428      1345            mov     a,#_buff
0369 C0E0      1346            push    acc
036B 7447      1347            mov     a,#(_buff >> 8)
036D C0E0      1348            push    acc
036F 7440      1349            mov     a,#0x40
0371 C0E0      1350            push    acc
0373 7490      1351            mov     a,#__str_1
0375 C0E0      1352            push    acc
0377 74C1      1353            mov     a,#(__str_1 >> 8)
0379 C0E0      1354            push    acc
037B 7480      1355            mov     a,#0x80
037D C0E0      1356            push    acc
037F 120000    1357            lcall   _printf
0382 E581      1358            mov     a,sp
0384 24FA      1359            add     a,#0xfa
0386 F581      1360            mov     sp,a
0388 22        1361            ret
0389           1362   ;------------------------------------------------------------
0389           1363   ;Allocation info for local variables in function 'LCD_pulse'
0389           1364   ;------------------------------------------------------------
0389           1365   ;------------------------------------------------------------
0389           1366   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:349: void LCD_pulse (void)
0389           1367   ;        -----------------------------------------
0389           1368   ;         function LCD_pulse
0389           1369   ;        -----------------------------------------
0389           1370   _LCD_pulse:
0389           1371   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:351: LCD_E=1;
0389 D2A0      1372            setb    _P2_0
038B           1373   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:352: Timer3us(40);
038B 758228    1374            mov     dpl,#0x28
038E 120000    1375            lcall   _Timer3us
0391           1376   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:353: LCD_E=0;
0391 C2A0      1377            clr     _P2_0
0393 22        1378            ret
0394           1379   ;------------------------------------------------------------
0394           1380   ;Allocation info for local variables in function 'LCD_byte'
0394           1381   ;------------------------------------------------------------
0394           1382   ;x                         Allocated to registers r2 
0394           1383   ;------------------------------------------------------------
0394           1384   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:356: void LCD_byte (unsigned char x)
0394           1385   ;        -----------------------------------------
0394           1386   ;         function LCD_byte
0394           1387   ;        -----------------------------------------
0394           1388   _LCD_byte:
0394 AA82      1389            mov     r2,dpl
0396           1390   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:359: ACC=x; //Send high nible
0396 8AE0      1391            mov     _ACC,r2
0398           1392   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:360: LCD_D7=ACC_7;
0398 A2E7      1393            mov     c,_ACC_7
039A 9290      1394            mov     _P1_0,c
039C           1395   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:361: LCD_D6=ACC_6;
039C A2E6      1396            mov     c,_ACC_6
039E 9291      1397            mov     _P1_1,c
03A0           1398   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:362: LCD_D5=ACC_5;
03A0 A2E5      1399            mov     c,_ACC_5
03A2 9292      1400            mov     _P1_2,c
03A4           1401   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:363: LCD_D4=ACC_4;
03A4 A2E4      1402            mov     c,_ACC_4
03A6 9293      1403            mov     _P1_3,c
03A8           1404   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:364: LCD_pulse();
03A8 C002      1405            push    ar2
03AA 120000    1406            lcall   _LCD_pulse
03AD           1407   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:365: Timer3us(40);
03AD 758228    1408            mov     dpl,#0x28
03B0 120000    1409            lcall   _Timer3us
03B3 D002      1410            pop     ar2
03B5           1411   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:366: ACC=x; //Send low nible
03B5 8AE0      1412            mov     _ACC,r2
03B7           1413   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:367: LCD_D7=ACC_3;
03B7 A2E3      1414            mov     c,_ACC_3
03B9 9290      1415            mov     _P1_0,c
03BB           1416   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:368: LCD_D6=ACC_2;
03BB A2E2      1417            mov     c,_ACC_2
03BD 9291      1418            mov     _P1_1,c
03BF           1419   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:369: LCD_D5=ACC_1;
03BF A2E1      1420            mov     c,_ACC_1
03C1 9292      1421            mov     _P1_2,c
03C3           1422   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:370: LCD_D4=ACC_0;
03C3 A2E0      1423            mov     c,_ACC_0
03C5 9293      1424            mov     _P1_3,c
03C7           1425   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:371: LCD_pulse();
03C7 020000    1426            ljmp    _LCD_pulse
03CA           1427   ;------------------------------------------------------------
03CA           1428   ;Allocation info for local variables in function 'WriteData'
03CA           1429   ;------------------------------------------------------------
03CA           1430   ;x                         Allocated to registers r2 
03CA           1431   ;------------------------------------------------------------
03CA           1432   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:374: void WriteData (unsigned char x)
03CA           1433   ;        -----------------------------------------
03CA           1434   ;         function WriteData
03CA           1435   ;        -----------------------------------------
03CA           1436   _WriteData:
03CA AA82      1437            mov     r2,dpl
03CC           1438   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:376: LCD_RS=1;
03CC D297      1439            setb    _P1_7
03CE           1440   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:377: LCD_byte(x);
03CE 8A82      1441            mov     dpl,r2
03D0 120000    1442            lcall   _LCD_byte
03D3           1443   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:378: waitms(2);
03D3 900002    1444            mov     dptr,#0x0002
03D6 020000    1445            ljmp    _waitms
03D9           1446   ;------------------------------------------------------------
03D9           1447   ;Allocation info for local variables in function 'WriteCommand'
03D9           1448   ;------------------------------------------------------------
03D9           1449   ;x                         Allocated to registers r2 
03D9           1450   ;------------------------------------------------------------
03D9           1451   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:381: void WriteCommand (unsigned char x)
03D9           1452   ;        -----------------------------------------
03D9           1453   ;         function WriteCommand
03D9           1454   ;        -----------------------------------------
03D9           1455   _WriteCommand:
03D9 AA82      1456            mov     r2,dpl
03DB           1457   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:383: LCD_RS=0;
03DB C297      1458            clr     _P1_7
03DD           1459   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:384: LCD_byte(x);
03DD 8A82      1460            mov     dpl,r2
03DF 120000    1461            lcall   _LCD_byte
03E2           1462   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:385: waitms(5);
03E2 900005    1463            mov     dptr,#0x0005
03E5 020000    1464            ljmp    _waitms
03E8           1465   ;------------------------------------------------------------
03E8           1466   ;Allocation info for local variables in function 'LCD_4BIT'
03E8           1467   ;------------------------------------------------------------
03E8           1468   ;------------------------------------------------------------
03E8           1469   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:388: void LCD_4BIT (void)
03E8           1470   ;        -----------------------------------------
03E8           1471   ;         function LCD_4BIT
03E8           1472   ;        -----------------------------------------
03E8           1473   _LCD_4BIT:
03E8           1474   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:390: LCD_E=0; // Resting state of LCD's enable is zero
03E8 C2A0      1475            clr     _P2_0
03EA           1476   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:392: waitms(20);
03EA 900014    1477            mov     dptr,#0x0014
03ED 120000    1478            lcall   _waitms
03F0           1479   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:394: WriteCommand(0x33);
03F0 758233    1480            mov     dpl,#0x33
03F3 120000    1481            lcall   _WriteCommand
03F6           1482   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:395: WriteCommand(0x33);
03F6 758233    1483            mov     dpl,#0x33
03F9 120000    1484            lcall   _WriteCommand
03FC           1485   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:396: WriteCommand(0x32); // Change to 4-bit mode
03FC 758232    1486            mov     dpl,#0x32
03FF 120000    1487            lcall   _WriteCommand
0402           1488   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:399: WriteCommand(0x28);
0402 758228    1489            mov     dpl,#0x28
0405 120000    1490            lcall   _WriteCommand
0408           1491   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:400: WriteCommand(0x0c);
0408 75820C    1492            mov     dpl,#0x0C
040B 120000    1493            lcall   _WriteCommand
040E           1494   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:401: WriteCommand(0x01); // Clear screen command (takes some time)
040E 758201    1495            mov     dpl,#0x01
0411 120000    1496            lcall   _WriteCommand
0414           1497   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:402: waitms(20); // Wait for clear screen command to finsih.
0414 900014    1498            mov     dptr,#0x0014
0417 020000    1499            ljmp    _waitms
041A           1500   ;------------------------------------------------------------
041A           1501   ;Allocation info for local variables in function 'LCDprint'
041A           1502   ;------------------------------------------------------------
041A           1503   ;line                      Allocated with name '_LCDprint_PARM_2'
041A           1504   ;string                    Allocated to registers r2 r3 r4 
041A           1505   ;j                         Allocated to registers r5 r6 
041A           1506   ;------------------------------------------------------------
041A           1507   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:405: void LCDprint(char * string, unsigned char line, bit clear)
041A           1508   ;        -----------------------------------------
041A           1509   ;         function LCDprint
041A           1510   ;        -----------------------------------------
041A           1511   _LCDprint:
041A AA82      1512            mov     r2,dpl
041C AB83      1513            mov     r3,dph
041E ACF0      1514            mov     r4,b
0420           1515   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:409: WriteCommand(line==2?0xc0:0x80);
0420 7402      1516            mov     a,#0x02
0422 B578D0    1517            cjne    a,_LCDprint_PARM_2,L025013?
0425 7DC0      1518            mov     r5,#0xC0
0427 8000      1519            sjmp    L025014?
0429           1520   L025013?:
0429 7D80      1521            mov     r5,#0x80
042B           1522   L025014?:
042B 8D82      1523            mov     dpl,r5
042D C002      1524            push    ar2
042F C003      1525            push    ar3
0431 C004      1526            push    ar4
0433 120000    1527            lcall   _WriteCommand
0436           1528   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:410: waitms(5);
0436 900005    1529            mov     dptr,#0x0005
0439 120000    1530            lcall   _waitms
043C D004      1531            pop     ar4
043E D003      1532            pop     ar3
0440 D002      1533            pop     ar2
0442           1534   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:411: for(j=0; string[j]!=0; j++)         WriteData(string[j]);// Write the message
0442 7D00      1535            mov     r5,#0x00
0444 7E00      1536            mov     r6,#0x00
0446           1537   L025003?:
0446 ED        1538            mov     a,r5
0447 2A        1539            add     a,r2
0448 FF        1540            mov     r7,a
0449 EE        1541            mov     a,r6
044A 3B        1542            addc    a,r3
044B F8        1543            mov     r0,a
044C 8C01      1544            mov     ar1,r4
044E 8F82      1545            mov     dpl,r7
0450 8883      1546            mov     dph,r0
0452 89F0      1547            mov     b,r1
0454 120000    1548            lcall   __gptrget
0457 FF        1549            mov     r7,a
0458 6000      1550            jz      L025006?
045A 8F82      1551            mov     dpl,r7
045C C002      1552            push    ar2
045E C003      1553            push    ar3
0460 C004      1554            push    ar4
0462 C005      1555            push    ar5
0464 C006      1556            push    ar6
0466 120000    1557            lcall   _WriteData
0469 D006      1558            pop     ar6
046B D005      1559            pop     ar5
046D D004      1560            pop     ar4
046F D003      1561            pop     ar3
0471 D002      1562            pop     ar2
0473 0D        1563            inc     r5
0474 BD0050    1564            cjne    r5,#0x00,L025003?
0477 0E        1565            inc     r6
0478 8000      1566            sjmp    L025003?
047A           1567   L025006?:
047A           1568   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:412: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
047A 30E8D0    1569            jnb     _LCDprint_PARM_3,L025011?
047D 8D02      1570            mov     ar2,r5
047F 8E03      1571            mov     ar3,r6
0481           1572   L025007?:
0481 C3        1573            clr     c
0482 EA        1574            mov     a,r2
0483 9410      1575            subb    a,#0x10
0485 EB        1576            mov     a,r3
0486 6480      1577            xrl     a,#0x80
0488 9480      1578            subb    a,#0x80
048A 5000      1579            jnc     L025011?
048C 758220    1580            mov     dpl,#0x20
048F C002      1581            push    ar2
0491 C003      1582            push    ar3
0493 120000    1583            lcall   _WriteData
0496 D003      1584            pop     ar3
0498 D002      1585            pop     ar2
049A 0A        1586            inc     r2
049B BA0010    1587            cjne    r2,#0x00,L025007?
049E 0B        1588            inc     r3
049F 8000      1589            sjmp    L025007?
04A1           1590   L025011?:
04A1 22        1591            ret
04A2           1592   ;------------------------------------------------------------
04A2           1593   ;Allocation info for local variables in function 'main'
04A2           1594   ;------------------------------------------------------------
04A2           1595   ;cnt                       Allocated to registers r2 r3 
04A2           1596   ;volt_x                    Allocated to registers 
04A2           1597   ;volt_y                    Allocated to registers 
04A2           1598   ;frequency                 Allocated to registers r4 r5 r6 r7 
04A2           1599   ;------------------------------------------------------------
04A2           1600   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:415: void main (void)
04A2           1601   ;        -----------------------------------------
04A2           1602   ;         function main
04A2           1603   ;        -----------------------------------------
04A2           1604   _main:
04A2           1605   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:424: InitADC();
04A2 120000    1606            lcall   _InitADC
04A5           1607   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:425: waitms(500);
04A5 9001F4    1608            mov     dptr,#0x01F4
04A8 120000    1609            lcall   _waitms
04AB           1610   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:426: printf("\r\nJDY-40 test\r\n");
04AB 7450      1611            mov     a,#__str_2
04AD C0E0      1612            push    acc
04AF 74C3      1613            mov     a,#(__str_2 >> 8)
04B1 C0E0      1614            push    acc
04B3 7480      1615            mov     a,#0x80
04B5 C0E0      1616            push    acc
04B7 120000    1617            lcall   _printf
04BA 1581      1618            dec     sp
04BC 1581      1619            dec     sp
04BE 1581      1620            dec     sp
04C0           1621   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:427: UART1_Init(9600);
04C0 902580    1622            mov     dptr,#0x2580
04C3 E4        1623            clr     a
04C4 F5F0      1624            mov     b,a
04C6 120000    1625            lcall   _UART1_Init
04C9           1626   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:428: InitPinADC(2,4); //for y remote
04C9 753804    1627            mov     _InitPinADC_PARM_2,#0x04
04CC 758202    1628            mov     dpl,#0x02
04CF 120000    1629            lcall   _InitPinADC
04D2           1630   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:429: InitPinADC(2,5); //for x remote
04D2 753805    1631            mov     _InitPinADC_PARM_2,#0x05
04D5 758202    1632            mov     dpl,#0x02
04D8 120000    1633            lcall   _InitPinADC
04DB           1634   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:446: SendATCommand("AT+DVID9944\r\n");  
04DB 90C390    1635            mov     dptr,#__str_3
04DE 75F080    1636            mov     b,#0x80
04E1 120000    1637            lcall   _SendATCommand
04E4           1638   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:449: SendATCommand("AT+VER\r\n");
04E4 90C3D0    1639            mov     dptr,#__str_4
04E7 75F080    1640            mov     b,#0x80
04EA 120000    1641            lcall   _SendATCommand
04ED           1642   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:450: SendATCommand("AT+BAUD\r\n");
04ED 90C410    1643            mov     dptr,#__str_5
04F0 75F080    1644            mov     b,#0x80
04F3 120000    1645            lcall   _SendATCommand
04F6           1646   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:451: SendATCommand("AT+RFID\r\n");
04F6 90C450    1647            mov     dptr,#__str_6
04F9 75F080    1648            mov     b,#0x80
04FC 120000    1649            lcall   _SendATCommand
04FF           1650   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:452: SendATCommand("AT+DVID\r\n");
04FF 90C490    1651            mov     dptr,#__str_7
0502 75F080    1652            mov     b,#0x80
0505 120000    1653            lcall   _SendATCommand
0508           1654   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:453: SendATCommand("AT+RFC\r\n");
0508 90C4D0    1655            mov     dptr,#__str_8
050B 75F080    1656            mov     b,#0x80
050E 120000    1657            lcall   _SendATCommand
0511           1658   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:454: SendATCommand("AT+POWE\r\n");
0511 90C510    1659            mov     dptr,#__str_9
0514 75F080    1660            mov     b,#0x80
0517 120000    1661            lcall   _SendATCommand
051A           1662   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:455: SendATCommand("AT+CLSS\r\n");
051A 90C550    1663            mov     dptr,#__str_10
051D 75F080    1664            mov     b,#0x80
0520 120000    1665            lcall   _SendATCommand
0523           1666   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:457: printf("\r\nPress and hold the BOOT button to transmit.\r\n");
0523 7490      1667            mov     a,#__str_11
0525 C0E0      1668            push    acc
0527 74C5      1669            mov     a,#(__str_11 >> 8)
0529 C0E0      1670            push    acc
052B 7480      1671            mov     a,#0x80
052D C0E0      1672            push    acc
052F 120000    1673            lcall   _printf
0532 1581      1674            dec     sp
0534 1581      1675            dec     sp
0536 1581      1676            dec     sp
0538           1677   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:460: while(1)
0538 7A00      1678            mov     r2,#0x00
053A 7B00      1679            mov     r3,#0x00
053C           1680   L026008?:
053C           1681   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:465: volt_x = Volts_at_Pin(QFP32_MUX_P1_4);
053C 75820A    1682            mov     dpl,#0x0A
053F C002      1683            push    ar2
0541 C003      1684            push    ar3
0543 120000    1685            lcall   _Volts_at_Pin
0546           1686   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:466: volt_y = Volts_at_Pin(QFP32_MUX_P1_5);
0546 75820B    1687            mov     dpl,#0x0B
0549 120000    1688            lcall   _Volts_at_Pin
054C D003      1689            pop     ar3
054E D002      1690            pop     ar2
0550           1691   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:480: if(P3_7==0)
0550 20B710    1692            jb      _P3_7,L026002?
0553           1693   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:482: sprintf(buff, "JDY40 test %d\r\n", cnt++);
0553 8A04      1694            mov     ar4,r2
0555 8B05      1695            mov     ar5,r3
0557 0A        1696            inc     r2
0558 BA0050    1697            cjne    r2,#0x00,L026018?
055B 0B        1698            inc     r3
055C           1699   L026018?:
055C C002      1700            push    ar2
055E C003      1701            push    ar3
0560 C004      1702            push    ar4
0562 C005      1703            push    ar5
0564 7490      1704            mov     a,#__str_12
0566 C0E0      1705            push    acc
0568 74C6      1706            mov     a,#(__str_12 >> 8)
056A C0E0      1707            push    acc
056C 7480      1708            mov     a,#0x80
056E C0E0      1709            push    acc
0570 7428      1710            mov     a,#_buff
0572 C0E0      1711            push    acc
0574 7447      1712            mov     a,#(_buff >> 8)
0576 C0E0      1713            push    acc
0578 7440      1714            mov     a,#0x40
057A C0E0      1715            push    acc
057C 120000    1716            lcall   _sprintf
057F E581      1717            mov     a,sp
0581 24F8      1718            add     a,#0xf8
0583 F581      1719            mov     sp,a
0585           1720   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:483: sendstr1(buff);
0585 904728    1721            mov     dptr,#_buff
0588 75F040    1722            mov     b,#0x40
058B 120000    1723            lcall   _sendstr1
058E           1724   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:484: putchar('.');
058E 75822E    1725            mov     dpl,#0x2E
0591 120000    1726            lcall   _putchar
0594           1727   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:485: waitms_or_RI1(200);
0594 9000C8    1728            mov     dptr,#0x00C8
0597 120000    1729            lcall   _waitms_or_RI1
059A D003      1730            pop     ar3
059C D002      1731            pop     ar2
059E           1732   L026002?:
059E           1733   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:488: if(RXU1())
059E C002      1734            push    ar2
05A0 C003      1735            push    ar3
05A2 120000    1736            lcall   _RXU1
05A5 D003      1737            pop     ar3
05A7 D002      1738            pop     ar2
05A9 5000      1739            jnc     L026008?
05AB           1740   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:491: getstr1(buff);
05AB 904728    1741            mov     dptr,#_buff
05AE 75F040    1742            mov     b,#0x40
05B1 C002      1743            push    ar2
05B3 C003      1744            push    ar3
05B5 120000    1745            lcall   _getstr1
05B8           1746   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:492: printf("Freq: %s\r\n", buff);
05B8 7428      1747            mov     a,#_buff
05BA C0E0      1748            push    acc
05BC 7447      1749            mov     a,#(_buff >> 8)
05BE C0E0      1750            push    acc
05C0 7440      1751            mov     a,#0x40
05C2 C0E0      1752            push    acc
05C4 7450      1753            mov     a,#__str_13
05C6 C0E0      1754            push    acc
05C8 74C7      1755            mov     a,#(__str_13 >> 8)
05CA C0E0      1756            push    acc
05CC 7480      1757            mov     a,#0x80
05CE C0E0      1758            push    acc
05D0 120000    1759            lcall   _printf
05D3 E581      1760            mov     a,sp
05D5 24FA      1761            add     a,#0xfa
05D7 F581      1762            mov     sp,a
05D9           1763   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:493: frequency = atof(buff); // change string -> float 
05D9 904728    1764            mov     dptr,#_buff
05DC 75F040    1765            mov     b,#0x40
05DF 120000    1766            lcall   _atof
05E2 AC82      1767            mov     r4,dpl
05E4 AD83      1768            mov     r5,dph
05E6 AEF0      1769            mov     r6,b
05E8 FF        1770            mov     r7,a
05E9           1771   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:496: if(frequency >= 2500){ //2500 is just a radom number we pick for now
05E9 E4        1772            clr     a
05EA C0E0      1773            push    acc
05EC 7440      1774            mov     a,#0x40
05EE C0E0      1775            push    acc
05F0 741C      1776            mov     a,#0x1C
05F2 C0E0      1777            push    acc
05F4 7445      1778            mov     a,#0x45
05F6 C0E0      1779            push    acc
05F8 8C82      1780            mov     dpl,r4
05FA 8D83      1781            mov     dph,r5
05FC 8EF0      1782            mov     b,r6
05FE EF        1783            mov     a,r7
05FF 120000    1784            lcall   ___fslt
0602 AC82      1785            mov     r4,dpl
0604 E581      1786            mov     a,sp
0606 24FC      1787            add     a,#0xfc
0608 F581      1788            mov     sp,a
060A D003      1789            pop     ar3
060C D002      1790            pop     ar2
060E EC        1791            mov     a,r4
060F 6000      1792            jz      L026020?
0611 020000    1793            ljmp    L026008?
0614           1794   L026020?:
0614           1795   ;        C:\Users\qiuyu\OneDrive\Documents\GitHub\B8_Project2\EFM8_JDY40_test.c:497: return;
0614 22        1796            ret
0615           1797            rseg R_CSEG
0615           1798   
0000           1799            rseg R_XINIT
0000           1800   
0000           1801            rseg R_CONST
0000           1802   __str_0:
0000 436F6D6D  1803            db 'Command: %s'
     616E643A
     202573
000B 00        1804            db 0x00
000C           1805   __str_1:
000C 52657370  1806            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1807            db 0x0D
0019 0A        1808            db 0x0A
001A 00        1809            db 0x00
001B           1810   __str_2:
001B 0D        1811            db 0x0D
001C 0A        1812            db 0x0A
001D 4A44592D  1813            db 'JDY-40 test'
     34302074
     657374
0028 0D        1814            db 0x0D
0029 0A        1815            db 0x0A
002A 00        1816            db 0x00
002B           1817   __str_3:
002B 41542B44  1818            db 'AT+DVID9944'
     56494439
     393434
0036 0D        1819            db 0x0D
0037 0A        1820            db 0x0A
0038 00        1821            db 0x00
0039           1822   __str_4:
0039 41542B56  1823            db 'AT+VER'
     4552
003F 0D        1824            db 0x0D
0040 0A        1825            db 0x0A
0041 00        1826            db 0x00
0042           1827   __str_5:
0042 41542B42  1828            db 'AT+BAUD'
     415544
0049 0D        1829            db 0x0D
004A 0A        1830            db 0x0A
004B 00        1831            db 0x00
004C           1832   __str_6:
004C 41542B52  1833            db 'AT+RFID'
     464944
0053 0D        1834            db 0x0D
0054 0A        1835            db 0x0A
0055 00        1836            db 0x00
0056           1837   __str_7:
0056 41542B44  1838            db 'AT+DVID'
     564944
005D 0D        1839            db 0x0D
005E 0A        1840            db 0x0A
005F 00        1841            db 0x00
0060           1842   __str_8:
0060 41542B52  1843            db 'AT+RFC'
     4643
0066 0D        1844            db 0x0D
0067 0A        1845            db 0x0A
0068 00        1846            db 0x00
0069           1847   __str_9:
0069 41542B50  1848            db 'AT+POWE'
     4F5745
0070 0D        1849            db 0x0D
0071 0A        1850            db 0x0A
0072 00        1851            db 0x00
0073           1852   __str_10:
0073 41542B43  1853            db 'AT+CLSS'
     4C5353
007A 0D        1854            db 0x0D
007B 0A        1855            db 0x0A
007C 00        1856            db 0x00
007D           1857   __str_11:
007D 0D        1858            db 0x0D
007E 0A        1859            db 0x0A
007F 50726573  1860            db 'Press and hold the BOOT button to transmit.'
>>>>>>> 24db02c123a3c0efc890de0856246d5bdc07e639
     7320616E
     6420686F
     6C642074
     68652042
     4F4F5420
     62757474
     6F6E2074
     6F207472
     616E736D
     69742E
<<<<<<< HEAD
00AA 0D        1948            db 0x0D
00AB 0A        1949            db 0x0A
00AC 00        1950            db 0x00
00AD           1951   __str_12:
00AD 25662025  1952            db '%f %f'
     66
00B2 0D        1953            db 0x0D
00B3 0A        1954            db 0x0A
00B4 00        1955            db 0x00
00B5           1956   __str_13:
00B5 4A445934  1957            db 'JDY40 test %d'
     30207465
     73742025
     64
00C2 0D        1958            db 0x0D
00C3 0A        1959            db 0x0A
00C4 00        1960            db 0x00
00C5           1961   __str_14:
00C5 46726571  1962            db 'Freq: %s'
     3A202573
00CD 0D        1963            db 0x0D
00CE 0A        1964            db 0x0A
00CF 00        1965            db 0x00
00D0           1966   
0003           1967            CSEG
0003           1968   
0003           1969   end
=======
00AA 0D        1861            db 0x0D
00AB 0A        1862            db 0x0A
00AC 00        1863            db 0x00
00AD           1864   __str_12:
00AD 4A445934  1865            db 'JDY40 test %d'
     30207465
     73742025
     64
00BA 0D        1866            db 0x0D
00BB 0A        1867            db 0x0A
00BC 00        1868            db 0x00
00BD           1869   __str_13:
00BD 46726571  1870            db 'Freq: %s'
     3A202573
00C5 0D        1871            db 0x0D
00C6 0A        1872            db 0x0A
00C7 00        1873            db 0x00
00C8           1874   
0003           1875            CSEG
0003           1876   
0003           1877   end
>>>>>>> 24db02c123a3c0efc890de0856246d5bdc07e639
