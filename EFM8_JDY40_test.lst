0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sun Mar 31 17:38:43 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _LCDprint
0000             29            public _LCD_4BIT
0000             30            public _WriteCommand
0000             31            public _WriteData
0000             32            public _LCD_byte
0000             33            public _LCD_pulse
0000             34            public _SendATCommand
0000             35            public _waitms_or_RI1
0000             36            public _RXU1
0000             37            public _getstr1
0000             38            public _getchar1_with_timeout
0000             39            public _getchar1
0000             40            public _sendstr1
0000             41            public _putchar1
0000             42            public _UART1_Init
0000             43            public _Volts_at_Pin
0000             44            public _Get_ADC
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _waitms
0000             48            public _Timer2_ISR
0000             49            public _TIMER2_Init
0000             50            public _TIMER0_Init
0000             51            public _Timer3us
0000             52            public _InitADC
0000             53            public __c51_external_startup
0000             54            public _LCDprint_PARM_3
0000             55            public _buff
0000             56            public _LCDprint_PARM_2
0000             57   ;--------------------------------------------------------
0000             58   ; Special Function Registers
0000             59   ;--------------------------------------------------------
0000             60   _ACC            DATA 0xe0
0000             61   _ADC0ASAH       DATA 0xb6
0000             62   _ADC0ASAL       DATA 0xb5
0000             63   _ADC0ASCF       DATA 0xa1
0000             64   _ADC0ASCT       DATA 0xc7
0000             65   _ADC0CF0        DATA 0xbc
0000             66   _ADC0CF1        DATA 0xb9
0000             67   _ADC0CF2        DATA 0xdf
0000             68   _ADC0CN0        DATA 0xe8
0000             69   _ADC0CN1        DATA 0xb2
0000             70   _ADC0CN2        DATA 0xb3
0000             71   _ADC0GTH        DATA 0xc4
0000             72   _ADC0GTL        DATA 0xc3
0000             73   _ADC0H          DATA 0xbe
0000             74   _ADC0L          DATA 0xbd
0000             75   _ADC0LTH        DATA 0xc6
0000             76   _ADC0LTL        DATA 0xc5
0000             77   _ADC0MX         DATA 0xbb
0000             78   _B              DATA 0xf0
0000             79   _CKCON0         DATA 0x8e
0000             80   _CKCON1         DATA 0xa6
0000             81   _CLEN0          DATA 0xc6
0000             82   _CLIE0          DATA 0xc7
0000             83   _CLIF0          DATA 0xe8
0000             84   _CLKSEL         DATA 0xa9
0000             85   _CLOUT0         DATA 0xd1
0000             86   _CLU0CF         DATA 0xb1
0000             87   _CLU0FN         DATA 0xaf
0000             88   _CLU0MX         DATA 0x84
0000             89   _CLU1CF         DATA 0xb3
0000             90   _CLU1FN         DATA 0xb2
0000             91   _CLU1MX         DATA 0x85
0000             92   _CLU2CF         DATA 0xb6
0000             93   _CLU2FN         DATA 0xb5
0000             94   _CLU2MX         DATA 0x91
0000             95   _CLU3CF         DATA 0xbf
0000             96   _CLU3FN         DATA 0xbe
0000             97   _CLU3MX         DATA 0xae
0000             98   _CMP0CN0        DATA 0x9b
0000             99   _CMP0CN1        DATA 0x99
0000            100   _CMP0MD         DATA 0x9d
0000            101   _CMP0MX         DATA 0x9f
0000            102   _CMP1CN0        DATA 0xbf
0000            103   _CMP1CN1        DATA 0xac
0000            104   _CMP1MD         DATA 0xab
0000            105   _CMP1MX         DATA 0xaa
0000            106   _CRC0CN0        DATA 0xce
0000            107   _CRC0CN1        DATA 0x86
0000            108   _CRC0CNT        DATA 0xd3
0000            109   _CRC0DAT        DATA 0xcb
0000            110   _CRC0FLIP       DATA 0xcf
0000            111   _CRC0IN         DATA 0xca
0000            112   _CRC0ST         DATA 0xd2
0000            113   _DAC0CF0        DATA 0x91
0000            114   _DAC0CF1        DATA 0x92
0000            115   _DAC0H          DATA 0x85
0000            116   _DAC0L          DATA 0x84
0000            117   _DAC1CF0        DATA 0x93
0000            118   _DAC1CF1        DATA 0x94
0000            119   _DAC1H          DATA 0x8a
0000            120   _DAC1L          DATA 0x89
0000            121   _DAC2CF0        DATA 0x95
0000            122   _DAC2CF1        DATA 0x96
0000            123   _DAC2H          DATA 0x8c
0000            124   _DAC2L          DATA 0x8b
0000            125   _DAC3CF0        DATA 0x9a
0000            126   _DAC3CF1        DATA 0x9c
0000            127   _DAC3H          DATA 0x8e
0000            128   _DAC3L          DATA 0x8d
0000            129   _DACGCF0        DATA 0x88
0000            130   _DACGCF1        DATA 0x98
0000            131   _DACGCF2        DATA 0xa2
0000            132   _DERIVID        DATA 0xad
0000            133   _DEVICEID       DATA 0xb5
0000            134   _DPH            DATA 0x83
0000            135   _DPL            DATA 0x82
0000            136   _EIE1           DATA 0xe6
0000            137   _EIE2           DATA 0xf3
0000            138   _EIP1           DATA 0xbb
0000            139   _EIP1H          DATA 0xee
0000            140   _EIP2           DATA 0xed
0000            141   _EIP2H          DATA 0xf6
0000            142   _EMI0CN         DATA 0xe7
0000            143   _FLKEY          DATA 0xb7
0000            144   _HFO0CAL        DATA 0xc7
0000            145   _HFO1CAL        DATA 0xd6
0000            146   _HFOCN          DATA 0xef
0000            147   _I2C0ADM        DATA 0xff
0000            148   _I2C0CN0        DATA 0xba
0000            149   _I2C0DIN        DATA 0xbc
0000            150   _I2C0DOUT       DATA 0xbb
0000            151   _I2C0FCN0       DATA 0xad
0000            152   _I2C0FCN1       DATA 0xab
0000            153   _I2C0FCT        DATA 0xf5
0000            154   _I2C0SLAD       DATA 0xbd
0000            155   _I2C0STAT       DATA 0xb9
0000            156   _IE             DATA 0xa8
0000            157   _IP             DATA 0xb8
0000            158   _IPH            DATA 0xf2
0000            159   _IT01CF         DATA 0xe4
0000            160   _LFO0CN         DATA 0xb1
0000            161   _P0             DATA 0x80
0000            162   _P0MASK         DATA 0xfe
0000            163   _P0MAT          DATA 0xfd
0000            164   _P0MDIN         DATA 0xf1
0000            165   _P0MDOUT        DATA 0xa4
0000            166   _P0SKIP         DATA 0xd4
0000            167   _P1             DATA 0x90
0000            168   _P1MASK         DATA 0xee
0000            169   _P1MAT          DATA 0xed
0000            170   _P1MDIN         DATA 0xf2
0000            171   _P1MDOUT        DATA 0xa5
0000            172   _P1SKIP         DATA 0xd5
0000            173   _P2             DATA 0xa0
0000            174   _P2MASK         DATA 0xfc
0000            175   _P2MAT          DATA 0xfb
0000            176   _P2MDIN         DATA 0xf3
0000            177   _P2MDOUT        DATA 0xa6
0000            178   _P2SKIP         DATA 0xcc
0000            179   _P3             DATA 0xb0
0000            180   _P3MDIN         DATA 0xf4
0000            181   _P3MDOUT        DATA 0x9c
0000            182   _PCA0CENT       DATA 0x9e
0000            183   _PCA0CLR        DATA 0x9c
0000            184   _PCA0CN0        DATA 0xd8
0000            185   _PCA0CPH0       DATA 0xfc
0000            186   _PCA0CPH1       DATA 0xea
0000            187   _PCA0CPH2       DATA 0xec
0000            188   _PCA0CPH3       DATA 0xf5
0000            189   _PCA0CPH4       DATA 0x85
0000            190   _PCA0CPH5       DATA 0xde
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPL1       DATA 0xe9
0000            193   _PCA0CPL2       DATA 0xeb
0000            194   _PCA0CPL3       DATA 0xf4
0000            195   _PCA0CPL4       DATA 0x84
0000            196   _PCA0CPL5       DATA 0xdd
0000            197   _PCA0CPM0       DATA 0xda
0000            198   _PCA0CPM1       DATA 0xdb
0000            199   _PCA0CPM2       DATA 0xdc
0000            200   _PCA0CPM3       DATA 0xae
0000            201   _PCA0CPM4       DATA 0xaf
0000            202   _PCA0CPM5       DATA 0xcc
0000            203   _PCA0H          DATA 0xfa
0000            204   _PCA0L          DATA 0xf9
0000            205   _PCA0MD         DATA 0xd9
0000            206   _PCA0POL        DATA 0x96
0000            207   _PCA0PWM        DATA 0xf7
0000            208   _PCON0          DATA 0x87
0000            209   _PCON1          DATA 0xcd
0000            210   _PFE0CN         DATA 0xc1
0000            211   _PRTDRV         DATA 0xf6
0000            212   _PSCTL          DATA 0x8f
0000            213   _PSTAT0         DATA 0xaa
0000            214   _PSW            DATA 0xd0
0000            215   _REF0CN         DATA 0xd1
0000            216   _REG0CN         DATA 0xc9
0000            217   _REVID          DATA 0xb6
0000            218   _RSTSRC         DATA 0xef
0000            219   _SBCON1         DATA 0x94
0000            220   _SBRLH1         DATA 0x96
0000            221   _SBRLL1         DATA 0x95
0000            222   _SBUF           DATA 0x99
0000            223   _SBUF0          DATA 0x99
0000            224   _SBUF1          DATA 0x92
0000            225   _SCON           DATA 0x98
0000            226   _SCON0          DATA 0x98
0000            227   _SCON1          DATA 0xc8
0000            228   _SFRPAGE        DATA 0xa7
0000            229   _SFRPGCN        DATA 0xbc
0000            230   _SFRSTACK       DATA 0xd7
0000            231   _SMB0ADM        DATA 0xd6
0000            232   _SMB0ADR        DATA 0xd7
0000            233   _SMB0CF         DATA 0xc1
0000            234   _SMB0CN0        DATA 0xc0
0000            235   _SMB0DAT        DATA 0xc2
0000            236   _SMB0FCN0       DATA 0xc3
0000            237   _SMB0FCN1       DATA 0xc4
0000            238   _SMB0FCT        DATA 0xef
0000            239   _SMB0RXLN       DATA 0xc5
0000            240   _SMB0TC         DATA 0xac
0000            241   _SMOD1          DATA 0x93
0000            242   _SP             DATA 0x81
0000            243   _SPI0CFG        DATA 0xa1
0000            244   _SPI0CKR        DATA 0xa2
0000            245   _SPI0CN0        DATA 0xf8
0000            246   _SPI0DAT        DATA 0xa3
0000            247   _SPI0FCN0       DATA 0x9a
0000            248   _SPI0FCN1       DATA 0x9b
0000            249   _SPI0FCT        DATA 0xf7
0000            250   _SPI0PCF        DATA 0xdf
0000            251   _TCON           DATA 0x88
0000            252   _TH0            DATA 0x8c
0000            253   _TH1            DATA 0x8d
0000            254   _TL0            DATA 0x8a
0000            255   _TL1            DATA 0x8b
0000            256   _TMOD           DATA 0x89
0000            257   _TMR2CN0        DATA 0xc8
0000            258   _TMR2CN1        DATA 0xfd
0000            259   _TMR2H          DATA 0xcf
0000            260   _TMR2L          DATA 0xce
0000            261   _TMR2RLH        DATA 0xcb
0000            262   _TMR2RLL        DATA 0xca
0000            263   _TMR3CN0        DATA 0x91
0000            264   _TMR3CN1        DATA 0xfe
0000            265   _TMR3H          DATA 0x95
0000            266   _TMR3L          DATA 0x94
0000            267   _TMR3RLH        DATA 0x93
0000            268   _TMR3RLL        DATA 0x92
0000            269   _TMR4CN0        DATA 0x98
0000            270   _TMR4CN1        DATA 0xff
0000            271   _TMR4H          DATA 0xa5
0000            272   _TMR4L          DATA 0xa4
0000            273   _TMR4RLH        DATA 0xa3
0000            274   _TMR4RLL        DATA 0xa2
0000            275   _TMR5CN0        DATA 0xc0
0000            276   _TMR5CN1        DATA 0xf1
0000            277   _TMR5H          DATA 0xd5
0000            278   _TMR5L          DATA 0xd4
0000            279   _TMR5RLH        DATA 0xd3
0000            280   _TMR5RLL        DATA 0xd2
0000            281   _UART0PCF       DATA 0xd9
0000            282   _UART1FCN0      DATA 0x9d
0000            283   _UART1FCN1      DATA 0xd8
0000            284   _UART1FCT       DATA 0xfa
0000            285   _UART1LIN       DATA 0x9e
0000            286   _UART1PCF       DATA 0xda
0000            287   _VDM0CN         DATA 0xff
0000            288   _WDTCN          DATA 0x97
0000            289   _XBR0           DATA 0xe1
0000            290   _XBR1           DATA 0xe2
0000            291   _XBR2           DATA 0xe3
0000            292   _XOSC0CN        DATA 0x86
0000            293   _DPTR           DATA 0x8382
0000            294   _TMR2RL         DATA 0xcbca
0000            295   _TMR3RL         DATA 0x9392
0000            296   _TMR4RL         DATA 0xa3a2
0000            297   _TMR5RL         DATA 0xd3d2
0000            298   _TMR0           DATA 0x8c8a
0000            299   _TMR1           DATA 0x8d8b
0000            300   _TMR2           DATA 0xcfce
0000            301   _TMR3           DATA 0x9594
0000            302   _TMR4           DATA 0xa5a4
0000            303   _TMR5           DATA 0xd5d4
0000            304   _SBRL1          DATA 0x9695
0000            305   _PCA0           DATA 0xfaf9
0000            306   _PCA0CP0        DATA 0xfcfb
0000            307   _PCA0CP1        DATA 0xeae9
0000            308   _PCA0CP2        DATA 0xeceb
0000            309   _PCA0CP3        DATA 0xf5f4
0000            310   _PCA0CP4        DATA 0x8584
0000            311   _PCA0CP5        DATA 0xdedd
0000            312   _ADC0ASA        DATA 0xb6b5
0000            313   _ADC0GT         DATA 0xc4c3
0000            314   _ADC0           DATA 0xbebd
0000            315   _ADC0LT         DATA 0xc6c5
0000            316   _DAC0           DATA 0x8584
0000            317   _DAC1           DATA 0x8a89
0000            318   _DAC2           DATA 0x8c8b
0000            319   _DAC3           DATA 0x8e8d
0000            320   ;--------------------------------------------------------
0000            321   ; special function bits
0000            322   ;--------------------------------------------------------
0000            323   _ACC_0          BIT 0xe0
0000            324   _ACC_1          BIT 0xe1
0000            325   _ACC_2          BIT 0xe2
0000            326   _ACC_3          BIT 0xe3
0000            327   _ACC_4          BIT 0xe4
0000            328   _ACC_5          BIT 0xe5
0000            329   _ACC_6          BIT 0xe6
0000            330   _ACC_7          BIT 0xe7
0000            331   _TEMPE          BIT 0xe8
0000            332   _ADGN0          BIT 0xe9
0000            333   _ADGN1          BIT 0xea
0000            334   _ADWINT         BIT 0xeb
0000            335   _ADBUSY         BIT 0xec
0000            336   _ADINT          BIT 0xed
0000            337   _IPOEN          BIT 0xee
0000            338   _ADEN           BIT 0xef
0000            339   _B_0            BIT 0xf0
0000            340   _B_1            BIT 0xf1
0000            341   _B_2            BIT 0xf2
0000            342   _B_3            BIT 0xf3
0000            343   _B_4            BIT 0xf4
0000            344   _B_5            BIT 0xf5
0000            345   _B_6            BIT 0xf6
0000            346   _B_7            BIT 0xf7
0000            347   _C0FIF          BIT 0xe8
0000            348   _C0RIF          BIT 0xe9
0000            349   _C1FIF          BIT 0xea
0000            350   _C1RIF          BIT 0xeb
0000            351   _C2FIF          BIT 0xec
0000            352   _C2RIF          BIT 0xed
0000            353   _C3FIF          BIT 0xee
0000            354   _C3RIF          BIT 0xef
0000            355   _D1SRC0         BIT 0x88
0000            356   _D1SRC1         BIT 0x89
0000            357   _D1AMEN         BIT 0x8a
0000            358   _D01REFSL       BIT 0x8b
0000            359   _D3SRC0         BIT 0x8c
0000            360   _D3SRC1         BIT 0x8d
0000            361   _D3AMEN         BIT 0x8e
0000            362   _D23REFSL       BIT 0x8f
0000            363   _D0UDIS         BIT 0x98
0000            364   _D1UDIS         BIT 0x99
0000            365   _D2UDIS         BIT 0x9a
0000            366   _D3UDIS         BIT 0x9b
0000            367   _EX0            BIT 0xa8
0000            368   _ET0            BIT 0xa9
0000            369   _EX1            BIT 0xaa
0000            370   _ET1            BIT 0xab
0000            371   _ES0            BIT 0xac
0000            372   _ET2            BIT 0xad
0000            373   _ESPI0          BIT 0xae
0000            374   _EA             BIT 0xaf
0000            375   _PX0            BIT 0xb8
0000            376   _PT0            BIT 0xb9
0000            377   _PX1            BIT 0xba
0000            378   _PT1            BIT 0xbb
0000            379   _PS0            BIT 0xbc
0000            380   _PT2            BIT 0xbd
0000            381   _PSPI0          BIT 0xbe
0000            382   _P0_0           BIT 0x80
0000            383   _P0_1           BIT 0x81
0000            384   _P0_2           BIT 0x82
0000            385   _P0_3           BIT 0x83
0000            386   _P0_4           BIT 0x84
0000            387   _P0_5           BIT 0x85
0000            388   _P0_6           BIT 0x86
0000            389   _P0_7           BIT 0x87
0000            390   _P1_0           BIT 0x90
0000            391   _P1_1           BIT 0x91
0000            392   _P1_2           BIT 0x92
0000            393   _P1_3           BIT 0x93
0000            394   _P1_4           BIT 0x94
0000            395   _P1_5           BIT 0x95
0000            396   _P1_6           BIT 0x96
0000            397   _P1_7           BIT 0x97
0000            398   _P2_0           BIT 0xa0
0000            399   _P2_1           BIT 0xa1
0000            400   _P2_2           BIT 0xa2
0000            401   _P2_3           BIT 0xa3
0000            402   _P2_4           BIT 0xa4
0000            403   _P2_5           BIT 0xa5
0000            404   _P2_6           BIT 0xa6
0000            405   _P3_0           BIT 0xb0
0000            406   _P3_1           BIT 0xb1
0000            407   _P3_2           BIT 0xb2
0000            408   _P3_3           BIT 0xb3
0000            409   _P3_4           BIT 0xb4
0000            410   _P3_7           BIT 0xb7
0000            411   _CCF0           BIT 0xd8
0000            412   _CCF1           BIT 0xd9
0000            413   _CCF2           BIT 0xda
0000            414   _CCF3           BIT 0xdb
0000            415   _CCF4           BIT 0xdc
0000            416   _CCF5           BIT 0xdd
0000            417   _CR             BIT 0xde
0000            418   _CF             BIT 0xdf
0000            419   _PARITY         BIT 0xd0
0000            420   _F1             BIT 0xd1
0000            421   _OV             BIT 0xd2
0000            422   _RS0            BIT 0xd3
0000            423   _RS1            BIT 0xd4
0000            424   _F0             BIT 0xd5
0000            425   _AC             BIT 0xd6
0000            426   _CY             BIT 0xd7
0000            427   _RI             BIT 0x98
0000            428   _TI             BIT 0x99
0000            429   _RB8            BIT 0x9a
0000            430   _TB8            BIT 0x9b
0000            431   _REN            BIT 0x9c
0000            432   _CE             BIT 0x9d
0000            433   _SMODE          BIT 0x9e
0000            434   _RI1            BIT 0xc8
0000            435   _TI1            BIT 0xc9
0000            436   _RBX1           BIT 0xca
0000            437   _TBX1           BIT 0xcb
0000            438   _REN1           BIT 0xcc
0000            439   _PERR1          BIT 0xcd
0000            440   _OVR1           BIT 0xce
0000            441   _SI             BIT 0xc0
0000            442   _ACK            BIT 0xc1
0000            443   _ARBLOST        BIT 0xc2
0000            444   _ACKRQ          BIT 0xc3
0000            445   _STO            BIT 0xc4
0000            446   _STA            BIT 0xc5
0000            447   _TXMODE         BIT 0xc6
0000            448   _MASTER         BIT 0xc7
0000            449   _SPIEN          BIT 0xf8
0000            450   _TXNF           BIT 0xf9
0000            451   _NSSMD0         BIT 0xfa
0000            452   _NSSMD1         BIT 0xfb
0000            453   _RXOVRN         BIT 0xfc
0000            454   _MODF           BIT 0xfd
0000            455   _WCOL           BIT 0xfe
0000            456   _SPIF           BIT 0xff
0000            457   _IT0            BIT 0x88
0000            458   _IE0            BIT 0x89
0000            459   _IT1            BIT 0x8a
0000            460   _IE1            BIT 0x8b
0000            461   _TR0            BIT 0x8c
0000            462   _TF0            BIT 0x8d
0000            463   _TR1            BIT 0x8e
0000            464   _TF1            BIT 0x8f
0000            465   _T2XCLK0        BIT 0xc8
0000            466   _T2XCLK1        BIT 0xc9
0000            467   _TR2            BIT 0xca
0000            468   _T2SPLIT        BIT 0xcb
0000            469   _TF2CEN         BIT 0xcc
0000            470   _TF2LEN         BIT 0xcd
0000            471   _TF2L           BIT 0xce
0000            472   _TF2H           BIT 0xcf
0000            473   _T4XCLK0        BIT 0x98
0000            474   _T4XCLK1        BIT 0x99
0000            475   _TR4            BIT 0x9a
0000            476   _T4SPLIT        BIT 0x9b
0000            477   _TF4CEN         BIT 0x9c
0000            478   _TF4LEN         BIT 0x9d
0000            479   _TF4L           BIT 0x9e
0000            480   _TF4H           BIT 0x9f
0000            481   _T5XCLK0        BIT 0xc0
0000            482   _T5XCLK1        BIT 0xc1
0000            483   _TR5            BIT 0xc2
0000            484   _T5SPLIT        BIT 0xc3
0000            485   _TF5CEN         BIT 0xc4
0000            486   _TF5LEN         BIT 0xc5
0000            487   _TF5L           BIT 0xc6
0000            488   _TF5H           BIT 0xc7
0000            489   _RIE            BIT 0xd8
0000            490   _RXTO0          BIT 0xd9
0000            491   _RXTO1          BIT 0xda
0000            492   _RFRQ           BIT 0xdb
0000            493   _TIE            BIT 0xdc
0000            494   _TXHOLD         BIT 0xdd
0000            495   _TXNF1          BIT 0xde
0000            496   _TFRQ           BIT 0xdf
0000            497   ;--------------------------------------------------------
0000            498   ; overlayable register banks
0000            499   ;--------------------------------------------------------
0000            500            rbank0 segment data overlay
0000            501   ;--------------------------------------------------------
0000            502   ; internal ram data
0000            503   ;--------------------------------------------------------
0000            504            rseg R_DSEG
0000            505   _LCDprint_PARM_2:
0000            506            ds 1
0001            507   ;--------------------------------------------------------
0001            508   ; overlayable items in internal ram 
0001            509   ;--------------------------------------------------------
0000            510            rseg    R_OSEG
0000            511            rseg    R_OSEG
0000            512   _InitPinADC_PARM_2:
0000            513            ds 1
0001            514            rseg    R_OSEG
0001            515            rseg    R_OSEG
0001            516            rseg    R_OSEG
0001            517   ;--------------------------------------------------------
0001            518   ; indirectly addressable internal ram data
0001            519   ;--------------------------------------------------------
0000            520            rseg R_ISEG
0000            521   _buff:
0000            522            ds 20
0014            523   ;--------------------------------------------------------
0014            524   ; absolute internal ram data
0014            525   ;--------------------------------------------------------
0000            526            DSEG
0000            527   ;--------------------------------------------------------
0000            528   ; bit data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_BSEG
0000            531   _LCDprint_PARM_3:
0000            532            DBIT    1
0001            533   ;--------------------------------------------------------
0001            534   ; paged external ram data
0001            535   ;--------------------------------------------------------
0000            536            rseg R_PSEG
0000            537   ;--------------------------------------------------------
0000            538   ; external ram data
0000            539   ;--------------------------------------------------------
0000            540            rseg R_XSEG
0000            541   ;--------------------------------------------------------
0000            542   ; absolute external ram data
0000            543   ;--------------------------------------------------------
0000            544            XSEG
0000            545   ;--------------------------------------------------------
0000            546   ; external initialized ram data
0000            547   ;--------------------------------------------------------
0000            548            rseg R_IXSEG
0000            549            rseg R_HOME
0000            550            rseg R_GSINIT
0000            551            rseg R_CSEG
0000            552   ;--------------------------------------------------------
0000            553   ; Reset entry point and interrupt vectors
0000            554   ;--------------------------------------------------------
0000            555            CSEG at 0x0000
0000 020000     556            ljmp    _crt0
0003            557   ;--------------------------------------------------------
0003            558   ; global & static initialisations
0003            559   ;--------------------------------------------------------
0000            560            rseg R_HOME
0000            561            rseg R_GSINIT
0000            562            rseg R_GSINIT
0000            563   ;--------------------------------------------------------
0000            564   ; data variables initialization
0000            565   ;--------------------------------------------------------
0000            566            rseg R_DINIT
0000            567            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            568   ;--------------------------------------------------------
0000            569   ; code
0000            570   ;--------------------------------------------------------
0000            571            rseg R_CSEG
0000            572   ;------------------------------------------------------------
0000            573   ;Allocation info for local variables in function '_c51_external_startup'
0000            574   ;------------------------------------------------------------
0000            575   ;------------------------------------------------------------
0000            576   ;        EFM8_JDY40_test.c:35: char _c51_external_startup (void)
0000            577   ;        -----------------------------------------
0000            578   ;         function _c51_external_startup
0000            579   ;        -----------------------------------------
0000            580   __c51_external_startup:
0000            581            using   0
0000            582   ;        EFM8_JDY40_test.c:38: SFRPAGE = 0x00;
0000 75A700     583            mov     _SFRPAGE,#0x00
0003            584   ;        EFM8_JDY40_test.c:39: WDTCN = 0xDE; //First key
0003 7597DE     585            mov     _WDTCN,#0xDE
0006            586   ;        EFM8_JDY40_test.c:40: WDTCN = 0xAD; //Second key
0006 7597AD     587            mov     _WDTCN,#0xAD
0009            588   ;        EFM8_JDY40_test.c:42: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     589            mov     _VDM0CN,#0x80
000C            590   ;        EFM8_JDY40_test.c:43: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     591            mov     _RSTSRC,#0x06
000F            592   ;        EFM8_JDY40_test.c:50: SFRPAGE = 0x10;
000F 75A710     593            mov     _SFRPAGE,#0x10
0012            594   ;        EFM8_JDY40_test.c:51: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     595            mov     _PFE0CN,#0x20
0015            596   ;        EFM8_JDY40_test.c:52: SFRPAGE = 0x00;
0015 75A700     597            mov     _SFRPAGE,#0x00
0018            598   ;        EFM8_JDY40_test.c:73: CLKSEL = 0x00;
0018 75A900     599            mov     _CLKSEL,#0x00
001B            600   ;        EFM8_JDY40_test.c:74: CLKSEL = 0x00;
001B 75A900     601            mov     _CLKSEL,#0x00
001E            602   ;        EFM8_JDY40_test.c:75: while ((CLKSEL & 0x80) == 0);
001E            603   L002001?:
001E E5A9       604            mov     a,_CLKSEL
0020 30E710     605            jnb     acc.7,L002001?
0023            606   ;        EFM8_JDY40_test.c:76: CLKSEL = 0x03;
0023 75A903     607            mov     _CLKSEL,#0x03
0026            608   ;        EFM8_JDY40_test.c:77: CLKSEL = 0x03;
0026 75A903     609            mov     _CLKSEL,#0x03
0029            610   ;        EFM8_JDY40_test.c:78: while ((CLKSEL & 0x80) == 0);
0029            611   L002004?:
0029 E5A9       612            mov     a,_CLKSEL
002B 30E790     613            jnb     acc.7,L002004?
002E            614   ;        EFM8_JDY40_test.c:83: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     615            orl     _P0MDOUT,#0x11
0031            616   ;        EFM8_JDY40_test.c:84: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     617            orl     _P2MDOUT,#0x01
0034            618   ;        EFM8_JDY40_test.c:85: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     619            mov     _XBR0,#0x01
0037            620   ;        EFM8_JDY40_test.c:86: XBR1     = 0X00;
0037 75E200     621            mov     _XBR1,#0x00
003A            622   ;        EFM8_JDY40_test.c:87: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     623            mov     _XBR2,#0x41
003D            624   ;        EFM8_JDY40_test.c:93: SCON0 = 0x10;
003D 759810     625            mov     _SCON0,#0x10
0040            626   ;        EFM8_JDY40_test.c:94: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     627            mov     _TH1,#0xE6
0043            628   ;        EFM8_JDY40_test.c:95: TL1 = TH1;      // Init Timer1
0043 858D8B     629            mov     _TL1,_TH1
0046            630   ;        EFM8_JDY40_test.c:96: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     631            anl     _TMOD,#0x0F
0049            632   ;        EFM8_JDY40_test.c:97: TMOD |=  0x20;                       
0049 438920     633            orl     _TMOD,#0x20
004C            634   ;        EFM8_JDY40_test.c:98: TR1 = 1; // START Timer1
004C D28E       635            setb    _TR1
004E            636   ;        EFM8_JDY40_test.c:99: TI = 1;  // Indicate TX0 ready
004E D299       637            setb    _TI
0050            638   ;        EFM8_JDY40_test.c:101: return 0;
0050 758200     639            mov     dpl,#0x00
0053 22         640            ret
0054            641   ;------------------------------------------------------------
0054            642   ;Allocation info for local variables in function 'InitADC'
0054            643   ;------------------------------------------------------------
0054            644   ;------------------------------------------------------------
0054            645   ;        EFM8_JDY40_test.c:104: void InitADC (void)
0054            646   ;        -----------------------------------------
0054            647   ;         function InitADC
0054            648   ;        -----------------------------------------
0054            649   _InitADC:
0054            650   ;        EFM8_JDY40_test.c:106: SFRPAGE = 0x00;
0054 75A700     651            mov     _SFRPAGE,#0x00
0057            652   ;        EFM8_JDY40_test.c:107: ADEN=0; // Disable ADC
0057 C2EF       653            clr     _ADEN
0059            654   ;        EFM8_JDY40_test.c:112: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     655            mov     _ADC0CN1,#0x80
005C            656   ;        EFM8_JDY40_test.c:116: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     657            mov     _ADC0CF0,#0x20
005F            658   ;        EFM8_JDY40_test.c:120: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     659            mov     _ADC0CF1,#0x1E
0062            660   ;        EFM8_JDY40_test.c:129: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     661            mov     _ADC0CN0,#0x00
0065            662   ;        EFM8_JDY40_test.c:134: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     663            mov     _ADC0CF2,#0x3F
0068            664   ;        EFM8_JDY40_test.c:138: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     665            mov     _ADC0CN2,#0x00
006B            666   ;        EFM8_JDY40_test.c:140: ADEN=1; // Enable ADC
006B D2EF       667            setb    _ADEN
006D 22         668            ret
006E            669   ;------------------------------------------------------------
006E            670   ;Allocation info for local variables in function 'Timer3us'
006E            671   ;------------------------------------------------------------
006E            672   ;us                        Allocated to registers r2 
006E            673   ;i                         Allocated to registers r3 
006E            674   ;------------------------------------------------------------
006E            675   ;        EFM8_JDY40_test.c:145: void Timer3us(unsigned char us)
006E            676   ;        -----------------------------------------
006E            677   ;         function Timer3us
006E            678   ;        -----------------------------------------
006E            679   _Timer3us:
006E AA82       680            mov     r2,dpl
0070            681   ;        EFM8_JDY40_test.c:150: CKCON0|=0b_0100_0000;
0070 438E40     682            orl     _CKCON0,#0x40
0073            683   ;        EFM8_JDY40_test.c:152: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     684            mov     _TMR3RL,#0xB8
0076 7593FF     685            mov     (_TMR3RL >> 8),#0xFF
0079            686   ;        EFM8_JDY40_test.c:153: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     687            mov     _TMR3,_TMR3RL
007C 859395     688            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            689   ;        EFM8_JDY40_test.c:155: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     690            mov     _TMR3CN0,#0x04
0082            691   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       692            mov     r3,#0x00
0084            693   L004004?:
0084 C3         694            clr     c
0085 EB         695            mov     a,r3
0086 9A         696            subb    a,r2
0087 5000       697            jnc     L004007?
0089            698   ;        EFM8_JDY40_test.c:158: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            699   L004001?:
0089 E591       700            mov     a,_TMR3CN0
008B 30E790     701            jnb     acc.7,L004001?
008E            702   ;        EFM8_JDY40_test.c:159: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     703            anl     _TMR3CN0,#0x7F
0091            704   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         705            inc     r3
0092 8000       706            sjmp    L004004?
0094            707   L004007?:
0094            708   ;        EFM8_JDY40_test.c:161: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     709            mov     _TMR3CN0,#0x00
0097 22         710            ret
0098            711   ;------------------------------------------------------------
0098            712   ;Allocation info for local variables in function 'TIMER0_Init'
0098            713   ;------------------------------------------------------------
0098            714   ;------------------------------------------------------------
0098            715   ;        EFM8_JDY40_test.c:164: void TIMER0_Init(void)
0098            716   ;        -----------------------------------------
0098            717   ;         function TIMER0_Init
0098            718   ;        -----------------------------------------
0098            719   _TIMER0_Init:
0098            720   ;        EFM8_JDY40_test.c:166: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0098 5389F0     721            anl     _TMOD,#0xF0
009B            722   ;        EFM8_JDY40_test.c:167: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
009B 438901     723            orl     _TMOD,#0x01
009E            724   ;        EFM8_JDY40_test.c:168: TR0=0; // Stop Timer/Counter 0
009E C28C       725            clr     _TR0
00A0 22         726            ret
00A1            727   ;------------------------------------------------------------
00A1            728   ;Allocation info for local variables in function 'TIMER2_Init'
00A1            729   ;------------------------------------------------------------
00A1            730   ;------------------------------------------------------------
00A1            731   ;        EFM8_JDY40_test.c:174: void TIMER2_Init(void){
00A1            732   ;        -----------------------------------------
00A1            733   ;         function TIMER2_Init
00A1            734   ;        -----------------------------------------
00A1            735   _TIMER2_Init:
00A1            736   ;        EFM8_JDY40_test.c:176: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
00A1 75C800     737            mov     _TMR2CN0,#0x00
00A4            738   ;        EFM8_JDY40_test.c:177: CKCON0|=0b_0001_0000;
00A4 438E10     739            orl     _CKCON0,#0x10
00A7            740   ;        EFM8_JDY40_test.c:178: TMR2RL=(-(SYSCLK/(2*DEFAULT_F))); // Initialize reload value
00A7 75CAEE     741            mov     _TMR2RL,#0xEE
00AA 75CBF6     742            mov     (_TMR2RL >> 8),#0xF6
00AD            743   ;        EFM8_JDY40_test.c:179: TMR2=0xffff;   // Set to reload immediately
00AD 75CEFF     744            mov     _TMR2,#0xFF
00B0 75CFFF     745            mov     (_TMR2 >> 8),#0xFF
00B3            746   ;        EFM8_JDY40_test.c:180: ET2=1;         // Enable Timer2 interrupts
00B3 D2AD       747            setb    _ET2
00B5            748   ;        EFM8_JDY40_test.c:181: TR2=1;         // Start Timer2
00B5 D2CA       749            setb    _TR2
00B7            750   ;        EFM8_JDY40_test.c:182: EA=1; // Global interrupt enable
00B7 D2AF       751            setb    _EA
00B9 22         752            ret
00BA            753   ;------------------------------------------------------------
00BA            754   ;Allocation info for local variables in function 'Timer2_ISR'
00BA            755   ;------------------------------------------------------------
00BA            756   ;------------------------------------------------------------
00BA            757   ;        EFM8_JDY40_test.c:185: void Timer2_ISR (void) //interrupt INTERRUPT_TIMER2
00BA            758   ;        -----------------------------------------
00BA            759   ;         function Timer2_ISR
00BA            760   ;        -----------------------------------------
00BA            761   _Timer2_ISR:
00BA            762   ;        EFM8_JDY40_test.c:187: TF2H = 0; // Clear Timer2 interrupt flag
00BA C2CF       763            clr     _TF2H
00BC            764   ;        EFM8_JDY40_test.c:188: OUT0=!OUT0;
00BC B2B3       765            cpl     _P3_3
00BE 22         766            ret
00BF            767   ;------------------------------------------------------------
00BF            768   ;Allocation info for local variables in function 'waitms'
00BF            769   ;------------------------------------------------------------
00BF            770   ;ms                        Allocated to registers r2 r3 
00BF            771   ;j                         Allocated to registers r4 r5 
00BF            772   ;k                         Allocated to registers r6 
00BF            773   ;------------------------------------------------------------
00BF            774   ;        EFM8_JDY40_test.c:192: void waitms (unsigned int ms)
00BF            775   ;        -----------------------------------------
00BF            776   ;         function waitms
00BF            777   ;        -----------------------------------------
00BF            778   _waitms:
00BF AA82       779            mov     r2,dpl
00C1 AB83       780            mov     r3,dph
00C3            781   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00C3 7C00       782            mov     r4,#0x00
00C5 7D00       783            mov     r5,#0x00
00C7            784   L008005?:
00C7 C3         785            clr     c
00C8 EC         786            mov     a,r4
00C9 9A         787            subb    a,r2
00CA ED         788            mov     a,r5
00CB 9B         789            subb    a,r3
00CC 5000       790            jnc     L008009?
00CE            791   ;        EFM8_JDY40_test.c:197: for (k=0; k<4; k++) Timer3us(250);
00CE 7E00       792            mov     r6,#0x00
00D0            793   L008001?:
00D0 BE04D0     794            cjne    r6,#0x04,L008018?
00D3            795   L008018?:
00D3 5000       796            jnc     L008007?
00D5 7582FA     797            mov     dpl,#0xFA
00D8 C002       798            push    ar2
00DA C003       799            push    ar3
00DC C004       800            push    ar4
00DE C005       801            push    ar5
00E0 C006       802            push    ar6
00E2 120000     803            lcall   _Timer3us
00E5 D006       804            pop     ar6
00E7 D005       805            pop     ar5
00E9 D004       806            pop     ar4
00EB D003       807            pop     ar3
00ED D002       808            pop     ar2
00EF 0E         809            inc     r6
00F0 8000       810            sjmp    L008001?
00F2            811   L008007?:
00F2            812   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00F2 0C         813            inc     r4
00F3 BC0010     814            cjne    r4,#0x00,L008005?
00F6 0D         815            inc     r5
00F7 8000       816            sjmp    L008005?
00F9            817   L008009?:
00F9 22         818            ret
00FA            819   ;------------------------------------------------------------
00FA            820   ;Allocation info for local variables in function 'InitPinADC'
00FA            821   ;------------------------------------------------------------
00FA            822   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00FA            823   ;portno                    Allocated to registers r2 
00FA            824   ;mask                      Allocated to registers r3 
00FA            825   ;------------------------------------------------------------
00FA            826   ;        EFM8_JDY40_test.c:200: void InitPinADC (unsigned char portno, unsigned char pinno)
00FA            827   ;        -----------------------------------------
00FA            828   ;         function InitPinADC
00FA            829   ;        -----------------------------------------
00FA            830   _InitPinADC:
00FA AA82       831            mov     r2,dpl
00FC            832   ;        EFM8_JDY40_test.c:204: mask=1<<pinno;
00FC 8560F0     833            mov     b,_InitPinADC_PARM_2
00FF 05F0       834            inc     b
0101 7401       835            mov     a,#0x01
0103 8000       836            sjmp    L009013?
0105            837   L009011?:
0105 25E0       838            add     a,acc
0107            839   L009013?:
0107 D5F0D0     840            djnz    b,L009011?
010A FB         841            mov     r3,a
010B            842   ;        EFM8_JDY40_test.c:206: SFRPAGE = 0x20;
010B 75A720     843            mov     _SFRPAGE,#0x20
010E            844   ;        EFM8_JDY40_test.c:207: switch (portno)
010E BA0010     845            cjne    r2,#0x00,L009014?
0111 8000       846            sjmp    L009001?
0113            847   L009014?:
0113 BA0190     848            cjne    r2,#0x01,L009015?
0116 8000       849            sjmp    L009002?
0118            850   L009015?:
0118            851   ;        EFM8_JDY40_test.c:209: case 0:
0118 BA0210     852            cjne    r2,#0x02,L009005?
011B 8000       853            sjmp    L009003?
011D            854   L009001?:
011D            855   ;        EFM8_JDY40_test.c:210: P0MDIN &= (~mask); // Set pin as analog input
011D EB         856            mov     a,r3
011E F4         857            cpl     a
011F FA         858            mov     r2,a
0120 52F1       859            anl     _P0MDIN,a
0122            860   ;        EFM8_JDY40_test.c:211: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0122 EB         861            mov     a,r3
0123 42D4       862            orl     _P0SKIP,a
0125            863   ;        EFM8_JDY40_test.c:212: break;
0125            864   ;        EFM8_JDY40_test.c:213: case 1:
0125 8000       865            sjmp    L009005?
0127            866   L009002?:
0127            867   ;        EFM8_JDY40_test.c:214: P1MDIN &= (~mask); // Set pin as analog input
0127 EB         868            mov     a,r3
0128 F4         869            cpl     a
0129 FA         870            mov     r2,a
012A 52F2       871            anl     _P1MDIN,a
012C            872   ;        EFM8_JDY40_test.c:215: P1SKIP |= mask; // Skip Crossbar decoding for this pin
012C EB         873            mov     a,r3
012D 42D5       874            orl     _P1SKIP,a
012F            875   ;        EFM8_JDY40_test.c:216: break;
012F            876   ;        EFM8_JDY40_test.c:217: case 2:
012F 8000       877            sjmp    L009005?
0131            878   L009003?:
0131            879   ;        EFM8_JDY40_test.c:218: P2MDIN &= (~mask); // Set pin as analog input
0131 EB         880            mov     a,r3
0132 F4         881            cpl     a
0133 FA         882            mov     r2,a
0134 52F3       883            anl     _P2MDIN,a
0136            884   ;        EFM8_JDY40_test.c:219: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0136 EB         885            mov     a,r3
0137 42CC       886            orl     _P2SKIP,a
0139            887   ;        EFM8_JDY40_test.c:223: }
0139            888   L009005?:
0139            889   ;        EFM8_JDY40_test.c:224: SFRPAGE = 0x00;
0139 75A700     890            mov     _SFRPAGE,#0x00
013C 22         891            ret
013D            892   ;------------------------------------------------------------
013D            893   ;Allocation info for local variables in function 'ADC_at_Pin'
013D            894   ;------------------------------------------------------------
013D            895   ;pin                       Allocated to registers 
013D            896   ;------------------------------------------------------------
013D            897   ;        EFM8_JDY40_test.c:227: unsigned int ADC_at_Pin(unsigned char pin)
013D            898   ;        -----------------------------------------
013D            899   ;         function ADC_at_Pin
013D            900   ;        -----------------------------------------
013D            901   _ADC_at_Pin:
013D 8582BB     902            mov     _ADC0MX,dpl
0140            903   ;        EFM8_JDY40_test.c:230: ADINT = 0;
0140 C2ED       904            clr     _ADINT
0142            905   ;        EFM8_JDY40_test.c:231: ADBUSY = 1;     // Convert voltage at the pin
0142 D2EC       906            setb    _ADBUSY
0144            907   ;        EFM8_JDY40_test.c:232: while (!ADINT); // Wait for conversion to complete
0144            908   L010001?:
0144 30ED90     909            jnb     _ADINT,L010001?
0147            910   ;        EFM8_JDY40_test.c:233: return (ADC0);
0147 85BD82     911            mov     dpl,_ADC0
014A 85BE83     912            mov     dph,(_ADC0 >> 8)
014D 22         913            ret
014E            914   ;------------------------------------------------------------
014E            915   ;Allocation info for local variables in function 'Get_ADC'
014E            916   ;------------------------------------------------------------
014E            917   ;------------------------------------------------------------
014E            918   ;        EFM8_JDY40_test.c:236: unsigned int Get_ADC (void)
014E            919   ;        -----------------------------------------
014E            920   ;         function Get_ADC
014E            921   ;        -----------------------------------------
014E            922   _Get_ADC:
014E            923   ;        EFM8_JDY40_test.c:238: ADINT = 0;
014E C2ED       924            clr     _ADINT
0150            925   ;        EFM8_JDY40_test.c:239: ADBUSY = 1;
0150 D2EC       926            setb    _ADBUSY
0152            927   ;        EFM8_JDY40_test.c:240: while (!ADINT); // Wait for conversion to complete
0152            928   L011001?:
0152 30EDD0     929            jnb     _ADINT,L011001?
0155            930   ;        EFM8_JDY40_test.c:241: return (ADC0);
0155 85BD82     931            mov     dpl,_ADC0
0158 85BE83     932            mov     dph,(_ADC0 >> 8)
015B 22         933            ret
015C            934   ;------------------------------------------------------------
015C            935   ;Allocation info for local variables in function 'Volts_at_Pin'
015C            936   ;------------------------------------------------------------
015C            937   ;pin                       Allocated to registers r2 
015C            938   ;------------------------------------------------------------
015C            939   ;        EFM8_JDY40_test.c:245: float Volts_at_Pin(unsigned char pin)
015C            940   ;        -----------------------------------------
015C            941   ;         function Volts_at_Pin
015C            942   ;        -----------------------------------------
015C            943   _Volts_at_Pin:
015C            944   ;        EFM8_JDY40_test.c:247: return ((ADC_at_Pin(pin)*VDD)/16383);
015C 120000     945            lcall   _ADC_at_Pin
015F 120000     946            lcall   ___uint2fs
0162 AA82       947            mov     r2,dpl
0164 AB83       948            mov     r3,dph
0166 ACF0       949            mov     r4,b
0168 FD         950            mov     r5,a
0169 C002       951            push    ar2
016B C003       952            push    ar3
016D C004       953            push    ar4
016F C005       954            push    ar5
0171 903333     955            mov     dptr,#0x3333
0174 75F09B     956            mov     b,#0x9B
0177 7440       957            mov     a,#0x40
0179 120000     958            lcall   ___fsmul
017C AA82       959            mov     r2,dpl
017E AB83       960            mov     r3,dph
0180 ACF0       961            mov     r4,b
0182 FD         962            mov     r5,a
0183 E581       963            mov     a,sp
0185 24FC       964            add     a,#0xfc
0187 F581       965            mov     sp,a
0189 E4         966            clr     a
018A C0E0       967            push    acc
018C 74FC       968            mov     a,#0xFC
018E C0E0       969            push    acc
0190 747F       970            mov     a,#0x7F
0192 C0E0       971            push    acc
0194 7446       972            mov     a,#0x46
0196 C0E0       973            push    acc
0198 8A82       974            mov     dpl,r2
019A 8B83       975            mov     dph,r3
019C 8CF0       976            mov     b,r4
019E ED         977            mov     a,r5
019F 120000     978            lcall   ___fsdiv
01A2 AA82       979            mov     r2,dpl
01A4 AB83       980            mov     r3,dph
01A6 ACF0       981            mov     r4,b
01A8 FD         982            mov     r5,a
01A9 E581       983            mov     a,sp
01AB 24FC       984            add     a,#0xfc
01AD F581       985            mov     sp,a
01AF 8A82       986            mov     dpl,r2
01B1 8B83       987            mov     dph,r3
01B3 8CF0       988            mov     b,r4
01B5 ED         989            mov     a,r5
01B6 22         990            ret
01B7            991   ;------------------------------------------------------------
01B7            992   ;Allocation info for local variables in function 'UART1_Init'
01B7            993   ;------------------------------------------------------------
01B7            994   ;baudrate                  Allocated to registers r2 r3 r4 r5 
01B7            995   ;------------------------------------------------------------
01B7            996   ;        EFM8_JDY40_test.c:250: void UART1_Init (unsigned long baudrate)
01B7            997   ;        -----------------------------------------
01B7            998   ;         function UART1_Init
01B7            999   ;        -----------------------------------------
01B7           1000   _UART1_Init:
01B7 AA82      1001            mov     r2,dpl
01B9 AB83      1002            mov     r3,dph
01BB ACF0      1003            mov     r4,b
01BD FD        1004            mov     r5,a
01BE           1005   ;        EFM8_JDY40_test.c:252: SFRPAGE = 0x20;
01BE 75A720    1006            mov     _SFRPAGE,#0x20
01C1           1007   ;        EFM8_JDY40_test.c:253: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01C1 75930C    1008            mov     _SMOD1,#0x0C
01C4           1009   ;        EFM8_JDY40_test.c:254: SCON1 = 0x10;
01C4 75C810    1010            mov     _SCON1,#0x10
01C7           1011   ;        EFM8_JDY40_test.c:255: SBCON1 =0x00;   // disable baud rate generator
01C7 759400    1012            mov     _SBCON1,#0x00
01CA           1013   ;        EFM8_JDY40_test.c:256: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01CA 8A00      1014            mov     __divulong_PARM_2,r2
01CC 8B01      1015            mov     (__divulong_PARM_2 + 1),r3
01CE 8C02      1016            mov     (__divulong_PARM_2 + 2),r4
01D0 8D03      1017            mov     (__divulong_PARM_2 + 3),r5
01D2 90A200    1018            mov     dptr,#0xA200
01D5 75F04A    1019            mov     b,#0x4A
01D8 7404      1020            mov     a,#0x04
01DA 120000    1021            lcall   __divulong
01DD AA82      1022            mov     r2,dpl
01DF AB83      1023            mov     r3,dph
01E1 ACF0      1024            mov     r4,b
01E3 FD        1025            mov     r5,a
01E4 750018    1026            mov     __divulong_PARM_2,#0x18
01E7 E4        1027            clr     a
01E8 F501      1028            mov     (__divulong_PARM_2 + 1),a
01EA F502      1029            mov     (__divulong_PARM_2 + 2),a
01EC F503      1030            mov     (__divulong_PARM_2 + 3),a
01EE 8A82      1031            mov     dpl,r2
01F0 8B83      1032            mov     dph,r3
01F2 8CF0      1033            mov     b,r4
01F4 ED        1034            mov     a,r5
01F5 120000    1035            lcall   __divulong
01F8 AA82      1036            mov     r2,dpl
01FA AB83      1037            mov     r3,dph
01FC ACF0      1038            mov     r4,b
01FE FD        1039            mov     r5,a
01FF E4        1040            clr     a
0200 C3        1041            clr     c
0201 9A        1042            subb    a,r2
0202 FA        1043            mov     r2,a
0203 E4        1044            clr     a
0204 9B        1045            subb    a,r3
0205 FB        1046            mov     r3,a
0206 7401      1047            mov     a,#0x01
0208 9C        1048            subb    a,r4
0209 E4        1049            clr     a
020A 9D        1050            subb    a,r5
020B 8A95      1051            mov     _SBRL1,r2
020D 8B96      1052            mov     (_SBRL1 >> 8),r3
020F           1053   ;        EFM8_JDY40_test.c:257: TI1 = 1; // indicate ready for TX
020F D2C9      1054            setb    _TI1
0211           1055   ;        EFM8_JDY40_test.c:258: SBCON1 |= 0x40;   // enable baud rate generator
0211 439440    1056            orl     _SBCON1,#0x40
0214           1057   ;        EFM8_JDY40_test.c:259: SFRPAGE = 0x00;
0214 75A700    1058            mov     _SFRPAGE,#0x00
0217 22        1059            ret
0218           1060   ;------------------------------------------------------------
0218           1061   ;Allocation info for local variables in function 'putchar1'
0218           1062   ;------------------------------------------------------------
0218           1063   ;c                         Allocated to registers r2 
0218           1064   ;------------------------------------------------------------
0218           1065   ;        EFM8_JDY40_test.c:262: void putchar1 (char c) 
0218           1066   ;        -----------------------------------------
0218           1067   ;         function putchar1
0218           1068   ;        -----------------------------------------
0218           1069   _putchar1:
0218 AA82      1070            mov     r2,dpl
021A           1071   ;        EFM8_JDY40_test.c:264: SFRPAGE = 0x20;
021A 75A720    1072            mov     _SFRPAGE,#0x20
021D           1073   ;        EFM8_JDY40_test.c:265: while (!TI1);
021D           1074   L014001?:
021D           1075   ;        EFM8_JDY40_test.c:266: TI1=0;
021D 10C9E8    1076            jbc     _TI1,L014008?
0220 8000      1077            sjmp    L014001?
0222           1078   L014008?:
0222           1079   ;        EFM8_JDY40_test.c:267: SBUF1 = c;
0222 8A92      1080            mov     _SBUF1,r2
0224           1081   ;        EFM8_JDY40_test.c:268: SFRPAGE = 0x00;
0224 75A700    1082            mov     _SFRPAGE,#0x00
0227 22        1083            ret
0228           1084   ;------------------------------------------------------------
0228           1085   ;Allocation info for local variables in function 'sendstr1'
0228           1086   ;------------------------------------------------------------
0228           1087   ;s                         Allocated to registers r2 r3 r4 
0228           1088   ;------------------------------------------------------------
0228           1089   ;        EFM8_JDY40_test.c:271: void sendstr1 (char * s)
0228           1090   ;        -----------------------------------------
0228           1091   ;         function sendstr1
0228           1092   ;        -----------------------------------------
0228           1093   _sendstr1:
0228 AA82      1094            mov     r2,dpl
022A AB83      1095            mov     r3,dph
022C ACF0      1096            mov     r4,b
022E           1097   ;        EFM8_JDY40_test.c:273: while(*s)
022E           1098   L015001?:
022E 8A82      1099            mov     dpl,r2
0230 8B83      1100            mov     dph,r3
0232 8CF0      1101            mov     b,r4
0234 120000    1102            lcall   __gptrget
0237 FD        1103            mov     r5,a
0238 6000      1104            jz      L015004?
023A           1105   ;        EFM8_JDY40_test.c:275: putchar1(*s);
023A 8D82      1106            mov     dpl,r5
023C C002      1107            push    ar2
023E C003      1108            push    ar3
0240 C004      1109            push    ar4
0242 120000    1110            lcall   _putchar1
0245 D004      1111            pop     ar4
0247 D003      1112            pop     ar3
0249 D002      1113            pop     ar2
024B           1114   ;        EFM8_JDY40_test.c:276: s++;     
024B 0A        1115            inc     r2
024C BA0028    1116            cjne    r2,#0x00,L015001?
024F 0B        1117            inc     r3
0250 8000      1118            sjmp    L015001?
0252           1119   L015004?:
0252 22        1120            ret
0253           1121   ;------------------------------------------------------------
0253           1122   ;Allocation info for local variables in function 'getchar1'
0253           1123   ;------------------------------------------------------------
0253           1124   ;c                         Allocated to registers 
0253           1125   ;------------------------------------------------------------
0253           1126   ;        EFM8_JDY40_test.c:280: char getchar1 (void)
0253           1127   ;        -----------------------------------------
0253           1128   ;         function getchar1
0253           1129   ;        -----------------------------------------
0253           1130   _getchar1:
0253           1131   ;        EFM8_JDY40_test.c:283: SFRPAGE = 0x20;
0253 75A720    1132            mov     _SFRPAGE,#0x20
0256           1133   ;        EFM8_JDY40_test.c:284: while (!RI1);
0256           1134   L016001?:
0256           1135   ;        EFM8_JDY40_test.c:285: RI1=0;
0256 10C828    1136            jbc     _RI1,L016008?
0259 8000      1137            sjmp    L016001?
025B           1138   L016008?:
025B           1139   ;        EFM8_JDY40_test.c:287: SCON1&=0b_0011_1111;
025B 53C83F    1140            anl     _SCON1,#0x3F
025E           1141   ;        EFM8_JDY40_test.c:288: c = SBUF1;
025E 859282    1142            mov     dpl,_SBUF1
0261           1143   ;        EFM8_JDY40_test.c:289: SFRPAGE = 0x00;
0261 75A700    1144            mov     _SFRPAGE,#0x00
0264           1145   ;        EFM8_JDY40_test.c:290: return (c);
0264 22        1146            ret
0265           1147   ;------------------------------------------------------------
0265           1148   ;Allocation info for local variables in function 'getchar1_with_timeout'
0265           1149   ;------------------------------------------------------------
0265           1150   ;c                         Allocated to registers 
0265           1151   ;timeout                   Allocated to registers r2 r3 
0265           1152   ;------------------------------------------------------------
0265           1153   ;        EFM8_JDY40_test.c:293: char getchar1_with_timeout (void)
0265           1154   ;        -----------------------------------------
0265           1155   ;         function getchar1_with_timeout
0265           1156   ;        -----------------------------------------
0265           1157   _getchar1_with_timeout:
0265           1158   ;        EFM8_JDY40_test.c:297: SFRPAGE = 0x20;
0265 75A720    1159            mov     _SFRPAGE,#0x20
0268           1160   ;        EFM8_JDY40_test.c:299: while (!RI1)
0268 7A00      1161            mov     r2,#0x00
026A 7B00      1162            mov     r3,#0x00
026C           1163   L017003?:
026C 20C8A8    1164            jb      _RI1,L017005?
026F           1165   ;        EFM8_JDY40_test.c:301: SFRPAGE = 0x00;
026F 75A700    1166            mov     _SFRPAGE,#0x00
0272           1167   ;        EFM8_JDY40_test.c:302: Timer3us(20);
0272 758214    1168            mov     dpl,#0x14
0275 C002      1169            push    ar2
0277 C003      1170            push    ar3
0279 120000    1171            lcall   _Timer3us
027C D003      1172            pop     ar3
027E D002      1173            pop     ar2
0280           1174   ;        EFM8_JDY40_test.c:303: SFRPAGE = 0x20;
0280 75A720    1175            mov     _SFRPAGE,#0x20
0283           1176   ;        EFM8_JDY40_test.c:304: timeout++;
0283 0A        1177            inc     r2
0284 BA00E8    1178            cjne    r2,#0x00,L017012?
0287 0B        1179            inc     r3
0288           1180   L017012?:
0288           1181   ;        EFM8_JDY40_test.c:305: if(timeout==25000)
0288 BAA868    1182            cjne    r2,#0xA8,L017003?
028B BB6168    1183            cjne    r3,#0x61,L017003?
028E           1184   ;        EFM8_JDY40_test.c:307: SFRPAGE = 0x00;
028E 75A700    1185            mov     _SFRPAGE,#0x00
0291           1186   ;        EFM8_JDY40_test.c:308: return ('\n'); // Timeout after half second
0291 75820A    1187            mov     dpl,#0x0A
0294 22        1188            ret
0295           1189   L017005?:
0295           1190   ;        EFM8_JDY40_test.c:311: RI1=0;
0295 C2C8      1191            clr     _RI1
0297           1192   ;        EFM8_JDY40_test.c:313: SCON1&=0b_0011_1111;
0297 53C83F    1193            anl     _SCON1,#0x3F
029A           1194   ;        EFM8_JDY40_test.c:314: c = SBUF1;
029A 859282    1195            mov     dpl,_SBUF1
029D           1196   ;        EFM8_JDY40_test.c:315: SFRPAGE = 0x00;
029D 75A700    1197            mov     _SFRPAGE,#0x00
02A0           1198   ;        EFM8_JDY40_test.c:316: return (c);
02A0 22        1199            ret
02A1           1200   ;------------------------------------------------------------
02A1           1201   ;Allocation info for local variables in function 'getstr1'
02A1           1202   ;------------------------------------------------------------
02A1           1203   ;s                         Allocated to registers r2 r3 r4 
02A1           1204   ;c                         Allocated to registers r5 
02A1           1205   ;------------------------------------------------------------
02A1           1206   ;        EFM8_JDY40_test.c:319: void getstr1 (char * s)
02A1           1207   ;        -----------------------------------------
02A1           1208   ;         function getstr1
02A1           1209   ;        -----------------------------------------
02A1           1210   _getstr1:
02A1 AA82      1211            mov     r2,dpl
02A3 AB83      1212            mov     r3,dph
02A5 ACF0      1213            mov     r4,b
02A7           1214   ;        EFM8_JDY40_test.c:323: while(1)
02A7           1215   L018004?:
02A7           1216   ;        EFM8_JDY40_test.c:325: c=getchar1_with_timeout();
02A7 C002      1217            push    ar2
02A9 C003      1218            push    ar3
02AB C004      1219            push    ar4
02AD 120000    1220            lcall   _getchar1_with_timeout
02B0 AD82      1221            mov     r5,dpl
02B2 D004      1222            pop     ar4
02B4 D003      1223            pop     ar3
02B6 D002      1224            pop     ar2
02B8           1225   ;        EFM8_JDY40_test.c:326: if(c=='\n')
02B8 BD0A68    1226            cjne    r5,#0x0A,L018002?
02BB           1227   ;        EFM8_JDY40_test.c:328: *s=0;
02BB 8A82      1228            mov     dpl,r2
02BD 8B83      1229            mov     dph,r3
02BF 8CF0      1230            mov     b,r4
02C1 E4        1231            clr     a
02C2           1232   ;        EFM8_JDY40_test.c:329: return;
02C2 020000    1233            ljmp    __gptrput
02C5           1234   L018002?:
02C5           1235   ;        EFM8_JDY40_test.c:331: *s=c;
02C5 8A82      1236            mov     dpl,r2
02C7 8B83      1237            mov     dph,r3
02C9 8CF0      1238            mov     b,r4
02CB ED        1239            mov     a,r5
02CC 120000    1240            lcall   __gptrput
02CF A3        1241            inc     dptr
02D0 AA82      1242            mov     r2,dpl
02D2 AB83      1243            mov     r3,dph
02D4           1244   ;        EFM8_JDY40_test.c:332: s++;
02D4 8000      1245            sjmp    L018004?
02D6           1246   ;------------------------------------------------------------
02D6           1247   ;Allocation info for local variables in function 'RXU1'
02D6           1248   ;------------------------------------------------------------
02D6           1249   ;------------------------------------------------------------
02D6           1250   ;        EFM8_JDY40_test.c:337: bit RXU1 (void)
02D6           1251   ;        -----------------------------------------
02D6           1252   ;         function RXU1
02D6           1253   ;        -----------------------------------------
02D6           1254   _RXU1:
02D6           1255   ;        EFM8_JDY40_test.c:340: SFRPAGE = 0x20;
02D6 75A720    1256            mov     _SFRPAGE,#0x20
02D9           1257   ;        EFM8_JDY40_test.c:341: mybit=RI1;
02D9 A2C8      1258            mov     c,_RI1
02DB           1259   ;        EFM8_JDY40_test.c:342: SFRPAGE = 0x00;
02DB 75A700    1260            mov     _SFRPAGE,#0x00
02DE           1261   ;        EFM8_JDY40_test.c:343: return mybit;
02DE 22        1262            ret
02DF           1263   ;------------------------------------------------------------
02DF           1264   ;Allocation info for local variables in function 'waitms_or_RI1'
02DF           1265   ;------------------------------------------------------------
02DF           1266   ;ms                        Allocated to registers r2 r3 
02DF           1267   ;j                         Allocated to registers r4 r5 
02DF           1268   ;k                         Allocated to registers r6 
02DF           1269   ;------------------------------------------------------------
02DF           1270   ;        EFM8_JDY40_test.c:346: void waitms_or_RI1 (unsigned int ms)
02DF           1271   ;        -----------------------------------------
02DF           1272   ;         function waitms_or_RI1
02DF           1273   ;        -----------------------------------------
02DF           1274   _waitms_or_RI1:
02DF AA82      1275            mov     r2,dpl
02E1 AB83      1276            mov     r3,dph
02E3           1277   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
02E3 7C00      1278            mov     r4,#0x00
02E5 7D00      1279            mov     r5,#0x00
02E7           1280   L020007?:
02E7 C3        1281            clr     c
02E8 EC        1282            mov     a,r4
02E9 9A        1283            subb    a,r2
02EA ED        1284            mov     a,r5
02EB 9B        1285            subb    a,r3
02EC 5000      1286            jnc     L020011?
02EE           1287   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
02EE 7E00      1288            mov     r6,#0x00
02F0           1289   L020003?:
02F0 BE04A8    1290            cjne    r6,#0x04,L020019?
02F3           1291   L020019?:
02F3 5000      1292            jnc     L020009?
02F5           1293   ;        EFM8_JDY40_test.c:354: if(RXU1()) return;
02F5 C002      1294            push    ar2
02F7 C003      1295            push    ar3
02F9 C004      1296            push    ar4
02FB C005      1297            push    ar5
02FD C006      1298            push    ar6
02FF 120000    1299            lcall   _RXU1
0302 E4        1300            clr     a
0303 33        1301            rlc     a
0304 D006      1302            pop     ar6
0306 D005      1303            pop     ar5
0308 D004      1304            pop     ar4
030A D003      1305            pop     ar3
030C D002      1306            pop     ar2
030E 6000      1307            jz      L020002?
0310 22        1308            ret
0311           1309   L020002?:
0311           1310   ;        EFM8_JDY40_test.c:355: Timer3us(250);
0311 7582FA    1311            mov     dpl,#0xFA
0314 C002      1312            push    ar2
0316 C003      1313            push    ar3
0318 C004      1314            push    ar4
031A C005      1315            push    ar5
031C C006      1316            push    ar6
031E 120000    1317            lcall   _Timer3us
0321 D006      1318            pop     ar6
0323 D005      1319            pop     ar5
0325 D004      1320            pop     ar4
0327 D003      1321            pop     ar3
0329 D002      1322            pop     ar2
032B           1323   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
032B 0E        1324            inc     r6
032C 8000      1325            sjmp    L020003?
032E           1326   L020009?:
032E           1327   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
032E 0C        1328            inc     r4
032F BC00E8    1329            cjne    r4,#0x00,L020007?
0332 0D        1330            inc     r5
0333 8000      1331            sjmp    L020007?
0335           1332   L020011?:
0335 22        1333            ret
0336           1334   ;------------------------------------------------------------
0336           1335   ;Allocation info for local variables in function 'SendATCommand'
0336           1336   ;------------------------------------------------------------
0336           1337   ;s                         Allocated to registers r2 r3 r4 
0336           1338   ;------------------------------------------------------------
0336           1339   ;        EFM8_JDY40_test.c:360: void SendATCommand (char * s)
0336           1340   ;        -----------------------------------------
0336           1341   ;         function SendATCommand
0336           1342   ;        -----------------------------------------
0336           1343   _SendATCommand:
0336 AA82      1344            mov     r2,dpl
0338 AB83      1345            mov     r3,dph
033A ACF0      1346            mov     r4,b
033C           1347   ;        EFM8_JDY40_test.c:362: printf("Command: %s", s);
033C C002      1348            push    ar2
033E C003      1349            push    ar3
0340 C004      1350            push    ar4
0342 C002      1351            push    ar2
0344 C003      1352            push    ar3
0346 C004      1353            push    ar4
0348 7468      1354            mov     a,#__str_0
034A C0E0      1355            push    acc
034C 74C4      1356            mov     a,#(__str_0 >> 8)
034E C0E0      1357            push    acc
0350 7480      1358            mov     a,#0x80
0352 C0E0      1359            push    acc
0354 120000    1360            lcall   _printf
0357 E581      1361            mov     a,sp
0359 24FA      1362            add     a,#0xfa
035B F581      1363            mov     sp,a
035D           1364   ;        EFM8_JDY40_test.c:363: P3_0=0; // 'set' pin to 0 is 'AT' mode.
035D C2B0      1365            clr     _P3_0
035F           1366   ;        EFM8_JDY40_test.c:364: waitms(5);
035F 900005    1367            mov     dptr,#0x0005
0362 120000    1368            lcall   _waitms
0365 D004      1369            pop     ar4
0367 D003      1370            pop     ar3
0369 D002      1371            pop     ar2
036B           1372   ;        EFM8_JDY40_test.c:365: sendstr1(s);
036B 8A82      1373            mov     dpl,r2
036D 8B83      1374            mov     dph,r3
036F 8CF0      1375            mov     b,r4
0371 120000    1376            lcall   _sendstr1
0374           1377   ;        EFM8_JDY40_test.c:366: getstr1(buff);
0374 9018D0    1378            mov     dptr,#_buff
0377 75F040    1379            mov     b,#0x40
037A 120000    1380            lcall   _getstr1
037D           1381   ;        EFM8_JDY40_test.c:367: waitms(10);
037D 90000A    1382            mov     dptr,#0x000A
0380 120000    1383            lcall   _waitms
0383           1384   ;        EFM8_JDY40_test.c:368: P3_0=1; // 'set' pin to 1 is normal operation mode.
0383 D2B0      1385            setb    _P3_0
0385           1386   ;        EFM8_JDY40_test.c:369: printf("Response: %s\r\n", buff);
0385 74D0      1387            mov     a,#_buff
0387 C0E0      1388            push    acc
0389 7418      1389            mov     a,#(_buff >> 8)
038B C0E0      1390            push    acc
038D 7440      1391            mov     a,#0x40
038F C0E0      1392            push    acc
0391 74E8      1393            mov     a,#__str_1
0393 C0E0      1394            push    acc
0395 74C4      1395            mov     a,#(__str_1 >> 8)
0397 C0E0      1396            push    acc
0399 7480      1397            mov     a,#0x80
039B C0E0      1398            push    acc
039D 120000    1399            lcall   _printf
03A0 E581      1400            mov     a,sp
03A2 24FA      1401            add     a,#0xfa
03A4 F581      1402            mov     sp,a
03A6 22        1403            ret
03A7           1404   ;------------------------------------------------------------
03A7           1405   ;Allocation info for local variables in function 'LCD_pulse'
03A7           1406   ;------------------------------------------------------------
03A7           1407   ;------------------------------------------------------------
03A7           1408   ;        EFM8_JDY40_test.c:374: void LCD_pulse (void)
03A7           1409   ;        -----------------------------------------
03A7           1410   ;         function LCD_pulse
03A7           1411   ;        -----------------------------------------
03A7           1412   _LCD_pulse:
03A7           1413   ;        EFM8_JDY40_test.c:376: LCD_E=1;
03A7 D2A0      1414            setb    _P2_0
03A9           1415   ;        EFM8_JDY40_test.c:377: Timer3us(40);
03A9 758228    1416            mov     dpl,#0x28
03AC 120000    1417            lcall   _Timer3us
03AF           1418   ;        EFM8_JDY40_test.c:378: LCD_E=0;
03AF C2A0      1419            clr     _P2_0
03B1 22        1420            ret
03B2           1421   ;------------------------------------------------------------
03B2           1422   ;Allocation info for local variables in function 'LCD_byte'
03B2           1423   ;------------------------------------------------------------
03B2           1424   ;x                         Allocated to registers r2 
03B2           1425   ;------------------------------------------------------------
03B2           1426   ;        EFM8_JDY40_test.c:381: void LCD_byte (unsigned char x)
03B2           1427   ;        -----------------------------------------
03B2           1428   ;         function LCD_byte
03B2           1429   ;        -----------------------------------------
03B2           1430   _LCD_byte:
03B2 AA82      1431            mov     r2,dpl
03B4           1432   ;        EFM8_JDY40_test.c:384: ACC=x; //Send high nible
03B4 8AE0      1433            mov     _ACC,r2
03B6           1434   ;        EFM8_JDY40_test.c:385: LCD_D7=ACC_7;
03B6 A2E7      1435            mov     c,_ACC_7
03B8 9290      1436            mov     _P1_0,c
03BA           1437   ;        EFM8_JDY40_test.c:386: LCD_D6=ACC_6;
03BA A2E6      1438            mov     c,_ACC_6
03BC 9291      1439            mov     _P1_1,c
03BE           1440   ;        EFM8_JDY40_test.c:387: LCD_D5=ACC_5;
03BE A2E5      1441            mov     c,_ACC_5
03C0 9292      1442            mov     _P1_2,c
03C2           1443   ;        EFM8_JDY40_test.c:388: LCD_D4=ACC_4;
03C2 A2E4      1444            mov     c,_ACC_4
03C4 9293      1445            mov     _P1_3,c
03C6           1446   ;        EFM8_JDY40_test.c:389: LCD_pulse();
03C6 C002      1447            push    ar2
03C8 120000    1448            lcall   _LCD_pulse
03CB           1449   ;        EFM8_JDY40_test.c:390: Timer3us(40);
03CB 758228    1450            mov     dpl,#0x28
03CE 120000    1451            lcall   _Timer3us
03D1 D002      1452            pop     ar2
03D3           1453   ;        EFM8_JDY40_test.c:391: ACC=x; //Send low nible
03D3 8AE0      1454            mov     _ACC,r2
03D5           1455   ;        EFM8_JDY40_test.c:392: LCD_D7=ACC_3;
03D5 A2E3      1456            mov     c,_ACC_3
03D7 9290      1457            mov     _P1_0,c
03D9           1458   ;        EFM8_JDY40_test.c:393: LCD_D6=ACC_2;
03D9 A2E2      1459            mov     c,_ACC_2
03DB 9291      1460            mov     _P1_1,c
03DD           1461   ;        EFM8_JDY40_test.c:394: LCD_D5=ACC_1;
03DD A2E1      1462            mov     c,_ACC_1
03DF 9292      1463            mov     _P1_2,c
03E1           1464   ;        EFM8_JDY40_test.c:395: LCD_D4=ACC_0;
03E1 A2E0      1465            mov     c,_ACC_0
03E3 9293      1466            mov     _P1_3,c
03E5           1467   ;        EFM8_JDY40_test.c:396: LCD_pulse();
03E5 020000    1468            ljmp    _LCD_pulse
03E8           1469   ;------------------------------------------------------------
03E8           1470   ;Allocation info for local variables in function 'WriteData'
03E8           1471   ;------------------------------------------------------------
03E8           1472   ;x                         Allocated to registers r2 
03E8           1473   ;------------------------------------------------------------
03E8           1474   ;        EFM8_JDY40_test.c:399: void WriteData (unsigned char x)
03E8           1475   ;        -----------------------------------------
03E8           1476   ;         function WriteData
03E8           1477   ;        -----------------------------------------
03E8           1478   _WriteData:
03E8 AA82      1479            mov     r2,dpl
03EA           1480   ;        EFM8_JDY40_test.c:401: LCD_RS=1;
03EA D297      1481            setb    _P1_7
03EC           1482   ;        EFM8_JDY40_test.c:402: LCD_byte(x);
03EC 8A82      1483            mov     dpl,r2
03EE 120000    1484            lcall   _LCD_byte
03F1           1485   ;        EFM8_JDY40_test.c:403: waitms(2);
03F1 900002    1486            mov     dptr,#0x0002
03F4 020000    1487            ljmp    _waitms
03F7           1488   ;------------------------------------------------------------
03F7           1489   ;Allocation info for local variables in function 'WriteCommand'
03F7           1490   ;------------------------------------------------------------
03F7           1491   ;x                         Allocated to registers r2 
03F7           1492   ;------------------------------------------------------------
03F7           1493   ;        EFM8_JDY40_test.c:406: void WriteCommand (unsigned char x)
03F7           1494   ;        -----------------------------------------
03F7           1495   ;         function WriteCommand
03F7           1496   ;        -----------------------------------------
03F7           1497   _WriteCommand:
03F7 AA82      1498            mov     r2,dpl
03F9           1499   ;        EFM8_JDY40_test.c:408: LCD_RS=0;
03F9 C297      1500            clr     _P1_7
03FB           1501   ;        EFM8_JDY40_test.c:409: LCD_byte(x);
03FB 8A82      1502            mov     dpl,r2
03FD 120000    1503            lcall   _LCD_byte
0400           1504   ;        EFM8_JDY40_test.c:410: waitms(5);
0400 900005    1505            mov     dptr,#0x0005
0403 020000    1506            ljmp    _waitms
0406           1507   ;------------------------------------------------------------
0406           1508   ;Allocation info for local variables in function 'LCD_4BIT'
0406           1509   ;------------------------------------------------------------
0406           1510   ;------------------------------------------------------------
0406           1511   ;        EFM8_JDY40_test.c:413: void LCD_4BIT (void)
0406           1512   ;        -----------------------------------------
0406           1513   ;         function LCD_4BIT
0406           1514   ;        -----------------------------------------
0406           1515   _LCD_4BIT:
0406           1516   ;        EFM8_JDY40_test.c:415: LCD_E=0; // Resting state of LCD's enable is zero
0406 C2A0      1517            clr     _P2_0
0408           1518   ;        EFM8_JDY40_test.c:417: waitms(20);
0408 900014    1519            mov     dptr,#0x0014
040B 120000    1520            lcall   _waitms
040E           1521   ;        EFM8_JDY40_test.c:419: WriteCommand(0x33);
040E 758233    1522            mov     dpl,#0x33
0411 120000    1523            lcall   _WriteCommand
0414           1524   ;        EFM8_JDY40_test.c:420: WriteCommand(0x33);
0414 758233    1525            mov     dpl,#0x33
0417 120000    1526            lcall   _WriteCommand
041A           1527   ;        EFM8_JDY40_test.c:421: WriteCommand(0x32); // Change to 4-bit mode
041A 758232    1528            mov     dpl,#0x32
041D 120000    1529            lcall   _WriteCommand
0420           1530   ;        EFM8_JDY40_test.c:424: WriteCommand(0x28);
0420 758228    1531            mov     dpl,#0x28
0423 120000    1532            lcall   _WriteCommand
0426           1533   ;        EFM8_JDY40_test.c:425: WriteCommand(0x0c);
0426 75820C    1534            mov     dpl,#0x0C
0429 120000    1535            lcall   _WriteCommand
042C           1536   ;        EFM8_JDY40_test.c:426: WriteCommand(0x01); // Clear screen command (takes some time)
042C 758201    1537            mov     dpl,#0x01
042F 120000    1538            lcall   _WriteCommand
0432           1539   ;        EFM8_JDY40_test.c:427: waitms(20); // Wait for clear screen command to finsih.
0432 900014    1540            mov     dptr,#0x0014
0435 020000    1541            ljmp    _waitms
0438           1542   ;------------------------------------------------------------
0438           1543   ;Allocation info for local variables in function 'LCDprint'
0438           1544   ;------------------------------------------------------------
0438           1545   ;line                      Allocated with name '_LCDprint_PARM_2'
0438           1546   ;string                    Allocated to registers r2 r3 r4 
0438           1547   ;j                         Allocated to registers r5 r6 
0438           1548   ;------------------------------------------------------------
0438           1549   ;        EFM8_JDY40_test.c:430: void LCDprint(char * string, unsigned char line, bit clear)
0438           1550   ;        -----------------------------------------
0438           1551   ;         function LCDprint
0438           1552   ;        -----------------------------------------
0438           1553   _LCDprint:
0438 AA82      1554            mov     r2,dpl
043A AB83      1555            mov     r3,dph
043C ACF0      1556            mov     r4,b
043E           1557   ;        EFM8_JDY40_test.c:434: WriteCommand(line==2?0xc0:0x80);
043E 7402      1558            mov     a,#0x02
0440 B52028    1559            cjne    a,_LCDprint_PARM_2,L027013?
0443 7DC0      1560            mov     r5,#0xC0
0445 8000      1561            sjmp    L027014?
0447           1562   L027013?:
0447 7D80      1563            mov     r5,#0x80
0449           1564   L027014?:
0449 8D82      1565            mov     dpl,r5
044B C002      1566            push    ar2
044D C003      1567            push    ar3
044F C004      1568            push    ar4
0451 120000    1569            lcall   _WriteCommand
0454           1570   ;        EFM8_JDY40_test.c:435: waitms(5);
0454 900005    1571            mov     dptr,#0x0005
0457 120000    1572            lcall   _waitms
045A D004      1573            pop     ar4
045C D003      1574            pop     ar3
045E D002      1575            pop     ar2
0460           1576   ;        EFM8_JDY40_test.c:436: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
0460 7D00      1577            mov     r5,#0x00
0462 7E00      1578            mov     r6,#0x00
0464           1579   L027003?:
0464 ED        1580            mov     a,r5
0465 2A        1581            add     a,r2
0466 FF        1582            mov     r7,a
0467 EE        1583            mov     a,r6
0468 3B        1584            addc    a,r3
0469 F8        1585            mov     r0,a
046A 8C01      1586            mov     ar1,r4
046C 8F82      1587            mov     dpl,r7
046E 8883      1588            mov     dph,r0
0470 89F0      1589            mov     b,r1
0472 120000    1590            lcall   __gptrget
0475 FF        1591            mov     r7,a
0476 6000      1592            jz      L027006?
0478 8F82      1593            mov     dpl,r7
047A C002      1594            push    ar2
047C C003      1595            push    ar3
047E C004      1596            push    ar4
0480 C005      1597            push    ar5
0482 C006      1598            push    ar6
0484 120000    1599            lcall   _WriteData
0487 D006      1600            pop     ar6
0489 D005      1601            pop     ar5
048B D004      1602            pop     ar4
048D D003      1603            pop     ar3
048F D002      1604            pop     ar2
0491 0D        1605            inc     r5
0492 BD00A8    1606            cjne    r5,#0x00,L027003?
0495 0E        1607            inc     r6
0496 8000      1608            sjmp    L027003?
0498           1609   L027006?:
0498           1610   ;        EFM8_JDY40_test.c:437: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0498 309028    1611            jnb     _LCDprint_PARM_3,L027011?
049B 8D02      1612            mov     ar2,r5
049D 8E03      1613            mov     ar3,r6
049F           1614   L027007?:
049F C3        1615            clr     c
04A0 EA        1616            mov     a,r2
04A1 9410      1617            subb    a,#0x10
04A3 EB        1618            mov     a,r3
04A4 6480      1619            xrl     a,#0x80
04A6 9480      1620            subb    a,#0x80
04A8 5000      1621            jnc     L027011?
04AA 758220    1622            mov     dpl,#0x20
04AD C002      1623            push    ar2
04AF C003      1624            push    ar3
04B1 120000    1625            lcall   _WriteData
04B4 D003      1626            pop     ar3
04B6 D002      1627            pop     ar2
04B8 0A        1628            inc     r2
04B9 BA0068    1629            cjne    r2,#0x00,L027007?
04BC 0B        1630            inc     r3
04BD 8000      1631            sjmp    L027007?
04BF           1632   L027011?:
04BF 22        1633            ret
04C0           1634   ;------------------------------------------------------------
04C0           1635   ;Allocation info for local variables in function 'main'
04C0           1636   ;------------------------------------------------------------
04C0           1637   ;cnt                       Allocated to registers 
04C0           1638   ;timeout_cnt               Allocated to registers r2 r3 
04C0           1639   ;f                         Allocated to registers r2 r3 r4 r5 
04C0           1640   ;volt_x                    Allocated to registers r2 r3 
04C0           1641   ;volt_y                    Allocated to registers r4 r5 
04C0           1642   ;------------------------------------------------------------
04C0           1643   ;        EFM8_JDY40_test.c:440: void main (void)
04C0           1644   ;        -----------------------------------------
04C0           1645   ;         function main
04C0           1646   ;        -----------------------------------------
04C0           1647   _main:
04C0           1648   ;        EFM8_JDY40_test.c:454: InitADC();
04C0 120000    1649            lcall   _InitADC
04C3           1650   ;        EFM8_JDY40_test.c:455: waitms(500);
04C3 9001F4    1651            mov     dptr,#0x01F4
04C6 120000    1652            lcall   _waitms
04C9           1653   ;        EFM8_JDY40_test.c:456: printf("\r\nJDY-40 test\r\n");
04C9 74A8      1654            mov     a,#__str_2
04CB C0E0      1655            push    acc
04CD 74C6      1656            mov     a,#(__str_2 >> 8)
04CF C0E0      1657            push    acc
04D1 7480      1658            mov     a,#0x80
04D3 C0E0      1659            push    acc
04D5 120000    1660            lcall   _printf
04D8 1581      1661            dec     sp
04DA 1581      1662            dec     sp
04DC 1581      1663            dec     sp
04DE           1664   ;        EFM8_JDY40_test.c:457: UART1_Init(9600);
04DE 902580    1665            mov     dptr,#0x2580
04E1 E4        1666            clr     a
04E2 F5F0      1667            mov     b,a
04E4 120000    1668            lcall   _UART1_Init
04E7           1669   ;        EFM8_JDY40_test.c:458: InitPinADC(1,4); //for x remote
04E7 756004    1670            mov     _InitPinADC_PARM_2,#0x04
04EA 758201    1671            mov     dpl,#0x01
04ED 120000    1672            lcall   _InitPinADC
04F0           1673   ;        EFM8_JDY40_test.c:459: InitPinADC(1,5); //for y remote
04F0 756005    1674            mov     _InitPinADC_PARM_2,#0x05
04F3 758201    1675            mov     dpl,#0x01
04F6 120000    1676            lcall   _InitPinADC
04F9           1677   ;        EFM8_JDY40_test.c:482: SendATCommand("AT+DVID9944\r\n"); 
04F9 90C6E8    1678            mov     dptr,#__str_3
04FC 75F080    1679            mov     b,#0x80
04FF 120000    1680            lcall   _SendATCommand
0502           1681   ;        EFM8_JDY40_test.c:483: SendATCommand("AT+RFID2576\r\n");
0502 90C728    1682            mov     dptr,#__str_4
0505 75F080    1683            mov     b,#0x80
0508 120000    1684            lcall   _SendATCommand
050B           1685   ;        EFM8_JDY40_test.c:487: SendATCommand("AT+VER\r\n");
050B 90C768    1686            mov     dptr,#__str_5
050E 75F080    1687            mov     b,#0x80
0511 120000    1688            lcall   _SendATCommand
0514           1689   ;        EFM8_JDY40_test.c:488: SendATCommand("AT+BAUD\r\n");
0514 90C7A8    1690            mov     dptr,#__str_6
0517 75F080    1691            mov     b,#0x80
051A 120000    1692            lcall   _SendATCommand
051D           1693   ;        EFM8_JDY40_test.c:489: SendATCommand("AT+RFID\r\n");
051D 90C7E8    1694            mov     dptr,#__str_7
0520 75F080    1695            mov     b,#0x80
0523 120000    1696            lcall   _SendATCommand
0526           1697   ;        EFM8_JDY40_test.c:490: SendATCommand("AT+DVID\r\n");
0526 90C828    1698            mov     dptr,#__str_8
0529 75F080    1699            mov     b,#0x80
052C 120000    1700            lcall   _SendATCommand
052F           1701   ;        EFM8_JDY40_test.c:491: SendATCommand("AT+RFC\r\n");
052F 90C868    1702            mov     dptr,#__str_9
0532 75F080    1703            mov     b,#0x80
0535 120000    1704            lcall   _SendATCommand
0538           1705   ;        EFM8_JDY40_test.c:492: SendATCommand("AT+POWE\r\n");
0538 90C8A8    1706            mov     dptr,#__str_10
053B 75F080    1707            mov     b,#0x80
053E 120000    1708            lcall   _SendATCommand
0541           1709   ;        EFM8_JDY40_test.c:493: SendATCommand("AT+CLSS\r\n");
0541 90C8E8    1710            mov     dptr,#__str_11
0544 75F080    1711            mov     b,#0x80
0547 120000    1712            lcall   _SendATCommand
054A           1713   ;        EFM8_JDY40_test.c:495: printf("\r\nPress and hold the BOOT button to transmit.\r\n");
054A 7428      1714            mov     a,#__str_12
054C C0E0      1715            push    acc
054E 74C9      1716            mov     a,#(__str_12 >> 8)
0550 C0E0      1717            push    acc
0552 7480      1718            mov     a,#0x80
0554 C0E0      1719            push    acc
0556 120000    1720            lcall   _printf
0559 1581      1721            dec     sp
055B 1581      1722            dec     sp
055D 1581      1723            dec     sp
055F           1724   ;        EFM8_JDY40_test.c:499: while(1)
055F           1725   L028013?:
055F           1726   ;        EFM8_JDY40_test.c:502: putchar1('M');
055F 75824D    1727            mov     dpl,#0x4D
0562 120000    1728            lcall   _putchar1
0565           1729   ;        EFM8_JDY40_test.c:503: waitms(5); //wait for 10 ms for robot to get attention message
0565 900005    1730            mov     dptr,#0x0005
0568 120000    1731            lcall   _waitms
056B           1732   ;        EFM8_JDY40_test.c:505: volt_x = 100*(Volts_at_Pin(QFP32_MUX_P1_4));
056B 75820A    1733            mov     dpl,#0x0A
056E 120000    1734            lcall   _Volts_at_Pin
0571 AA82      1735            mov     r2,dpl
0573 AB83      1736            mov     r3,dph
0575 ACF0      1737            mov     r4,b
0577 FD        1738            mov     r5,a
0578 C002      1739            push    ar2
057A C003      1740            push    ar3
057C C004      1741            push    ar4
057E C005      1742            push    ar5
0580 900000    1743            mov     dptr,#0x0000
0583 75F0C8    1744            mov     b,#0xC8
0586 7442      1745            mov     a,#0x42
0588 120000    1746            lcall   ___fsmul
058B AA82      1747            mov     r2,dpl
058D AB83      1748            mov     r3,dph
058F ACF0      1749            mov     r4,b
0591 FD        1750            mov     r5,a
0592 E581      1751            mov     a,sp
0594 24FC      1752            add     a,#0xfc
0596 F581      1753            mov     sp,a
0598 8A82      1754            mov     dpl,r2
059A 8B83      1755            mov     dph,r3
059C 8CF0      1756            mov     b,r4
059E ED        1757            mov     a,r5
059F 120000    1758            lcall   ___fs2sint
05A2 AA82      1759            mov     r2,dpl
05A4 AB83      1760            mov     r3,dph
05A6           1761   ;        EFM8_JDY40_test.c:506: volt_y = 100*(Volts_at_Pin(QFP32_MUX_P1_5));
05A6 75820B    1762            mov     dpl,#0x0B
05A9 C002      1763            push    ar2
05AB C003      1764            push    ar3
05AD 120000    1765            lcall   _Volts_at_Pin
05B0 AC82      1766            mov     r4,dpl
05B2 AD83      1767            mov     r5,dph
05B4 AEF0      1768            mov     r6,b
05B6 FF        1769            mov     r7,a
05B7 C004      1770            push    ar4
05B9 C005      1771            push    ar5
05BB C006      1772            push    ar6
05BD C007      1773            push    ar7
05BF 900000    1774            mov     dptr,#0x0000
05C2 75F0C8    1775            mov     b,#0xC8
05C5 7442      1776            mov     a,#0x42
05C7 120000    1777            lcall   ___fsmul
05CA AC82      1778            mov     r4,dpl
05CC AD83      1779            mov     r5,dph
05CE AEF0      1780            mov     r6,b
05D0 FF        1781            mov     r7,a
05D1 E581      1782            mov     a,sp
05D3 24FC      1783            add     a,#0xfc
05D5 F581      1784            mov     sp,a
05D7 8C82      1785            mov     dpl,r4
05D9 8D83      1786            mov     dph,r5
05DB 8EF0      1787            mov     b,r6
05DD EF        1788            mov     a,r7
05DE 120000    1789            lcall   ___fs2sint
05E1 AC82      1790            mov     r4,dpl
05E3 AD83      1791            mov     r5,dph
05E5 D003      1792            pop     ar3
05E7 D002      1793            pop     ar2
05E9           1794   ;        EFM8_JDY40_test.c:512: sprintf(buff, "%03d|%03d\r\n", volt_x, volt_y); // make sure that each data point is 3 digits
05E9 C004      1795            push    ar4
05EB C005      1796            push    ar5
05ED C002      1797            push    ar2
05EF C003      1798            push    ar3
05F1 74E8      1799            mov     a,#__str_13
05F3 C0E0      1800            push    acc
05F5 74C9      1801            mov     a,#(__str_13 >> 8)
05F7 C0E0      1802            push    acc
05F9 7480      1803            mov     a,#0x80
05FB C0E0      1804            push    acc
05FD 74D0      1805            mov     a,#_buff
05FF C0E0      1806            push    acc
0601 7418      1807            mov     a,#(_buff >> 8)
0603 C0E0      1808            push    acc
0605 7440      1809            mov     a,#0x40
0607 C0E0      1810            push    acc
0609 120000    1811            lcall   _sprintf
060C E581      1812            mov     a,sp
060E 24F6      1813            add     a,#0xf6
0610 F581      1814            mov     sp,a
0612           1815   ;        EFM8_JDY40_test.c:514: sendstr1(buff);
0612 9018D0    1816            mov     dptr,#_buff
0615 75F040    1817            mov     b,#0x40
0618 120000    1818            lcall   _sendstr1
061B           1819   ;        EFM8_JDY40_test.c:519: while(1)
061B 7A00      1820            mov     r2,#0x00
061D 7B00      1821            mov     r3,#0x00
061F           1822   L028006?:
061F           1823   ;        EFM8_JDY40_test.c:521: if(RXU1()) break; // Got something! Get out of loop.
061F C002      1824            push    ar2
0621 C003      1825            push    ar3
0623 120000    1826            lcall   _RXU1
0626 D003      1827            pop     ar3
0628 D002      1828            pop     ar2
062A 4000      1829            jc      L028007?
062C           1830   ;        EFM8_JDY40_test.c:522: Timer3us(100); // Check if something has arrived every 100us
062C 758264    1831            mov     dpl,#0x64
062F C002      1832            push    ar2
0631 C003      1833            push    ar3
0633 120000    1834            lcall   _Timer3us
0636 D003      1835            pop     ar3
0638 D002      1836            pop     ar2
063A           1837   ;        EFM8_JDY40_test.c:523: timeout_cnt++;
063A 0A        1838            inc     r2
063B BA00E8    1839            cjne    r2,#0x00,L028024?
063E 0B        1840            inc     r3
063F           1841   L028024?:
063F           1842   ;        EFM8_JDY40_test.c:525: if(timeout_cnt>=100) break; // timeout after 100ms, get out of loop
063F C3        1843            clr     c
0640 EA        1844            mov     a,r2
0641 9464      1845            subb    a,#0x64
0643 EB        1846            mov     a,r3
0644 9400      1847            subb    a,#0x00
0646 4000      1848            jc      L028006?
0648           1849   L028007?:
0648           1850   ;        EFM8_JDY40_test.c:534: if(RXU1())
0648 120000    1851            lcall   _RXU1
064B 4000      1852            jc      L028026?
064D 020000    1853            ljmp    L028013?
0650           1854   L028026?:
0650           1855   ;        EFM8_JDY40_test.c:538: getstr1(buff);   
0650 9018D0    1856            mov     dptr,#_buff
0653 75F040    1857            mov     b,#0x40
0656 120000    1858            lcall   _getstr1
0659           1859   ;        EFM8_JDY40_test.c:540: if(strlen(buff)==6){
0659 9018D0    1860            mov     dptr,#_buff
065C 75F040    1861            mov     b,#0x40
065F 120000    1862            lcall   _strlen
0662 AA82      1863            mov     r2,dpl
0664 AB83      1864            mov     r3,dph
0666 BA06A8    1865            cjne    r2,#0x06,L028027?
0669 BB00A8    1866            cjne    r3,#0x00,L028027?
066C 8000      1867            sjmp    L028028?
066E           1868   L028027?:
066E 020000    1869            ljmp    L028013?
0671           1870   L028028?:
0671           1871   ;        EFM8_JDY40_test.c:543: f=atol(&buff[0]);
0671 9018D0    1872            mov     dptr,#_buff
0674 75F040    1873            mov     b,#0x40
0677 120000    1874            lcall   _atol
067A AA82      1875            mov     r2,dpl
067C AB83      1876            mov     r3,dph
067E ACF0      1877            mov     r4,b
0680 FD        1878            mov     r5,a
0681           1879   ;        EFM8_JDY40_test.c:544: printf("%ld\r\n",f);
0681 C002      1880            push    ar2
0683 C003      1881            push    ar3
0685 C004      1882            push    ar4
0687 C005      1883            push    ar5
0689 7468      1884            mov     a,#__str_14
068B C0E0      1885            push    acc
068D 74CC      1886            mov     a,#(__str_14 >> 8)
068F C0E0      1887            push    acc
0691 7480      1888            mov     a,#0x80
0693 C0E0      1889            push    acc
0695 120000    1890            lcall   _printf
0698 E581      1891            mov     a,sp
069A 24F9      1892            add     a,#0xf9
069C F581      1893            mov     sp,a
069E 020000    1894            ljmp    L028013?
06A1           1895            rseg R_CSEG
06A1           1896   
0000           1897            rseg R_XINIT
0000           1898   
0000           1899            rseg R_CONST
0000           1900   __str_0:
0000 436F6D6D  1901            db 'Command: %s'
     616E643A
     202573
000B 00        1902            db 0x00
000C           1903   __str_1:
000C 52657370  1904            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1905            db 0x0D
0019 0A        1906            db 0x0A
001A 00        1907            db 0x00
001B           1908   __str_2:
001B 0D        1909            db 0x0D
001C 0A        1910            db 0x0A
001D 4A44592D  1911            db 'JDY-40 test'
     34302074
     657374
0028 0D        1912            db 0x0D
0029 0A        1913            db 0x0A
002A 00        1914            db 0x00
002B           1915   __str_3:
002B 41542B44  1916            db 'AT+DVID9944'
     56494439
     393434
0036 0D        1917            db 0x0D
0037 0A        1918            db 0x0A
0038 00        1919            db 0x00
0039           1920   __str_4:
0039 41542B52  1921            db 'AT+RFID2576'
     46494432
     353736
0044 0D        1922            db 0x0D
0045 0A        1923            db 0x0A
0046 00        1924            db 0x00
0047           1925   __str_5:
0047 41542B56  1926            db 'AT+VER'
     4552
004D 0D        1927            db 0x0D
004E 0A        1928            db 0x0A
004F 00        1929            db 0x00
0050           1930   __str_6:
0050 41542B42  1931            db 'AT+BAUD'
     415544
0057 0D        1932            db 0x0D
0058 0A        1933            db 0x0A
0059 00        1934            db 0x00
005A           1935   __str_7:
005A 41542B52  1936            db 'AT+RFID'
     464944
0061 0D        1937            db 0x0D
0062 0A        1938            db 0x0A
0063 00        1939            db 0x00
0064           1940   __str_8:
0064 41542B44  1941            db 'AT+DVID'
     564944
006B 0D        1942            db 0x0D
006C 0A        1943            db 0x0A
006D 00        1944            db 0x00
006E           1945   __str_9:
006E 41542B52  1946            db 'AT+RFC'
     4643
0074 0D        1947            db 0x0D
0075 0A        1948            db 0x0A
0076 00        1949            db 0x00
0077           1950   __str_10:
0077 41542B50  1951            db 'AT+POWE'
     4F5745
007E 0D        1952            db 0x0D
007F 0A        1953            db 0x0A
0080 00        1954            db 0x00
0081           1955   __str_11:
0081 41542B43  1956            db 'AT+CLSS'
     4C5353
0088 0D        1957            db 0x0D
0089 0A        1958            db 0x0A
008A 00        1959            db 0x00
008B           1960   __str_12:
008B 0D        1961            db 0x0D
008C 0A        1962            db 0x0A
008D 50726573  1963            db 'Press and hold the BOOT button to transmit.'
     7320616E
     6420686F
     6C642074
     68652042
     4F4F5420
     62757474
     6F6E2074
     6F207472
     616E736D
     69742E
00B8 0D        1964            db 0x0D
00B9 0A        1965            db 0x0A
00BA 00        1966            db 0x00
00BB           1967   __str_13:
00BB 25303364  1968            db '%03d|%03d'
     7C253033
     64
00C4 0D        1969            db 0x0D
00C5 0A        1970            db 0x0A
00C6 00        1971            db 0x00
00C7           1972   __str_14:
00C7 256C64    1973            db '%ld'
00CA 0D        1974            db 0x0D
00CB 0A        1975            db 0x0A
00CC 00        1976            db 0x00
00CD           1977   
0003           1978            CSEG
0003           1979   
0003           1980   end
