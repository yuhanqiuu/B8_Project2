0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Apr 03 22:19:02 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _LCD_build_right_empty
0000             29            public _LCD_build_mid_empty
0000             30            public _LCD_build_left_empty
0000             31            public _LCD_build_mid
0000             32            public _LCD_build_right
0000             33            public _LCD_build_left
0000             34            public _thefastestsprintf
0000             35            public _LCDprint2
0000             36            public _LCDprint
0000             37            public _LCD_4BIT
0000             38            public _WriteCommand
0000             39            public _WriteData
0000             40            public _speaker_pulse
0000             41            public _LCD_byte
0000             42            public _LCD_pulse
0000             43            public _SendATCommand
0000             44            public _waitms_or_RI1
0000             45            public _RXU1
0000             46            public _getstr1
0000             47            public _getchar1_with_timeout
0000             48            public _getchar1
0000             49            public _sendstr1
0000             50            public _putchar1
0000             51            public _UART1_Init
0000             52            public _Volts_at_Pin
0000             53            public _Get_ADC
0000             54            public _ADC_at_Pin
0000             55            public _InitPinADC
0000             56            public _waitms
0000             57            public _Timer2_ISR
0000             58            public _TIMER0_Init
0000             59            public _Timer3us
0000             60            public _InitADC
0000             61            public _PCA_ISR
0000             62            public _Timer4_ISR
0000             63            public __c51_external_startup
0000             64            public _LCDprint_PARM_3
0000             65            public _buff
0000             66            public _thefastestsprintf_PARM_3
0000             67            public _thefastestsprintf_PARM_2
0000             68            public _LCDprint2_PARM_3
0000             69            public _LCDprint2_PARM_2
0000             70            public _LCDprint_PARM_2
0000             71   ;--------------------------------------------------------
0000             72   ; Special Function Registers
0000             73   ;--------------------------------------------------------
0000             74   _ACC            DATA 0xe0
0000             75   _ADC0ASAH       DATA 0xb6
0000             76   _ADC0ASAL       DATA 0xb5
0000             77   _ADC0ASCF       DATA 0xa1
0000             78   _ADC0ASCT       DATA 0xc7
0000             79   _ADC0CF0        DATA 0xbc
0000             80   _ADC0CF1        DATA 0xb9
0000             81   _ADC0CF2        DATA 0xdf
0000             82   _ADC0CN0        DATA 0xe8
0000             83   _ADC0CN1        DATA 0xb2
0000             84   _ADC0CN2        DATA 0xb3
0000             85   _ADC0GTH        DATA 0xc4
0000             86   _ADC0GTL        DATA 0xc3
0000             87   _ADC0H          DATA 0xbe
0000             88   _ADC0L          DATA 0xbd
0000             89   _ADC0LTH        DATA 0xc6
0000             90   _ADC0LTL        DATA 0xc5
0000             91   _ADC0MX         DATA 0xbb
0000             92   _B              DATA 0xf0
0000             93   _CKCON0         DATA 0x8e
0000             94   _CKCON1         DATA 0xa6
0000             95   _CLEN0          DATA 0xc6
0000             96   _CLIE0          DATA 0xc7
0000             97   _CLIF0          DATA 0xe8
0000             98   _CLKSEL         DATA 0xa9
0000             99   _CLOUT0         DATA 0xd1
0000            100   _CLU0CF         DATA 0xb1
0000            101   _CLU0FN         DATA 0xaf
0000            102   _CLU0MX         DATA 0x84
0000            103   _CLU1CF         DATA 0xb3
0000            104   _CLU1FN         DATA 0xb2
0000            105   _CLU1MX         DATA 0x85
0000            106   _CLU2CF         DATA 0xb6
0000            107   _CLU2FN         DATA 0xb5
0000            108   _CLU2MX         DATA 0x91
0000            109   _CLU3CF         DATA 0xbf
0000            110   _CLU3FN         DATA 0xbe
0000            111   _CLU3MX         DATA 0xae
0000            112   _CMP0CN0        DATA 0x9b
0000            113   _CMP0CN1        DATA 0x99
0000            114   _CMP0MD         DATA 0x9d
0000            115   _CMP0MX         DATA 0x9f
0000            116   _CMP1CN0        DATA 0xbf
0000            117   _CMP1CN1        DATA 0xac
0000            118   _CMP1MD         DATA 0xab
0000            119   _CMP1MX         DATA 0xaa
0000            120   _CRC0CN0        DATA 0xce
0000            121   _CRC0CN1        DATA 0x86
0000            122   _CRC0CNT        DATA 0xd3
0000            123   _CRC0DAT        DATA 0xcb
0000            124   _CRC0FLIP       DATA 0xcf
0000            125   _CRC0IN         DATA 0xca
0000            126   _CRC0ST         DATA 0xd2
0000            127   _DAC0CF0        DATA 0x91
0000            128   _DAC0CF1        DATA 0x92
0000            129   _DAC0H          DATA 0x85
0000            130   _DAC0L          DATA 0x84
0000            131   _DAC1CF0        DATA 0x93
0000            132   _DAC1CF1        DATA 0x94
0000            133   _DAC1H          DATA 0x8a
0000            134   _DAC1L          DATA 0x89
0000            135   _DAC2CF0        DATA 0x95
0000            136   _DAC2CF1        DATA 0x96
0000            137   _DAC2H          DATA 0x8c
0000            138   _DAC2L          DATA 0x8b
0000            139   _DAC3CF0        DATA 0x9a
0000            140   _DAC3CF1        DATA 0x9c
0000            141   _DAC3H          DATA 0x8e
0000            142   _DAC3L          DATA 0x8d
0000            143   _DACGCF0        DATA 0x88
0000            144   _DACGCF1        DATA 0x98
0000            145   _DACGCF2        DATA 0xa2
0000            146   _DERIVID        DATA 0xad
0000            147   _DEVICEID       DATA 0xb5
0000            148   _DPH            DATA 0x83
0000            149   _DPL            DATA 0x82
0000            150   _EIE1           DATA 0xe6
0000            151   _EIE2           DATA 0xf3
0000            152   _EIP1           DATA 0xbb
0000            153   _EIP1H          DATA 0xee
0000            154   _EIP2           DATA 0xed
0000            155   _EIP2H          DATA 0xf6
0000            156   _EMI0CN         DATA 0xe7
0000            157   _FLKEY          DATA 0xb7
0000            158   _HFO0CAL        DATA 0xc7
0000            159   _HFO1CAL        DATA 0xd6
0000            160   _HFOCN          DATA 0xef
0000            161   _I2C0ADM        DATA 0xff
0000            162   _I2C0CN0        DATA 0xba
0000            163   _I2C0DIN        DATA 0xbc
0000            164   _I2C0DOUT       DATA 0xbb
0000            165   _I2C0FCN0       DATA 0xad
0000            166   _I2C0FCN1       DATA 0xab
0000            167   _I2C0FCT        DATA 0xf5
0000            168   _I2C0SLAD       DATA 0xbd
0000            169   _I2C0STAT       DATA 0xb9
0000            170   _IE             DATA 0xa8
0000            171   _IP             DATA 0xb8
0000            172   _IPH            DATA 0xf2
0000            173   _IT01CF         DATA 0xe4
0000            174   _LFO0CN         DATA 0xb1
0000            175   _P0             DATA 0x80
0000            176   _P0MASK         DATA 0xfe
0000            177   _P0MAT          DATA 0xfd
0000            178   _P0MDIN         DATA 0xf1
0000            179   _P0MDOUT        DATA 0xa4
0000            180   _P0SKIP         DATA 0xd4
0000            181   _P1             DATA 0x90
0000            182   _P1MASK         DATA 0xee
0000            183   _P1MAT          DATA 0xed
0000            184   _P1MDIN         DATA 0xf2
0000            185   _P1MDOUT        DATA 0xa5
0000            186   _P1SKIP         DATA 0xd5
0000            187   _P2             DATA 0xa0
0000            188   _P2MASK         DATA 0xfc
0000            189   _P2MAT          DATA 0xfb
0000            190   _P2MDIN         DATA 0xf3
0000            191   _P2MDOUT        DATA 0xa6
0000            192   _P2SKIP         DATA 0xcc
0000            193   _P3             DATA 0xb0
0000            194   _P3MDIN         DATA 0xf4
0000            195   _P3MDOUT        DATA 0x9c
0000            196   _PCA0CENT       DATA 0x9e
0000            197   _PCA0CLR        DATA 0x9c
0000            198   _PCA0CN0        DATA 0xd8
0000            199   _PCA0CPH0       DATA 0xfc
0000            200   _PCA0CPH1       DATA 0xea
0000            201   _PCA0CPH2       DATA 0xec
0000            202   _PCA0CPH3       DATA 0xf5
0000            203   _PCA0CPH4       DATA 0x85
0000            204   _PCA0CPH5       DATA 0xde
0000            205   _PCA0CPL0       DATA 0xfb
0000            206   _PCA0CPL1       DATA 0xe9
0000            207   _PCA0CPL2       DATA 0xeb
0000            208   _PCA0CPL3       DATA 0xf4
0000            209   _PCA0CPL4       DATA 0x84
0000            210   _PCA0CPL5       DATA 0xdd
0000            211   _PCA0CPM0       DATA 0xda
0000            212   _PCA0CPM1       DATA 0xdb
0000            213   _PCA0CPM2       DATA 0xdc
0000            214   _PCA0CPM3       DATA 0xae
0000            215   _PCA0CPM4       DATA 0xaf
0000            216   _PCA0CPM5       DATA 0xcc
0000            217   _PCA0H          DATA 0xfa
0000            218   _PCA0L          DATA 0xf9
0000            219   _PCA0MD         DATA 0xd9
0000            220   _PCA0POL        DATA 0x96
0000            221   _PCA0PWM        DATA 0xf7
0000            222   _PCON0          DATA 0x87
0000            223   _PCON1          DATA 0xcd
0000            224   _PFE0CN         DATA 0xc1
0000            225   _PRTDRV         DATA 0xf6
0000            226   _PSCTL          DATA 0x8f
0000            227   _PSTAT0         DATA 0xaa
0000            228   _PSW            DATA 0xd0
0000            229   _REF0CN         DATA 0xd1
0000            230   _REG0CN         DATA 0xc9
0000            231   _REVID          DATA 0xb6
0000            232   _RSTSRC         DATA 0xef
0000            233   _SBCON1         DATA 0x94
0000            234   _SBRLH1         DATA 0x96
0000            235   _SBRLL1         DATA 0x95
0000            236   _SBUF           DATA 0x99
0000            237   _SBUF0          DATA 0x99
0000            238   _SBUF1          DATA 0x92
0000            239   _SCON           DATA 0x98
0000            240   _SCON0          DATA 0x98
0000            241   _SCON1          DATA 0xc8
0000            242   _SFRPAGE        DATA 0xa7
0000            243   _SFRPGCN        DATA 0xbc
0000            244   _SFRSTACK       DATA 0xd7
0000            245   _SMB0ADM        DATA 0xd6
0000            246   _SMB0ADR        DATA 0xd7
0000            247   _SMB0CF         DATA 0xc1
0000            248   _SMB0CN0        DATA 0xc0
0000            249   _SMB0DAT        DATA 0xc2
0000            250   _SMB0FCN0       DATA 0xc3
0000            251   _SMB0FCN1       DATA 0xc4
0000            252   _SMB0FCT        DATA 0xef
0000            253   _SMB0RXLN       DATA 0xc5
0000            254   _SMB0TC         DATA 0xac
0000            255   _SMOD1          DATA 0x93
0000            256   _SP             DATA 0x81
0000            257   _SPI0CFG        DATA 0xa1
0000            258   _SPI0CKR        DATA 0xa2
0000            259   _SPI0CN0        DATA 0xf8
0000            260   _SPI0DAT        DATA 0xa3
0000            261   _SPI0FCN0       DATA 0x9a
0000            262   _SPI0FCN1       DATA 0x9b
0000            263   _SPI0FCT        DATA 0xf7
0000            264   _SPI0PCF        DATA 0xdf
0000            265   _TCON           DATA 0x88
0000            266   _TH0            DATA 0x8c
0000            267   _TH1            DATA 0x8d
0000            268   _TL0            DATA 0x8a
0000            269   _TL1            DATA 0x8b
0000            270   _TMOD           DATA 0x89
0000            271   _TMR2CN0        DATA 0xc8
0000            272   _TMR2CN1        DATA 0xfd
0000            273   _TMR2H          DATA 0xcf
0000            274   _TMR2L          DATA 0xce
0000            275   _TMR2RLH        DATA 0xcb
0000            276   _TMR2RLL        DATA 0xca
0000            277   _TMR3CN0        DATA 0x91
0000            278   _TMR3CN1        DATA 0xfe
0000            279   _TMR3H          DATA 0x95
0000            280   _TMR3L          DATA 0x94
0000            281   _TMR3RLH        DATA 0x93
0000            282   _TMR3RLL        DATA 0x92
0000            283   _TMR4CN0        DATA 0x98
0000            284   _TMR4CN1        DATA 0xff
0000            285   _TMR4H          DATA 0xa5
0000            286   _TMR4L          DATA 0xa4
0000            287   _TMR4RLH        DATA 0xa3
0000            288   _TMR4RLL        DATA 0xa2
0000            289   _TMR5CN0        DATA 0xc0
0000            290   _TMR5CN1        DATA 0xf1
0000            291   _TMR5H          DATA 0xd5
0000            292   _TMR5L          DATA 0xd4
0000            293   _TMR5RLH        DATA 0xd3
0000            294   _TMR5RLL        DATA 0xd2
0000            295   _UART0PCF       DATA 0xd9
0000            296   _UART1FCN0      DATA 0x9d
0000            297   _UART1FCN1      DATA 0xd8
0000            298   _UART1FCT       DATA 0xfa
0000            299   _UART1LIN       DATA 0x9e
0000            300   _UART1PCF       DATA 0xda
0000            301   _VDM0CN         DATA 0xff
0000            302   _WDTCN          DATA 0x97
0000            303   _XBR0           DATA 0xe1
0000            304   _XBR1           DATA 0xe2
0000            305   _XBR2           DATA 0xe3
0000            306   _XOSC0CN        DATA 0x86
0000            307   _DPTR           DATA 0x8382
0000            308   _TMR2RL         DATA 0xcbca
0000            309   _TMR3RL         DATA 0x9392
0000            310   _TMR4RL         DATA 0xa3a2
0000            311   _TMR5RL         DATA 0xd3d2
0000            312   _TMR0           DATA 0x8c8a
0000            313   _TMR1           DATA 0x8d8b
0000            314   _TMR2           DATA 0xcfce
0000            315   _TMR3           DATA 0x9594
0000            316   _TMR4           DATA 0xa5a4
0000            317   _TMR5           DATA 0xd5d4
0000            318   _SBRL1          DATA 0x9695
0000            319   _PCA0           DATA 0xfaf9
0000            320   _PCA0CP0        DATA 0xfcfb
0000            321   _PCA0CP1        DATA 0xeae9
0000            322   _PCA0CP2        DATA 0xeceb
0000            323   _PCA0CP3        DATA 0xf5f4
0000            324   _PCA0CP4        DATA 0x8584
0000            325   _PCA0CP5        DATA 0xdedd
0000            326   _ADC0ASA        DATA 0xb6b5
0000            327   _ADC0GT         DATA 0xc4c3
0000            328   _ADC0           DATA 0xbebd
0000            329   _ADC0LT         DATA 0xc6c5
0000            330   _DAC0           DATA 0x8584
0000            331   _DAC1           DATA 0x8a89
0000            332   _DAC2           DATA 0x8c8b
0000            333   _DAC3           DATA 0x8e8d
0000            334   ;--------------------------------------------------------
0000            335   ; special function bits
0000            336   ;--------------------------------------------------------
0000            337   _ACC_0          BIT 0xe0
0000            338   _ACC_1          BIT 0xe1
0000            339   _ACC_2          BIT 0xe2
0000            340   _ACC_3          BIT 0xe3
0000            341   _ACC_4          BIT 0xe4
0000            342   _ACC_5          BIT 0xe5
0000            343   _ACC_6          BIT 0xe6
0000            344   _ACC_7          BIT 0xe7
0000            345   _TEMPE          BIT 0xe8
0000            346   _ADGN0          BIT 0xe9
0000            347   _ADGN1          BIT 0xea
0000            348   _ADWINT         BIT 0xeb
0000            349   _ADBUSY         BIT 0xec
0000            350   _ADINT          BIT 0xed
0000            351   _IPOEN          BIT 0xee
0000            352   _ADEN           BIT 0xef
0000            353   _B_0            BIT 0xf0
0000            354   _B_1            BIT 0xf1
0000            355   _B_2            BIT 0xf2
0000            356   _B_3            BIT 0xf3
0000            357   _B_4            BIT 0xf4
0000            358   _B_5            BIT 0xf5
0000            359   _B_6            BIT 0xf6
0000            360   _B_7            BIT 0xf7
0000            361   _C0FIF          BIT 0xe8
0000            362   _C0RIF          BIT 0xe9
0000            363   _C1FIF          BIT 0xea
0000            364   _C1RIF          BIT 0xeb
0000            365   _C2FIF          BIT 0xec
0000            366   _C2RIF          BIT 0xed
0000            367   _C3FIF          BIT 0xee
0000            368   _C3RIF          BIT 0xef
0000            369   _D1SRC0         BIT 0x88
0000            370   _D1SRC1         BIT 0x89
0000            371   _D1AMEN         BIT 0x8a
0000            372   _D01REFSL       BIT 0x8b
0000            373   _D3SRC0         BIT 0x8c
0000            374   _D3SRC1         BIT 0x8d
0000            375   _D3AMEN         BIT 0x8e
0000            376   _D23REFSL       BIT 0x8f
0000            377   _D0UDIS         BIT 0x98
0000            378   _D1UDIS         BIT 0x99
0000            379   _D2UDIS         BIT 0x9a
0000            380   _D3UDIS         BIT 0x9b
0000            381   _EX0            BIT 0xa8
0000            382   _ET0            BIT 0xa9
0000            383   _EX1            BIT 0xaa
0000            384   _ET1            BIT 0xab
0000            385   _ES0            BIT 0xac
0000            386   _ET2            BIT 0xad
0000            387   _ESPI0          BIT 0xae
0000            388   _EA             BIT 0xaf
0000            389   _PX0            BIT 0xb8
0000            390   _PT0            BIT 0xb9
0000            391   _PX1            BIT 0xba
0000            392   _PT1            BIT 0xbb
0000            393   _PS0            BIT 0xbc
0000            394   _PT2            BIT 0xbd
0000            395   _PSPI0          BIT 0xbe
0000            396   _P0_0           BIT 0x80
0000            397   _P0_1           BIT 0x81
0000            398   _P0_2           BIT 0x82
0000            399   _P0_3           BIT 0x83
0000            400   _P0_4           BIT 0x84
0000            401   _P0_5           BIT 0x85
0000            402   _P0_6           BIT 0x86
0000            403   _P0_7           BIT 0x87
0000            404   _P1_0           BIT 0x90
0000            405   _P1_1           BIT 0x91
0000            406   _P1_2           BIT 0x92
0000            407   _P1_3           BIT 0x93
0000            408   _P1_4           BIT 0x94
0000            409   _P1_5           BIT 0x95
0000            410   _P1_6           BIT 0x96
0000            411   _P1_7           BIT 0x97
0000            412   _P2_0           BIT 0xa0
0000            413   _P2_1           BIT 0xa1
0000            414   _P2_2           BIT 0xa2
0000            415   _P2_3           BIT 0xa3
0000            416   _P2_4           BIT 0xa4
0000            417   _P2_5           BIT 0xa5
0000            418   _P2_6           BIT 0xa6
0000            419   _P3_0           BIT 0xb0
0000            420   _P3_1           BIT 0xb1
0000            421   _P3_2           BIT 0xb2
0000            422   _P3_3           BIT 0xb3
0000            423   _P3_4           BIT 0xb4
0000            424   _P3_7           BIT 0xb7
0000            425   _CCF0           BIT 0xd8
0000            426   _CCF1           BIT 0xd9
0000            427   _CCF2           BIT 0xda
0000            428   _CCF3           BIT 0xdb
0000            429   _CCF4           BIT 0xdc
0000            430   _CCF5           BIT 0xdd
0000            431   _CR             BIT 0xde
0000            432   _CF             BIT 0xdf
0000            433   _PARITY         BIT 0xd0
0000            434   _F1             BIT 0xd1
0000            435   _OV             BIT 0xd2
0000            436   _RS0            BIT 0xd3
0000            437   _RS1            BIT 0xd4
0000            438   _F0             BIT 0xd5
0000            439   _AC             BIT 0xd6
0000            440   _CY             BIT 0xd7
0000            441   _RI             BIT 0x98
0000            442   _TI             BIT 0x99
0000            443   _RB8            BIT 0x9a
0000            444   _TB8            BIT 0x9b
0000            445   _REN            BIT 0x9c
0000            446   _CE             BIT 0x9d
0000            447   _SMODE          BIT 0x9e
0000            448   _RI1            BIT 0xc8
0000            449   _TI1            BIT 0xc9
0000            450   _RBX1           BIT 0xca
0000            451   _TBX1           BIT 0xcb
0000            452   _REN1           BIT 0xcc
0000            453   _PERR1          BIT 0xcd
0000            454   _OVR1           BIT 0xce
0000            455   _SI             BIT 0xc0
0000            456   _ACK            BIT 0xc1
0000            457   _ARBLOST        BIT 0xc2
0000            458   _ACKRQ          BIT 0xc3
0000            459   _STO            BIT 0xc4
0000            460   _STA            BIT 0xc5
0000            461   _TXMODE         BIT 0xc6
0000            462   _MASTER         BIT 0xc7
0000            463   _SPIEN          BIT 0xf8
0000            464   _TXNF           BIT 0xf9
0000            465   _NSSMD0         BIT 0xfa
0000            466   _NSSMD1         BIT 0xfb
0000            467   _RXOVRN         BIT 0xfc
0000            468   _MODF           BIT 0xfd
0000            469   _WCOL           BIT 0xfe
0000            470   _SPIF           BIT 0xff
0000            471   _IT0            BIT 0x88
0000            472   _IE0            BIT 0x89
0000            473   _IT1            BIT 0x8a
0000            474   _IE1            BIT 0x8b
0000            475   _TR0            BIT 0x8c
0000            476   _TF0            BIT 0x8d
0000            477   _TR1            BIT 0x8e
0000            478   _TF1            BIT 0x8f
0000            479   _T2XCLK0        BIT 0xc8
0000            480   _T2XCLK1        BIT 0xc9
0000            481   _TR2            BIT 0xca
0000            482   _T2SPLIT        BIT 0xcb
0000            483   _TF2CEN         BIT 0xcc
0000            484   _TF2LEN         BIT 0xcd
0000            485   _TF2L           BIT 0xce
0000            486   _TF2H           BIT 0xcf
0000            487   _T4XCLK0        BIT 0x98
0000            488   _T4XCLK1        BIT 0x99
0000            489   _TR4            BIT 0x9a
0000            490   _T4SPLIT        BIT 0x9b
0000            491   _TF4CEN         BIT 0x9c
0000            492   _TF4LEN         BIT 0x9d
0000            493   _TF4L           BIT 0x9e
0000            494   _TF4H           BIT 0x9f
0000            495   _T5XCLK0        BIT 0xc0
0000            496   _T5XCLK1        BIT 0xc1
0000            497   _TR5            BIT 0xc2
0000            498   _T5SPLIT        BIT 0xc3
0000            499   _TF5CEN         BIT 0xc4
0000            500   _TF5LEN         BIT 0xc5
0000            501   _TF5L           BIT 0xc6
0000            502   _TF5H           BIT 0xc7
0000            503   _RIE            BIT 0xd8
0000            504   _RXTO0          BIT 0xd9
0000            505   _RXTO1          BIT 0xda
0000            506   _RFRQ           BIT 0xdb
0000            507   _TIE            BIT 0xdc
0000            508   _TXHOLD         BIT 0xdd
0000            509   _TXNF1          BIT 0xde
0000            510   _TFRQ           BIT 0xdf
0000            511   ;--------------------------------------------------------
0000            512   ; overlayable register banks
0000            513   ;--------------------------------------------------------
0000            514            rbank0 segment data overlay
0000            515   ;--------------------------------------------------------
0000            516   ; internal ram data
0000            517   ;--------------------------------------------------------
0000            518            rseg R_DSEG
0000            519   _LCDprint_PARM_2:
0000            520            ds 1
0001            521   _LCDprint2_PARM_2:
0001            522            ds 1
0002            523   _LCDprint2_PARM_3:
0002            524            ds 1
0003            525   _thefastestsprintf_PARM_2:
0003            526            ds 3
0006            527   _thefastestsprintf_PARM_3:
0006            528            ds 2
0008            529   _thefastestsprintf_num_1_129:
0008            530            ds 2
000A            531   _thefastestsprintf_i_1_130:
000A            532            ds 2
000C            533   ;--------------------------------------------------------
000C            534   ; overlayable items in internal ram 
000C            535   ;--------------------------------------------------------
0000            536            rseg    R_OSEG
0000            537            rseg    R_OSEG
0000            538   _InitPinADC_PARM_2:
0000            539            ds 1
0001            540            rseg    R_OSEG
0001            541            rseg    R_OSEG
0001            542            rseg    R_OSEG
0001            543   ;--------------------------------------------------------
0001            544   ; indirectly addressable internal ram data
0001            545   ;--------------------------------------------------------
0000            546            rseg R_ISEG
0000            547   _buff:
0000            548            ds 20
0014            549   ;--------------------------------------------------------
0014            550   ; absolute internal ram data
0014            551   ;--------------------------------------------------------
0000            552            DSEG
0000            553   ;--------------------------------------------------------
0000            554   ; bit data
0000            555   ;--------------------------------------------------------
0000            556            rseg R_BSEG
0000            557   _LCDprint_PARM_3:
0000            558            DBIT    1
0001            559   ;--------------------------------------------------------
0001            560   ; paged external ram data
0001            561   ;--------------------------------------------------------
0000            562            rseg R_PSEG
0000            563   ;--------------------------------------------------------
0000            564   ; external ram data
0000            565   ;--------------------------------------------------------
0000            566            rseg R_XSEG
0000            567   ;--------------------------------------------------------
0000            568   ; absolute external ram data
0000            569   ;--------------------------------------------------------
0000            570            XSEG
0000            571   ;--------------------------------------------------------
0000            572   ; external initialized ram data
0000            573   ;--------------------------------------------------------
0000            574            rseg R_IXSEG
0000            575            rseg R_HOME
0000            576            rseg R_GSINIT
0000            577            rseg R_CSEG
0000            578   ;--------------------------------------------------------
0000            579   ; Reset entry point and interrupt vectors
0000            580   ;--------------------------------------------------------
0000            581            CSEG at 0x0000
0000 020000     582            ljmp    _crt0
005B            583            CSEG at 0x005b
005B 020000     584            ljmp    _PCA_ISR
008B            585            CSEG at 0x008b
008B 020000     586            ljmp    _Timer4_ISR
008E            587   ;--------------------------------------------------------
008E            588   ; global & static initialisations
008E            589   ;--------------------------------------------------------
0000            590            rseg R_HOME
0000            591            rseg R_GSINIT
0000            592            rseg R_GSINIT
0000            593   ;--------------------------------------------------------
0000            594   ; data variables initialization
0000            595   ;--------------------------------------------------------
0000            596            rseg R_DINIT
0000            597            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            598   ;--------------------------------------------------------
0000            599   ; code
0000            600   ;--------------------------------------------------------
0000            601            rseg R_CSEG
0000            602   ;------------------------------------------------------------
0000            603   ;Allocation info for local variables in function '_c51_external_startup'
0000            604   ;------------------------------------------------------------
0000            605   ;------------------------------------------------------------
0000            606   ;        EFM8_JDY40_test.c:42: char _c51_external_startup (void)
0000            607   ;        -----------------------------------------
0000            608   ;         function _c51_external_startup
0000            609   ;        -----------------------------------------
0000            610   __c51_external_startup:
0000            611            using   0
0000            612   ;        EFM8_JDY40_test.c:45: SFRPAGE = 0x00;
0000 75A700     613            mov     _SFRPAGE,#0x00
0003            614   ;        EFM8_JDY40_test.c:46: WDTCN = 0xDE; //First key
0003 7597DE     615            mov     _WDTCN,#0xDE
0006            616   ;        EFM8_JDY40_test.c:47: WDTCN = 0xAD; //Second key
0006 7597AD     617            mov     _WDTCN,#0xAD
0009            618   ;        EFM8_JDY40_test.c:49: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     619            mov     _VDM0CN,#0x80
000C            620   ;        EFM8_JDY40_test.c:50: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     621            mov     _RSTSRC,#0x06
000F            622   ;        EFM8_JDY40_test.c:57: SFRPAGE = 0x10;
000F 75A710     623            mov     _SFRPAGE,#0x10
0012            624   ;        EFM8_JDY40_test.c:58: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     625            mov     _PFE0CN,#0x20
0015            626   ;        EFM8_JDY40_test.c:59: SFRPAGE = 0x00;
0015 75A700     627            mov     _SFRPAGE,#0x00
0018            628   ;        EFM8_JDY40_test.c:80: CLKSEL = 0x00;
0018 75A900     629            mov     _CLKSEL,#0x00
001B            630   ;        EFM8_JDY40_test.c:81: CLKSEL = 0x00;
001B 75A900     631            mov     _CLKSEL,#0x00
001E            632   ;        EFM8_JDY40_test.c:82: while ((CLKSEL & 0x80) == 0);
001E            633   L002001?:
001E E5A9       634            mov     a,_CLKSEL
0020 30E7E0     635            jnb     acc.7,L002001?
0023            636   ;        EFM8_JDY40_test.c:83: CLKSEL = 0x03;
0023 75A903     637            mov     _CLKSEL,#0x03
0026            638   ;        EFM8_JDY40_test.c:84: CLKSEL = 0x03;
0026 75A903     639            mov     _CLKSEL,#0x03
0029            640   ;        EFM8_JDY40_test.c:85: while ((CLKSEL & 0x80) == 0);
0029            641   L002004?:
0029 E5A9       642            mov     a,_CLKSEL
002B 30E760     643            jnb     acc.7,L002004?
002E            644   ;        EFM8_JDY40_test.c:90: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     645            orl     _P0MDOUT,#0x11
0031            646   ;        EFM8_JDY40_test.c:91: P2MDOUT |= 0x00; // P2.0 in push-pull mode
0031 85A6A6     647            mov     _P2MDOUT,_P2MDOUT
0034            648   ;        EFM8_JDY40_test.c:92: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     649            mov     _XBR0,#0x01
0037            650   ;        EFM8_JDY40_test.c:93: XBR1     = 0X00;
0037 75E200     651            mov     _XBR1,#0x00
003A            652   ;        EFM8_JDY40_test.c:94: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     653            mov     _XBR2,#0x41
003D            654   ;        EFM8_JDY40_test.c:111: SCON0 = 0x10;
003D 759810     655            mov     _SCON0,#0x10
0040            656   ;        EFM8_JDY40_test.c:112: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     657            mov     _TH1,#0xE6
0043            658   ;        EFM8_JDY40_test.c:113: TL1 = TH1;      // Init Timer1
0043 858D8B     659            mov     _TL1,_TH1
0046            660   ;        EFM8_JDY40_test.c:114: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     661            anl     _TMOD,#0x0F
0049            662   ;        EFM8_JDY40_test.c:115: TMOD |=  0x20;                       
0049 438920     663            orl     _TMOD,#0x20
004C            664   ;        EFM8_JDY40_test.c:116: TR1 = 1; // START Timer1
004C D28E       665            setb    _TR1
004E            666   ;        EFM8_JDY40_test.c:117: TI = 1;  // Indicate TX0 ready
004E D299       667            setb    _TI
0050            668   ;        EFM8_JDY40_test.c:130: SFRPAGE=0x10;
0050 75A710     669            mov     _SFRPAGE,#0x10
0053            670   ;        EFM8_JDY40_test.c:131: TMR4CN0=0x00;   // Stop Timer4; Clear TF4; WARNING: lives in SFR page 0x10
0053 759800     671            mov     _TMR4CN0,#0x00
0056            672   ;        EFM8_JDY40_test.c:132: CKCON1|=0b_0000_0001; // Timer 4 uses the system clock
0056 43A601     673            orl     _CKCON1,#0x01
0059            674   ;        EFM8_JDY40_test.c:133: TMR4RL=(0x10000L-(SYSCLK/(2*TIMER_4_FREQ))); // Initialize reload value
0059 75A2E0     675            mov     _TMR4RL,#0xE0
005C 75A3E3     676            mov     (_TMR4RL >> 8),#0xE3
005F            677   ;        EFM8_JDY40_test.c:134: TMR4=0xffff;   // Set to reload immediately
005F 75A4FF     678            mov     _TMR4,#0xFF
0062 75A5FF     679            mov     (_TMR4 >> 8),#0xFF
0065            680   ;        EFM8_JDY40_test.c:135: EIE2|=0b_0000_0100;     // Enable Timer4 interrupts
0065 43F304     681            orl     _EIE2,#0x04
0068            682   ;        EFM8_JDY40_test.c:136: TR4=1;
0068 D29A       683            setb    _TR4
006A            684   ;        EFM8_JDY40_test.c:138: return 0;
006A 758200     685            mov     dpl,#0x00
006D 22         686            ret
006E            687   ;------------------------------------------------------------
006E            688   ;Allocation info for local variables in function 'Timer4_ISR'
006E            689   ;------------------------------------------------------------
006E            690   ;------------------------------------------------------------
006E            691   ;        EFM8_JDY40_test.c:141: void Timer4_ISR (void) interrupt INTERRUPT_TIMER4
006E            692   ;        -----------------------------------------
006E            693   ;         function Timer4_ISR
006E            694   ;        -----------------------------------------
006E            695   _Timer4_ISR:
006E            696   ;        EFM8_JDY40_test.c:143: SFRPAGE=0x10;
006E 75A710     697            mov     _SFRPAGE,#0x10
0071            698   ;        EFM8_JDY40_test.c:144: TF4H = 0; // Clear Timer4 interrupt flag
0071 C29F       699            clr     _TF4H
0073            700   ;        EFM8_JDY40_test.c:145: TIMER_OUT_4=!TIMER_OUT_4;
0073 B2B2       701            cpl     _P3_2
0075 32         702            reti
0076            703   ;        eliminated unneeded push/pop psw
0076            704   ;        eliminated unneeded push/pop dpl
0076            705   ;        eliminated unneeded push/pop dph
0076            706   ;        eliminated unneeded push/pop b
0076            707   ;        eliminated unneeded push/pop acc
0076            708   ;------------------------------------------------------------
0076            709   ;Allocation info for local variables in function 'PCA_ISR'
0076            710   ;------------------------------------------------------------
0076            711   ;j                         Allocated to registers r2 r3 
0076            712   ;------------------------------------------------------------
0076            713   ;        EFM8_JDY40_test.c:148: void PCA_ISR (void) interrupt INTERRUPT_PCA0
0076            714   ;        -----------------------------------------
0076            715   ;         function PCA_ISR
0076            716   ;        -----------------------------------------
0076            717   _PCA_ISR:
0076 C0E0       718            push    acc
0078 C002       719            push    ar2
007A C003       720            push    ar3
007C C004       721            push    ar4
007E C005       722            push    ar5
0080 C0D0       723            push    psw
0082 75D000     724            mov     psw,#0x00
0085            725   ;        EFM8_JDY40_test.c:152: SFRPAGE=0x0;
0085 75A700     726            mov     _SFRPAGE,#0x00
0088            727   ;        EFM8_JDY40_test.c:153: if (CCF4)
0088 30DC20     728            jnb     _CCF4,L004002?
008B            729   ;        EFM8_JDY40_test.c:155: j=(PCA0CPH4*0x100+PCA0CPL4)+(SYSCLK/(2L*PCA_4_FREQ));
008B AB85       730            mov     r3,_PCA0CPH4
008D 7A00       731            mov     r2,#0x00
008F AC84       732            mov     r4,_PCA0CPL4
0091 7D00       733            mov     r5,#0x00
0093 EC         734            mov     a,r4
0094 2A         735            add     a,r2
0095 FA         736            mov     r2,a
0096 ED         737            mov     a,r5
0097 3B         738            addc    a,r3
0098 FB         739            mov     r3,a
0099 33         740            rlc     a
009A 95E0       741            subb    a,acc
009C FC         742            mov     r4,a
009D FD         743            mov     r5,a
009E 74C8       744            mov     a,#0xC8
00A0 2A         745            add     a,r2
00A1 FA         746            mov     r2,a
00A2 740C       747            mov     a,#0x0C
00A4 3B         748            addc    a,r3
00A5 FB         749            mov     r3,a
00A6 E4         750            clr     a
00A7 3C         751            addc    a,r4
00A8 E4         752            clr     a
00A9 3D         753            addc    a,r5
00AA            754   ;        EFM8_JDY40_test.c:156: PCA0CPL4=j%0x100; //Always write low byte first!
00AA 8A04       755            mov     ar4,r2
00AC 7D00       756            mov     r5,#0x00
00AE 8C84       757            mov     _PCA0CPL4,r4
00B0            758   ;        EFM8_JDY40_test.c:157: PCA0CPH4=j/0x100;
00B0 8B02       759            mov     ar2,r3
00B2 7B00       760            mov     r3,#0x00
00B4 8A85       761            mov     _PCA0CPH4,r2
00B6            762   ;        EFM8_JDY40_test.c:158: CCF4=0;
00B6 C2DC       763            clr     _CCF4
00B8            764   ;        EFM8_JDY40_test.c:159: PCA_OUT_4=!PCA_OUT_4;
00B8 B286       765            cpl     _P0_6
00BA            766   L004002?:
00BA            767   ;        EFM8_JDY40_test.c:162: CF=0;
00BA C2DF       768            clr     _CF
00BC D0D0       769            pop     psw
00BE D005       770            pop     ar5
00C0 D004       771            pop     ar4
00C2 D003       772            pop     ar3
00C4 D002       773            pop     ar2
00C6 D0E0       774            pop     acc
00C8 32         775            reti
00C9            776   ;        eliminated unneeded push/pop dpl
00C9            777   ;        eliminated unneeded push/pop dph
00C9            778   ;        eliminated unneeded push/pop b
00C9            779   ;------------------------------------------------------------
00C9            780   ;Allocation info for local variables in function 'InitADC'
00C9            781   ;------------------------------------------------------------
00C9            782   ;------------------------------------------------------------
00C9            783   ;        EFM8_JDY40_test.c:165: void InitADC (void)
00C9            784   ;        -----------------------------------------
00C9            785   ;         function InitADC
00C9            786   ;        -----------------------------------------
00C9            787   _InitADC:
00C9            788   ;        EFM8_JDY40_test.c:167: SFRPAGE = 0x00;
00C9 75A700     789            mov     _SFRPAGE,#0x00
00CC            790   ;        EFM8_JDY40_test.c:168: ADEN=0; // Disable ADC
00CC C2EF       791            clr     _ADEN
00CE            792   ;        EFM8_JDY40_test.c:173: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
00CE 75B280     793            mov     _ADC0CN1,#0x80
00D1            794   ;        EFM8_JDY40_test.c:177: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
00D1 75BC20     795            mov     _ADC0CF0,#0x20
00D4            796   ;        EFM8_JDY40_test.c:181: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
00D4 75B91E     797            mov     _ADC0CF1,#0x1E
00D7            798   ;        EFM8_JDY40_test.c:190: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
00D7 75E800     799            mov     _ADC0CN0,#0x00
00DA            800   ;        EFM8_JDY40_test.c:195: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
00DA 75DF3F     801            mov     _ADC0CF2,#0x3F
00DD            802   ;        EFM8_JDY40_test.c:199: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
00DD 75B300     803            mov     _ADC0CN2,#0x00
00E0            804   ;        EFM8_JDY40_test.c:201: ADEN=1; // Enable ADC
00E0 D2EF       805            setb    _ADEN
00E2 22         806            ret
00E3            807   ;------------------------------------------------------------
00E3            808   ;Allocation info for local variables in function 'Timer3us'
00E3            809   ;------------------------------------------------------------
00E3            810   ;us                        Allocated to registers r2 
00E3            811   ;i                         Allocated to registers r3 
00E3            812   ;------------------------------------------------------------
00E3            813   ;        EFM8_JDY40_test.c:206: void Timer3us(unsigned char us)
00E3            814   ;        -----------------------------------------
00E3            815   ;         function Timer3us
00E3            816   ;        -----------------------------------------
00E3            817   _Timer3us:
00E3 AA82       818            mov     r2,dpl
00E5            819   ;        EFM8_JDY40_test.c:211: CKCON0|=0b_0100_0000;
00E5 438E40     820            orl     _CKCON0,#0x40
00E8            821   ;        EFM8_JDY40_test.c:213: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
00E8 7592B8     822            mov     _TMR3RL,#0xB8
00EB 7593FF     823            mov     (_TMR3RL >> 8),#0xFF
00EE            824   ;        EFM8_JDY40_test.c:214: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
00EE 859294     825            mov     _TMR3,_TMR3RL
00F1 859395     826            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
00F4            827   ;        EFM8_JDY40_test.c:216: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
00F4 759104     828            mov     _TMR3CN0,#0x04
00F7            829   ;        EFM8_JDY40_test.c:217: for (i = 0; i < us; i++)       // Count <us> overflows
00F7 7B00       830            mov     r3,#0x00
00F9            831   L006004?:
00F9 C3         832            clr     c
00FA EB         833            mov     a,r3
00FB 9A         834            subb    a,r2
00FC 5000       835            jnc     L006007?
00FE            836   ;        EFM8_JDY40_test.c:219: while (!(TMR3CN0 & 0x80));  // Wait for overflow
00FE            837   L006001?:
00FE E591       838            mov     a,_TMR3CN0
0100 30E7E0     839            jnb     acc.7,L006001?
0103            840   ;        EFM8_JDY40_test.c:220: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0103 53917F     841            anl     _TMR3CN0,#0x7F
0106            842   ;        EFM8_JDY40_test.c:217: for (i = 0; i < us; i++)       // Count <us> overflows
0106 0B         843            inc     r3
0107 8000       844            sjmp    L006004?
0109            845   L006007?:
0109            846   ;        EFM8_JDY40_test.c:222: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0109 759100     847            mov     _TMR3CN0,#0x00
010C 22         848            ret
010D            849   ;------------------------------------------------------------
010D            850   ;Allocation info for local variables in function 'TIMER0_Init'
010D            851   ;------------------------------------------------------------
010D            852   ;------------------------------------------------------------
010D            853   ;        EFM8_JDY40_test.c:225: void TIMER0_Init(void)
010D            854   ;        -----------------------------------------
010D            855   ;         function TIMER0_Init
010D            856   ;        -----------------------------------------
010D            857   _TIMER0_Init:
010D            858   ;        EFM8_JDY40_test.c:227: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
010D 5389F0     859            anl     _TMOD,#0xF0
0110            860   ;        EFM8_JDY40_test.c:228: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0110 438901     861            orl     _TMOD,#0x01
0113            862   ;        EFM8_JDY40_test.c:229: TR0=0; // Stop Timer/Counter 0
0113 C28C       863            clr     _TR0
0115 22         864            ret
0116            865   ;------------------------------------------------------------
0116            866   ;Allocation info for local variables in function 'Timer2_ISR'
0116            867   ;------------------------------------------------------------
0116            868   ;------------------------------------------------------------
0116            869   ;        EFM8_JDY40_test.c:246: void Timer2_ISR (void) //interrupt INTERRUPT_TIMER2
0116            870   ;        -----------------------------------------
0116            871   ;         function Timer2_ISR
0116            872   ;        -----------------------------------------
0116            873   _Timer2_ISR:
0116            874   ;        EFM8_JDY40_test.c:248: SFRPAGE=0x0;
0116 75A700     875            mov     _SFRPAGE,#0x00
0119            876   ;        EFM8_JDY40_test.c:249: TF2H = 0; // Clear Timer2 interrupt flag
0119 C2CF       877            clr     _TF2H
011B            878   ;        EFM8_JDY40_test.c:250: TIMER_OUT_2=!TIMER_OUT_2;
011B B2B3       879            cpl     _P3_3
011D 22         880            ret
011E            881   ;------------------------------------------------------------
011E            882   ;Allocation info for local variables in function 'waitms'
011E            883   ;------------------------------------------------------------
011E            884   ;ms                        Allocated to registers r2 r3 
011E            885   ;j                         Allocated to registers r4 r5 
011E            886   ;k                         Allocated to registers r6 
011E            887   ;------------------------------------------------------------
011E            888   ;        EFM8_JDY40_test.c:253: void waitms (unsigned int ms)
011E            889   ;        -----------------------------------------
011E            890   ;         function waitms
011E            891   ;        -----------------------------------------
011E            892   _waitms:
011E AA82       893            mov     r2,dpl
0120 AB83       894            mov     r3,dph
0122            895   ;        EFM8_JDY40_test.c:257: for(j=0; j<ms; j++)
0122 7C00       896            mov     r4,#0x00
0124 7D00       897            mov     r5,#0x00
0126            898   L009005?:
0126 C3         899            clr     c
0127 EC         900            mov     a,r4
0128 9A         901            subb    a,r2
0129 ED         902            mov     a,r5
012A 9B         903            subb    a,r3
012B 5000       904            jnc     L009009?
012D            905   ;        EFM8_JDY40_test.c:258: for (k=0; k<4; k++) Timer3us(250);
012D 7E00       906            mov     r6,#0x00
012F            907   L009001?:
012F BE0420     908            cjne    r6,#0x04,L009018?
0132            909   L009018?:
0132 5000       910            jnc     L009007?
0134 7582FA     911            mov     dpl,#0xFA
0137 C002       912            push    ar2
0139 C003       913            push    ar3
013B C004       914            push    ar4
013D C005       915            push    ar5
013F C006       916            push    ar6
0141 120000     917            lcall   _Timer3us
0144 D006       918            pop     ar6
0146 D005       919            pop     ar5
0148 D004       920            pop     ar4
014A D003       921            pop     ar3
014C D002       922            pop     ar2
014E 0E         923            inc     r6
014F 8000       924            sjmp    L009001?
0151            925   L009007?:
0151            926   ;        EFM8_JDY40_test.c:257: for(j=0; j<ms; j++)
0151 0C         927            inc     r4
0152 BC0060     928            cjne    r4,#0x00,L009005?
0155 0D         929            inc     r5
0156 8000       930            sjmp    L009005?
0158            931   L009009?:
0158 22         932            ret
0159            933   ;------------------------------------------------------------
0159            934   ;Allocation info for local variables in function 'InitPinADC'
0159            935   ;------------------------------------------------------------
0159            936   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0159            937   ;portno                    Allocated to registers r2 
0159            938   ;mask                      Allocated to registers r3 
0159            939   ;------------------------------------------------------------
0159            940   ;        EFM8_JDY40_test.c:261: void InitPinADC (unsigned char portno, unsigned char pinno)
0159            941   ;        -----------------------------------------
0159            942   ;         function InitPinADC
0159            943   ;        -----------------------------------------
0159            944   _InitPinADC:
0159 AA82       945            mov     r2,dpl
015B            946   ;        EFM8_JDY40_test.c:265: mask=1<<pinno;
015B 8528F0     947            mov     b,_InitPinADC_PARM_2
015E 05F0       948            inc     b
0160 7401       949            mov     a,#0x01
0162 8000       950            sjmp    L010013?
0164            951   L010011?:
0164 25E0       952            add     a,acc
0166            953   L010013?:
0166 D5F020     954            djnz    b,L010011?
0169 FB         955            mov     r3,a
016A            956   ;        EFM8_JDY40_test.c:267: SFRPAGE = 0x20;
016A 75A720     957            mov     _SFRPAGE,#0x20
016D            958   ;        EFM8_JDY40_test.c:268: switch (portno)
016D BA0060     959            cjne    r2,#0x00,L010014?
0170 8000       960            sjmp    L010001?
0172            961   L010014?:
0172 BA01E0     962            cjne    r2,#0x01,L010015?
0175 8000       963            sjmp    L010002?
0177            964   L010015?:
0177            965   ;        EFM8_JDY40_test.c:270: case 0:
0177 BA0260     966            cjne    r2,#0x02,L010005?
017A 8000       967            sjmp    L010003?
017C            968   L010001?:
017C            969   ;        EFM8_JDY40_test.c:271: P0MDIN &= (~mask); // Set pin as analog input
017C EB         970            mov     a,r3
017D F4         971            cpl     a
017E FA         972            mov     r2,a
017F 52F1       973            anl     _P0MDIN,a
0181            974   ;        EFM8_JDY40_test.c:272: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0181 EB         975            mov     a,r3
0182 42D4       976            orl     _P0SKIP,a
0184            977   ;        EFM8_JDY40_test.c:273: break;
0184            978   ;        EFM8_JDY40_test.c:274: case 1:
0184 8000       979            sjmp    L010005?
0186            980   L010002?:
0186            981   ;        EFM8_JDY40_test.c:275: P1MDIN &= (~mask); // Set pin as analog input
0186 EB         982            mov     a,r3
0187 F4         983            cpl     a
0188 FA         984            mov     r2,a
0189 52F2       985            anl     _P1MDIN,a
018B            986   ;        EFM8_JDY40_test.c:276: P1SKIP |= mask; // Skip Crossbar decoding for this pin
018B EB         987            mov     a,r3
018C 42D5       988            orl     _P1SKIP,a
018E            989   ;        EFM8_JDY40_test.c:277: break;
018E            990   ;        EFM8_JDY40_test.c:278: case 2:
018E 8000       991            sjmp    L010005?
0190            992   L010003?:
0190            993   ;        EFM8_JDY40_test.c:279: P2MDIN &= (~mask); // Set pin as analog input
0190 EB         994            mov     a,r3
0191 F4         995            cpl     a
0192 FA         996            mov     r2,a
0193 52F3       997            anl     _P2MDIN,a
0195            998   ;        EFM8_JDY40_test.c:280: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0195 EB         999            mov     a,r3
0196 42CC      1000            orl     _P2SKIP,a
0198           1001   ;        EFM8_JDY40_test.c:284: }
0198           1002   L010005?:
0198           1003   ;        EFM8_JDY40_test.c:285: SFRPAGE = 0x00;
0198 75A700    1004            mov     _SFRPAGE,#0x00
019B 22        1005            ret
019C           1006   ;------------------------------------------------------------
019C           1007   ;Allocation info for local variables in function 'ADC_at_Pin'
019C           1008   ;------------------------------------------------------------
019C           1009   ;pin                       Allocated to registers 
019C           1010   ;------------------------------------------------------------
019C           1011   ;        EFM8_JDY40_test.c:288: unsigned int ADC_at_Pin(unsigned char pin)
019C           1012   ;        -----------------------------------------
019C           1013   ;         function ADC_at_Pin
019C           1014   ;        -----------------------------------------
019C           1015   _ADC_at_Pin:
019C 8582BB    1016            mov     _ADC0MX,dpl
019F           1017   ;        EFM8_JDY40_test.c:291: ADINT = 0;
019F C2ED      1018            clr     _ADINT
01A1           1019   ;        EFM8_JDY40_test.c:292: ADBUSY = 1;     // Convert voltage at the pin
01A1 D2EC      1020            setb    _ADBUSY
01A3           1021   ;        EFM8_JDY40_test.c:293: while (!ADINT); // Wait for conversion to complete
01A3           1022   L011001?:
01A3 30EDE8    1023            jnb     _ADINT,L011001?
01A6           1024   ;        EFM8_JDY40_test.c:294: return (ADC0);
01A6 85BD82    1025            mov     dpl,_ADC0
01A9 85BE83    1026            mov     dph,(_ADC0 >> 8)
01AC 22        1027            ret
01AD           1028   ;------------------------------------------------------------
01AD           1029   ;Allocation info for local variables in function 'Get_ADC'
01AD           1030   ;------------------------------------------------------------
01AD           1031   ;------------------------------------------------------------
01AD           1032   ;        EFM8_JDY40_test.c:297: unsigned int Get_ADC (void)
01AD           1033   ;        -----------------------------------------
01AD           1034   ;         function Get_ADC
01AD           1035   ;        -----------------------------------------
01AD           1036   _Get_ADC:
01AD           1037   ;        EFM8_JDY40_test.c:299: ADINT = 0;
01AD C2ED      1038            clr     _ADINT
01AF           1039   ;        EFM8_JDY40_test.c:300: ADBUSY = 1;
01AF D2EC      1040            setb    _ADBUSY
01B1           1041   ;        EFM8_JDY40_test.c:301: while (!ADINT); // Wait for conversion to complete
01B1           1042   L012001?:
01B1 30ED28    1043            jnb     _ADINT,L012001?
01B4           1044   ;        EFM8_JDY40_test.c:302: return (ADC0);
01B4 85BD82    1045            mov     dpl,_ADC0
01B7 85BE83    1046            mov     dph,(_ADC0 >> 8)
01BA 22        1047            ret
01BB           1048   ;------------------------------------------------------------
01BB           1049   ;Allocation info for local variables in function 'Volts_at_Pin'
01BB           1050   ;------------------------------------------------------------
01BB           1051   ;pin                       Allocated to registers r2 
01BB           1052   ;------------------------------------------------------------
01BB           1053   ;        EFM8_JDY40_test.c:306: float Volts_at_Pin(unsigned char pin)
01BB           1054   ;        -----------------------------------------
01BB           1055   ;         function Volts_at_Pin
01BB           1056   ;        -----------------------------------------
01BB           1057   _Volts_at_Pin:
01BB           1058   ;        EFM8_JDY40_test.c:308: return ((ADC_at_Pin(pin)*VDD)/16383);
01BB 120000    1059            lcall   _ADC_at_Pin
01BE 120000    1060            lcall   ___uint2fs
01C1 AA82      1061            mov     r2,dpl
01C3 AB83      1062            mov     r3,dph
01C5 ACF0      1063            mov     r4,b
01C7 FD        1064            mov     r5,a
01C8 C002      1065            push    ar2
01CA C003      1066            push    ar3
01CC C004      1067            push    ar4
01CE C005      1068            push    ar5
01D0 903333    1069            mov     dptr,#0x3333
01D3 75F09B    1070            mov     b,#0x9B
01D6 7440      1071            mov     a,#0x40
01D8 120000    1072            lcall   ___fsmul
01DB AA82      1073            mov     r2,dpl
01DD AB83      1074            mov     r3,dph
01DF ACF0      1075            mov     r4,b
01E1 FD        1076            mov     r5,a
01E2 E581      1077            mov     a,sp
01E4 24FC      1078            add     a,#0xfc
01E6 F581      1079            mov     sp,a
01E8 E4        1080            clr     a
01E9 C0E0      1081            push    acc
01EB 74FC      1082            mov     a,#0xFC
01ED C0E0      1083            push    acc
01EF 747F      1084            mov     a,#0x7F
01F1 C0E0      1085            push    acc
01F3 7446      1086            mov     a,#0x46
01F5 C0E0      1087            push    acc
01F7 8A82      1088            mov     dpl,r2
01F9 8B83      1089            mov     dph,r3
01FB 8CF0      1090            mov     b,r4
01FD ED        1091            mov     a,r5
01FE 120000    1092            lcall   ___fsdiv
0201 AA82      1093            mov     r2,dpl
0203 AB83      1094            mov     r3,dph
0205 ACF0      1095            mov     r4,b
0207 FD        1096            mov     r5,a
0208 E581      1097            mov     a,sp
020A 24FC      1098            add     a,#0xfc
020C F581      1099            mov     sp,a
020E 8A82      1100            mov     dpl,r2
0210 8B83      1101            mov     dph,r3
0212 8CF0      1102            mov     b,r4
0214 ED        1103            mov     a,r5
0215 22        1104            ret
0216           1105   ;------------------------------------------------------------
0216           1106   ;Allocation info for local variables in function 'UART1_Init'
0216           1107   ;------------------------------------------------------------
0216           1108   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0216           1109   ;------------------------------------------------------------
0216           1110   ;        EFM8_JDY40_test.c:311: void UART1_Init (unsigned long baudrate)
0216           1111   ;        -----------------------------------------
0216           1112   ;         function UART1_Init
0216           1113   ;        -----------------------------------------
0216           1114   _UART1_Init:
0216 AA82      1115            mov     r2,dpl
0218 AB83      1116            mov     r3,dph
021A ACF0      1117            mov     r4,b
021C FD        1118            mov     r5,a
021D           1119   ;        EFM8_JDY40_test.c:313: SFRPAGE = 0x20;
021D 75A720    1120            mov     _SFRPAGE,#0x20
0220           1121   ;        EFM8_JDY40_test.c:314: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
0220 75930C    1122            mov     _SMOD1,#0x0C
0223           1123   ;        EFM8_JDY40_test.c:315: SCON1 = 0x10;
0223 75C810    1124            mov     _SCON1,#0x10
0226           1125   ;        EFM8_JDY40_test.c:316: SBCON1 =0x00;   // disable baud rate generator
0226 759400    1126            mov     _SBCON1,#0x00
0229           1127   ;        EFM8_JDY40_test.c:317: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
0229 8A00      1128            mov     __divulong_PARM_2,r2
022B 8B01      1129            mov     (__divulong_PARM_2 + 1),r3
022D 8C02      1130            mov     (__divulong_PARM_2 + 2),r4
022F 8D03      1131            mov     (__divulong_PARM_2 + 3),r5
0231 90A200    1132            mov     dptr,#0xA200
0234 75F04A    1133            mov     b,#0x4A
0237 7404      1134            mov     a,#0x04
0239 120000    1135            lcall   __divulong
023C AA82      1136            mov     r2,dpl
023E AB83      1137            mov     r3,dph
0240 ACF0      1138            mov     r4,b
0242 FD        1139            mov     r5,a
0243 750018    1140            mov     __divulong_PARM_2,#0x18
0246 E4        1141            clr     a
0247 F501      1142            mov     (__divulong_PARM_2 + 1),a
0249 F502      1143            mov     (__divulong_PARM_2 + 2),a
024B F503      1144            mov     (__divulong_PARM_2 + 3),a
024D 8A82      1145            mov     dpl,r2
024F 8B83      1146            mov     dph,r3
0251 8CF0      1147            mov     b,r4
0253 ED        1148            mov     a,r5
0254 120000    1149            lcall   __divulong
0257 AA82      1150            mov     r2,dpl
0259 AB83      1151            mov     r3,dph
025B ACF0      1152            mov     r4,b
025D FD        1153            mov     r5,a
025E E4        1154            clr     a
025F C3        1155            clr     c
0260 9A        1156            subb    a,r2
0261 FA        1157            mov     r2,a
0262 E4        1158            clr     a
0263 9B        1159            subb    a,r3
0264 FB        1160            mov     r3,a
0265 7401      1161            mov     a,#0x01
0267 9C        1162            subb    a,r4
0268 E4        1163            clr     a
0269 9D        1164            subb    a,r5
026A 8A95      1165            mov     _SBRL1,r2
026C 8B96      1166            mov     (_SBRL1 >> 8),r3
026E           1167   ;        EFM8_JDY40_test.c:318: TI1 = 1; // indicate ready for TX
026E D2C9      1168            setb    _TI1
0270           1169   ;        EFM8_JDY40_test.c:319: SBCON1 |= 0x40;   // enable baud rate generator
0270 439440    1170            orl     _SBCON1,#0x40
0273           1171   ;        EFM8_JDY40_test.c:320: SFRPAGE = 0x00;
0273 75A700    1172            mov     _SFRPAGE,#0x00
0276 22        1173            ret
0277           1174   ;------------------------------------------------------------
0277           1175   ;Allocation info for local variables in function 'putchar1'
0277           1176   ;------------------------------------------------------------
0277           1177   ;c                         Allocated to registers r2 
0277           1178   ;------------------------------------------------------------
0277           1179   ;        EFM8_JDY40_test.c:323: void putchar1 (char c) 
0277           1180   ;        -----------------------------------------
0277           1181   ;         function putchar1
0277           1182   ;        -----------------------------------------
0277           1183   _putchar1:
0277 AA82      1184            mov     r2,dpl
0279           1185   ;        EFM8_JDY40_test.c:325: SFRPAGE = 0x20;
0279 75A720    1186            mov     _SFRPAGE,#0x20
027C           1187   ;        EFM8_JDY40_test.c:326: while (!TI1);
027C           1188   L015001?:
027C           1189   ;        EFM8_JDY40_test.c:327: TI1=0;
027C 10C938    1190            jbc     _TI1,L015008?
027F 8000      1191            sjmp    L015001?
0281           1192   L015008?:
0281           1193   ;        EFM8_JDY40_test.c:328: SBUF1 = c;
0281 8A92      1194            mov     _SBUF1,r2
0283           1195   ;        EFM8_JDY40_test.c:329: SFRPAGE = 0x00;
0283 75A700    1196            mov     _SFRPAGE,#0x00
0286 22        1197            ret
0287           1198   ;------------------------------------------------------------
0287           1199   ;Allocation info for local variables in function 'sendstr1'
0287           1200   ;------------------------------------------------------------
0287           1201   ;s                         Allocated to registers r2 r3 r4 
0287           1202   ;------------------------------------------------------------
0287           1203   ;        EFM8_JDY40_test.c:332: void sendstr1 (char * s)
0287           1204   ;        -----------------------------------------
0287           1205   ;         function sendstr1
0287           1206   ;        -----------------------------------------
0287           1207   _sendstr1:
0287 AA82      1208            mov     r2,dpl
0289 AB83      1209            mov     r3,dph
028B ACF0      1210            mov     r4,b
028D           1211   ;        EFM8_JDY40_test.c:334: while(*s)
028D           1212   L016001?:
028D 8A82      1213            mov     dpl,r2
028F 8B83      1214            mov     dph,r3
0291 8CF0      1215            mov     b,r4
0293 120000    1216            lcall   __gptrget
0296 FD        1217            mov     r5,a
0297 6000      1218            jz      L016004?
0299           1219   ;        EFM8_JDY40_test.c:336: putchar1(*s);
0299 8D82      1220            mov     dpl,r5
029B C002      1221            push    ar2
029D C003      1222            push    ar3
029F C004      1223            push    ar4
02A1 120000    1224            lcall   _putchar1
02A4 D004      1225            pop     ar4
02A6 D003      1226            pop     ar3
02A8 D002      1227            pop     ar2
02AA           1228   ;        EFM8_JDY40_test.c:337: s++;     
02AA 0A        1229            inc     r2
02AB BA0078    1230            cjne    r2,#0x00,L016001?
02AE 0B        1231            inc     r3
02AF 8000      1232            sjmp    L016001?
02B1           1233   L016004?:
02B1 22        1234            ret
02B2           1235   ;------------------------------------------------------------
02B2           1236   ;Allocation info for local variables in function 'getchar1'
02B2           1237   ;------------------------------------------------------------
02B2           1238   ;c                         Allocated to registers 
02B2           1239   ;------------------------------------------------------------
02B2           1240   ;        EFM8_JDY40_test.c:341: char getchar1 (void)
02B2           1241   ;        -----------------------------------------
02B2           1242   ;         function getchar1
02B2           1243   ;        -----------------------------------------
02B2           1244   _getchar1:
02B2           1245   ;        EFM8_JDY40_test.c:344: SFRPAGE = 0x20;
02B2 75A720    1246            mov     _SFRPAGE,#0x20
02B5           1247   ;        EFM8_JDY40_test.c:345: while (!RI1);
02B5           1248   L017001?:
02B5           1249   ;        EFM8_JDY40_test.c:346: RI1=0;
02B5 10C878    1250            jbc     _RI1,L017008?
02B8 8000      1251            sjmp    L017001?
02BA           1252   L017008?:
02BA           1253   ;        EFM8_JDY40_test.c:348: SCON1&=0b_0011_1111;
02BA 53C83F    1254            anl     _SCON1,#0x3F
02BD           1255   ;        EFM8_JDY40_test.c:349: c = SBUF1;
02BD 859282    1256            mov     dpl,_SBUF1
02C0           1257   ;        EFM8_JDY40_test.c:350: SFRPAGE = 0x00;
02C0 75A700    1258            mov     _SFRPAGE,#0x00
02C3           1259   ;        EFM8_JDY40_test.c:351: return (c);
02C3 22        1260            ret
02C4           1261   ;------------------------------------------------------------
02C4           1262   ;Allocation info for local variables in function 'getchar1_with_timeout'
02C4           1263   ;------------------------------------------------------------
02C4           1264   ;c                         Allocated to registers 
02C4           1265   ;timeout                   Allocated to registers r2 r3 
02C4           1266   ;------------------------------------------------------------
02C4           1267   ;        EFM8_JDY40_test.c:354: char getchar1_with_timeout (void)
02C4           1268   ;        -----------------------------------------
02C4           1269   ;         function getchar1_with_timeout
02C4           1270   ;        -----------------------------------------
02C4           1271   _getchar1_with_timeout:
02C4           1272   ;        EFM8_JDY40_test.c:358: SFRPAGE = 0x20;
02C4 75A720    1273            mov     _SFRPAGE,#0x20
02C7           1274   ;        EFM8_JDY40_test.c:360: while (!RI1)
02C7 7A00      1275            mov     r2,#0x00
02C9 7B00      1276            mov     r3,#0x00
02CB           1277   L018003?:
02CB 20C8F8    1278            jb      _RI1,L018005?
02CE           1279   ;        EFM8_JDY40_test.c:362: SFRPAGE = 0x00;
02CE 75A700    1280            mov     _SFRPAGE,#0x00
02D1           1281   ;        EFM8_JDY40_test.c:363: Timer3us(20);
02D1 758214    1282            mov     dpl,#0x14
02D4 C002      1283            push    ar2
02D6 C003      1284            push    ar3
02D8 120000    1285            lcall   _Timer3us
02DB D003      1286            pop     ar3
02DD D002      1287            pop     ar2
02DF           1288   ;        EFM8_JDY40_test.c:364: SFRPAGE = 0x20;
02DF 75A720    1289            mov     _SFRPAGE,#0x20
02E2           1290   ;        EFM8_JDY40_test.c:365: timeout++;
02E2 0A        1291            inc     r2
02E3 BA0038    1292            cjne    r2,#0x00,L018012?
02E6 0B        1293            inc     r3
02E7           1294   L018012?:
02E7           1295   ;        EFM8_JDY40_test.c:366: if(timeout==25000)
02E7 BAA8B8    1296            cjne    r2,#0xA8,L018003?
02EA BB61B8    1297            cjne    r3,#0x61,L018003?
02ED           1298   ;        EFM8_JDY40_test.c:368: SFRPAGE = 0x00;
02ED 75A700    1299            mov     _SFRPAGE,#0x00
02F0           1300   ;        EFM8_JDY40_test.c:369: return ('\n'); // Timeout after half second
02F0 75820A    1301            mov     dpl,#0x0A
02F3 22        1302            ret
02F4           1303   L018005?:
02F4           1304   ;        EFM8_JDY40_test.c:372: RI1=0;
02F4 C2C8      1305            clr     _RI1
02F6           1306   ;        EFM8_JDY40_test.c:374: SCON1&=0b_0011_1111;
02F6 53C83F    1307            anl     _SCON1,#0x3F
02F9           1308   ;        EFM8_JDY40_test.c:375: c = SBUF1;
02F9 859282    1309            mov     dpl,_SBUF1
02FC           1310   ;        EFM8_JDY40_test.c:376: SFRPAGE = 0x00;
02FC 75A700    1311            mov     _SFRPAGE,#0x00
02FF           1312   ;        EFM8_JDY40_test.c:377: return (c);
02FF 22        1313            ret
0300           1314   ;------------------------------------------------------------
0300           1315   ;Allocation info for local variables in function 'getstr1'
0300           1316   ;------------------------------------------------------------
0300           1317   ;s                         Allocated to registers r2 r3 r4 
0300           1318   ;c                         Allocated to registers r5 
0300           1319   ;------------------------------------------------------------
0300           1320   ;        EFM8_JDY40_test.c:380: void getstr1 (char * s)
0300           1321   ;        -----------------------------------------
0300           1322   ;         function getstr1
0300           1323   ;        -----------------------------------------
0300           1324   _getstr1:
0300 AA82      1325            mov     r2,dpl
0302 AB83      1326            mov     r3,dph
0304 ACF0      1327            mov     r4,b
0306           1328   ;        EFM8_JDY40_test.c:384: while(1)
0306           1329   L019004?:
0306           1330   ;        EFM8_JDY40_test.c:386: c=getchar1_with_timeout();
0306 C002      1331            push    ar2
0308 C003      1332            push    ar3
030A C004      1333            push    ar4
030C 120000    1334            lcall   _getchar1_with_timeout
030F AD82      1335            mov     r5,dpl
0311 D004      1336            pop     ar4
0313 D003      1337            pop     ar3
0315 D002      1338            pop     ar2
0317           1339   ;        EFM8_JDY40_test.c:387: if(c=='\n')
0317 BD0AB8    1340            cjne    r5,#0x0A,L019002?
031A           1341   ;        EFM8_JDY40_test.c:389: *s= 0; //was 0
031A 8A82      1342            mov     dpl,r2
031C 8B83      1343            mov     dph,r3
031E 8CF0      1344            mov     b,r4
0320 E4        1345            clr     a
0321           1346   ;        EFM8_JDY40_test.c:390: return;
0321 020000    1347            ljmp    __gptrput
0324           1348   L019002?:
0324           1349   ;        EFM8_JDY40_test.c:392: *s=c;
0324 8A82      1350            mov     dpl,r2
0326 8B83      1351            mov     dph,r3
0328 8CF0      1352            mov     b,r4
032A ED        1353            mov     a,r5
032B 120000    1354            lcall   __gptrput
032E A3        1355            inc     dptr
032F AA82      1356            mov     r2,dpl
0331 AB83      1357            mov     r3,dph
0333           1358   ;        EFM8_JDY40_test.c:393: s++;
0333 8000      1359            sjmp    L019004?
0335           1360   ;------------------------------------------------------------
0335           1361   ;Allocation info for local variables in function 'RXU1'
0335           1362   ;------------------------------------------------------------
0335           1363   ;------------------------------------------------------------
0335           1364   ;        EFM8_JDY40_test.c:398: bit RXU1 (void)
0335           1365   ;        -----------------------------------------
0335           1366   ;         function RXU1
0335           1367   ;        -----------------------------------------
0335           1368   _RXU1:
0335           1369   ;        EFM8_JDY40_test.c:401: SFRPAGE = 0x20;
0335 75A720    1370            mov     _SFRPAGE,#0x20
0338           1371   ;        EFM8_JDY40_test.c:402: mybit=RI1;
0338 A2C8      1372            mov     c,_RI1
033A           1373   ;        EFM8_JDY40_test.c:403: SFRPAGE = 0x00;
033A 75A700    1374            mov     _SFRPAGE,#0x00
033D           1375   ;        EFM8_JDY40_test.c:404: return mybit;
033D 22        1376            ret
033E           1377   ;------------------------------------------------------------
033E           1378   ;Allocation info for local variables in function 'waitms_or_RI1'
033E           1379   ;------------------------------------------------------------
033E           1380   ;ms                        Allocated to registers r2 r3 
033E           1381   ;j                         Allocated to registers r4 r5 
033E           1382   ;k                         Allocated to registers r6 
033E           1383   ;------------------------------------------------------------
033E           1384   ;        EFM8_JDY40_test.c:407: void waitms_or_RI1 (unsigned int ms)
033E           1385   ;        -----------------------------------------
033E           1386   ;         function waitms_or_RI1
033E           1387   ;        -----------------------------------------
033E           1388   _waitms_or_RI1:
033E AA82      1389            mov     r2,dpl
0340 AB83      1390            mov     r3,dph
0342           1391   ;        EFM8_JDY40_test.c:411: for(j=0; j<ms; j++)
0342 7C00      1392            mov     r4,#0x00
0344 7D00      1393            mov     r5,#0x00
0346           1394   L021007?:
0346 C3        1395            clr     c
0347 EC        1396            mov     a,r4
0348 9A        1397            subb    a,r2
0349 ED        1398            mov     a,r5
034A 9B        1399            subb    a,r3
034B 5000      1400            jnc     L021011?
034D           1401   ;        EFM8_JDY40_test.c:413: for (k=0; k<4; k++)
034D 7E00      1402            mov     r6,#0x00
034F           1403   L021003?:
034F BE04F8    1404            cjne    r6,#0x04,L021019?
0352           1405   L021019?:
0352 5000      1406            jnc     L021009?
0354           1407   ;        EFM8_JDY40_test.c:415: if(RXU1()) return;
0354 C002      1408            push    ar2
0356 C003      1409            push    ar3
0358 C004      1410            push    ar4
035A C005      1411            push    ar5
035C C006      1412            push    ar6
035E 120000    1413            lcall   _RXU1
0361 E4        1414            clr     a
0362 33        1415            rlc     a
0363 D006      1416            pop     ar6
0365 D005      1417            pop     ar5
0367 D004      1418            pop     ar4
0369 D003      1419            pop     ar3
036B D002      1420            pop     ar2
036D 6000      1421            jz      L021002?
036F 22        1422            ret
0370           1423   L021002?:
0370           1424   ;        EFM8_JDY40_test.c:416: Timer3us(250);
0370 7582FA    1425            mov     dpl,#0xFA
0373 C002      1426            push    ar2
0375 C003      1427            push    ar3
0377 C004      1428            push    ar4
0379 C005      1429            push    ar5
037B C006      1430            push    ar6
037D 120000    1431            lcall   _Timer3us
0380 D006      1432            pop     ar6
0382 D005      1433            pop     ar5
0384 D004      1434            pop     ar4
0386 D003      1435            pop     ar3
0388 D002      1436            pop     ar2
038A           1437   ;        EFM8_JDY40_test.c:413: for (k=0; k<4; k++)
038A 0E        1438            inc     r6
038B 8000      1439            sjmp    L021003?
038D           1440   L021009?:
038D           1441   ;        EFM8_JDY40_test.c:411: for(j=0; j<ms; j++)
038D 0C        1442            inc     r4
038E BC0038    1443            cjne    r4,#0x00,L021007?
0391 0D        1444            inc     r5
0392 8000      1445            sjmp    L021007?
0394           1446   L021011?:
0394 22        1447            ret
0395           1448   ;------------------------------------------------------------
0395           1449   ;Allocation info for local variables in function 'SendATCommand'
0395           1450   ;------------------------------------------------------------
0395           1451   ;s                         Allocated to registers r2 r3 r4 
0395           1452   ;------------------------------------------------------------
0395           1453   ;        EFM8_JDY40_test.c:421: void SendATCommand (char * s)
0395           1454   ;        -----------------------------------------
0395           1455   ;         function SendATCommand
0395           1456   ;        -----------------------------------------
0395           1457   _SendATCommand:
0395 AA82      1458            mov     r2,dpl
0397 AB83      1459            mov     r3,dph
0399 ACF0      1460            mov     r4,b
039B           1461   ;        EFM8_JDY40_test.c:423: printf("Command: %s", s);
039B C002      1462            push    ar2
039D C003      1463            push    ar3
039F C004      1464            push    ar4
03A1 C002      1465            push    ar2
03A3 C003      1466            push    ar3
03A5 C004      1467            push    ar4
03A7 74B8      1468            mov     a,#__str_0
03A9 C0E0      1469            push    acc
03AB 74C6      1470            mov     a,#(__str_0 >> 8)
03AD C0E0      1471            push    acc
03AF 7480      1472            mov     a,#0x80
03B1 C0E0      1473            push    acc
03B3 120000    1474            lcall   _printf
03B6 E581      1475            mov     a,sp
03B8 24FA      1476            add     a,#0xfa
03BA F581      1477            mov     sp,a
03BC           1478   ;        EFM8_JDY40_test.c:424: P3_0=0; // 'set' pin to 0 is 'AT' mode.
03BC C2B0      1479            clr     _P3_0
03BE           1480   ;        EFM8_JDY40_test.c:425: waitms(5);
03BE 900005    1481            mov     dptr,#0x0005
03C1 120000    1482            lcall   _waitms
03C4 D004      1483            pop     ar4
03C6 D003      1484            pop     ar3
03C8 D002      1485            pop     ar2
03CA           1486   ;        EFM8_JDY40_test.c:426: sendstr1(s);
03CA 8A82      1487            mov     dpl,r2
03CC 8B83      1488            mov     dph,r3
03CE 8CF0      1489            mov     b,r4
03D0 120000    1490            lcall   _sendstr1
03D3           1491   ;        EFM8_JDY40_test.c:427: getstr1(buff);
03D3 904A68    1492            mov     dptr,#_buff
03D6 75F040    1493            mov     b,#0x40
03D9 120000    1494            lcall   _getstr1
03DC           1495   ;        EFM8_JDY40_test.c:428: waitms(10);
03DC 90000A    1496            mov     dptr,#0x000A
03DF 120000    1497            lcall   _waitms
03E2           1498   ;        EFM8_JDY40_test.c:429: P3_0=1; // 'set' pin to 1 is normal operation mode.
03E2 D2B0      1499            setb    _P3_0
03E4           1500   ;        EFM8_JDY40_test.c:430: printf("Response: %s\r\n", buff);
03E4 7468      1501            mov     a,#_buff
03E6 C0E0      1502            push    acc
03E8 744A      1503            mov     a,#(_buff >> 8)
03EA C0E0      1504            push    acc
03EC 7440      1505            mov     a,#0x40
03EE C0E0      1506            push    acc
03F0 7438      1507            mov     a,#__str_1
03F2 C0E0      1508            push    acc
03F4 74C7      1509            mov     a,#(__str_1 >> 8)
03F6 C0E0      1510            push    acc
03F8 7480      1511            mov     a,#0x80
03FA C0E0      1512            push    acc
03FC 120000    1513            lcall   _printf
03FF E581      1514            mov     a,sp
0401 24FA      1515            add     a,#0xfa
0403 F581      1516            mov     sp,a
0405 22        1517            ret
0406           1518   ;------------------------------------------------------------
0406           1519   ;Allocation info for local variables in function 'LCD_pulse'
0406           1520   ;------------------------------------------------------------
0406           1521   ;------------------------------------------------------------
0406           1522   ;        EFM8_JDY40_test.c:435: void LCD_pulse (void)
0406           1523   ;        -----------------------------------------
0406           1524   ;         function LCD_pulse
0406           1525   ;        -----------------------------------------
0406           1526   _LCD_pulse:
0406           1527   ;        EFM8_JDY40_test.c:437: LCD_E=1;
0406 D2A0      1528            setb    _P2_0
0408           1529   ;        EFM8_JDY40_test.c:438: Timer3us(40);
0408 758228    1530            mov     dpl,#0x28
040B 120000    1531            lcall   _Timer3us
040E           1532   ;        EFM8_JDY40_test.c:439: LCD_E=0;
040E C2A0      1533            clr     _P2_0
0410 22        1534            ret
0411           1535   ;------------------------------------------------------------
0411           1536   ;Allocation info for local variables in function 'LCD_byte'
0411           1537   ;------------------------------------------------------------
0411           1538   ;x                         Allocated to registers r2 
0411           1539   ;------------------------------------------------------------
0411           1540   ;        EFM8_JDY40_test.c:442: void LCD_byte (unsigned char x)
0411           1541   ;        -----------------------------------------
0411           1542   ;         function LCD_byte
0411           1543   ;        -----------------------------------------
0411           1544   _LCD_byte:
0411 AA82      1545            mov     r2,dpl
0413           1546   ;        EFM8_JDY40_test.c:445: ACC=x; //Send high nible
0413 8AE0      1547            mov     _ACC,r2
0415           1548   ;        EFM8_JDY40_test.c:446: LCD_D7=ACC_7;
0415 A2E7      1549            mov     c,_ACC_7
0417 9290      1550            mov     _P1_0,c
0419           1551   ;        EFM8_JDY40_test.c:447: LCD_D6=ACC_6;
0419 A2E6      1552            mov     c,_ACC_6
041B 9291      1553            mov     _P1_1,c
041D           1554   ;        EFM8_JDY40_test.c:448: LCD_D5=ACC_5;
041D A2E5      1555            mov     c,_ACC_5
041F 9292      1556            mov     _P1_2,c
0421           1557   ;        EFM8_JDY40_test.c:449: LCD_D4=ACC_4;
0421 A2E4      1558            mov     c,_ACC_4
0423 9293      1559            mov     _P1_3,c
0425           1560   ;        EFM8_JDY40_test.c:450: LCD_pulse();
0425 C002      1561            push    ar2
0427 120000    1562            lcall   _LCD_pulse
042A           1563   ;        EFM8_JDY40_test.c:451: Timer3us(40);
042A 758228    1564            mov     dpl,#0x28
042D 120000    1565            lcall   _Timer3us
0430 D002      1566            pop     ar2
0432           1567   ;        EFM8_JDY40_test.c:452: ACC=x; //Send low nible
0432 8AE0      1568            mov     _ACC,r2
0434           1569   ;        EFM8_JDY40_test.c:453: LCD_D7=ACC_3;
0434 A2E3      1570            mov     c,_ACC_3
0436 9290      1571            mov     _P1_0,c
0438           1572   ;        EFM8_JDY40_test.c:454: LCD_D6=ACC_2;
0438 A2E2      1573            mov     c,_ACC_2
043A 9291      1574            mov     _P1_1,c
043C           1575   ;        EFM8_JDY40_test.c:455: LCD_D5=ACC_1;
043C A2E1      1576            mov     c,_ACC_1
043E 9292      1577            mov     _P1_2,c
0440           1578   ;        EFM8_JDY40_test.c:456: LCD_D4=ACC_0;
0440 A2E0      1579            mov     c,_ACC_0
0442 9293      1580            mov     _P1_3,c
0444           1581   ;        EFM8_JDY40_test.c:457: LCD_pulse();
0444 020000    1582            ljmp    _LCD_pulse
0447           1583   ;------------------------------------------------------------
0447           1584   ;Allocation info for local variables in function 'speaker_pulse'
0447           1585   ;------------------------------------------------------------
0447           1586   ;------------------------------------------------------------
0447           1587   ;        EFM8_JDY40_test.c:460: void speaker_pulse(void) 
0447           1588   ;        -----------------------------------------
0447           1589   ;         function speaker_pulse
0447           1590   ;        -----------------------------------------
0447           1591   _speaker_pulse:
0447           1592   ;        EFM8_JDY40_test.c:462: METAL_DECTECT = 0;
0447 C2B4      1593            clr     _P3_4
0449           1594   ;        EFM8_JDY40_test.c:463: waitms(10);
0449 90000A    1595            mov     dptr,#0x000A
044C 120000    1596            lcall   _waitms
044F           1597   ;        EFM8_JDY40_test.c:464: METAL_DECTECT = 1;
044F D2B4      1598            setb    _P3_4
0451 22        1599            ret
0452           1600   ;------------------------------------------------------------
0452           1601   ;Allocation info for local variables in function 'WriteData'
0452           1602   ;------------------------------------------------------------
0452           1603   ;x                         Allocated to registers r2 
0452           1604   ;------------------------------------------------------------
0452           1605   ;        EFM8_JDY40_test.c:467: void WriteData (unsigned char x)
0452           1606   ;        -----------------------------------------
0452           1607   ;         function WriteData
0452           1608   ;        -----------------------------------------
0452           1609   _WriteData:
0452 AA82      1610            mov     r2,dpl
0454           1611   ;        EFM8_JDY40_test.c:469: LCD_RS=1;
0454 D297      1612            setb    _P1_7
0456           1613   ;        EFM8_JDY40_test.c:470: LCD_byte(x);
0456 8A82      1614            mov     dpl,r2
0458 120000    1615            lcall   _LCD_byte
045B           1616   ;        EFM8_JDY40_test.c:471: waitms(2);
045B 900002    1617            mov     dptr,#0x0002
045E 020000    1618            ljmp    _waitms
0461           1619   ;------------------------------------------------------------
0461           1620   ;Allocation info for local variables in function 'WriteCommand'
0461           1621   ;------------------------------------------------------------
0461           1622   ;x                         Allocated to registers r2 
0461           1623   ;------------------------------------------------------------
0461           1624   ;        EFM8_JDY40_test.c:474: void WriteCommand (unsigned char x)
0461           1625   ;        -----------------------------------------
0461           1626   ;         function WriteCommand
0461           1627   ;        -----------------------------------------
0461           1628   _WriteCommand:
0461 AA82      1629            mov     r2,dpl
0463           1630   ;        EFM8_JDY40_test.c:476: LCD_RS=0;
0463 C297      1631            clr     _P1_7
0465           1632   ;        EFM8_JDY40_test.c:477: LCD_byte(x);
0465 8A82      1633            mov     dpl,r2
0467 120000    1634            lcall   _LCD_byte
046A           1635   ;        EFM8_JDY40_test.c:478: waitms(5);
046A 900005    1636            mov     dptr,#0x0005
046D 020000    1637            ljmp    _waitms
0470           1638   ;------------------------------------------------------------
0470           1639   ;Allocation info for local variables in function 'LCD_4BIT'
0470           1640   ;------------------------------------------------------------
0470           1641   ;------------------------------------------------------------
0470           1642   ;        EFM8_JDY40_test.c:481: void LCD_4BIT (void)
0470           1643   ;        -----------------------------------------
0470           1644   ;         function LCD_4BIT
0470           1645   ;        -----------------------------------------
0470           1646   _LCD_4BIT:
0470           1647   ;        EFM8_JDY40_test.c:483: LCD_E=0; // Resting state of LCD's enable is zero
0470 C2A0      1648            clr     _P2_0
0472           1649   ;        EFM8_JDY40_test.c:485: waitms(20);
0472 900014    1650            mov     dptr,#0x0014
0475 120000    1651            lcall   _waitms
0478           1652   ;        EFM8_JDY40_test.c:487: WriteCommand(0x33);
0478 758233    1653            mov     dpl,#0x33
047B 120000    1654            lcall   _WriteCommand
047E           1655   ;        EFM8_JDY40_test.c:488: WriteCommand(0x33);
047E 758233    1656            mov     dpl,#0x33
0481 120000    1657            lcall   _WriteCommand
0484           1658   ;        EFM8_JDY40_test.c:489: WriteCommand(0x32); // Change to 4-bit mode
0484 758232    1659            mov     dpl,#0x32
0487 120000    1660            lcall   _WriteCommand
048A           1661   ;        EFM8_JDY40_test.c:492: WriteCommand(0x28);
048A 758228    1662            mov     dpl,#0x28
048D 120000    1663            lcall   _WriteCommand
0490           1664   ;        EFM8_JDY40_test.c:493: WriteCommand(0x0c);
0490 75820C    1665            mov     dpl,#0x0C
0493 120000    1666            lcall   _WriteCommand
0496           1667   ;        EFM8_JDY40_test.c:494: WriteCommand(0x01); // Clear screen command (takes some time)
0496 758201    1668            mov     dpl,#0x01
0499 120000    1669            lcall   _WriteCommand
049C           1670   ;        EFM8_JDY40_test.c:495: waitms(20); // Wait for clear screen command to finsih.
049C 900014    1671            mov     dptr,#0x0014
049F 020000    1672            ljmp    _waitms
04A2           1673   ;------------------------------------------------------------
04A2           1674   ;Allocation info for local variables in function 'LCDprint'
04A2           1675   ;------------------------------------------------------------
04A2           1676   ;line                      Allocated with name '_LCDprint_PARM_2'
04A2           1677   ;string                    Allocated to registers r2 r3 r4 
04A2           1678   ;j                         Allocated to registers r5 r6 
04A2           1679   ;------------------------------------------------------------
04A2           1680   ;        EFM8_JDY40_test.c:498: void LCDprint(char * string, unsigned char line, bit clear)
04A2           1681   ;        -----------------------------------------
04A2           1682   ;         function LCDprint
04A2           1683   ;        -----------------------------------------
04A2           1684   _LCDprint:
04A2 AA82      1685            mov     r2,dpl
04A4 AB83      1686            mov     r3,dph
04A6 ACF0      1687            mov     r4,b
04A8           1688   ;        EFM8_JDY40_test.c:502: WriteCommand(line==2?0xc0:0x80);
04A8 7402      1689            mov     a,#0x02
04AA B5F878    1690            cjne    a,_LCDprint_PARM_2,L029013?
04AD 7DC0      1691            mov     r5,#0xC0
04AF 8000      1692            sjmp    L029014?
04B1           1693   L029013?:
04B1 7D80      1694            mov     r5,#0x80
04B3           1695   L029014?:
04B3 8D82      1696            mov     dpl,r5
04B5 C002      1697            push    ar2
04B7 C003      1698            push    ar3
04B9 C004      1699            push    ar4
04BB 120000    1700            lcall   _WriteCommand
04BE           1701   ;        EFM8_JDY40_test.c:503: waitms(5);
04BE 900005    1702            mov     dptr,#0x0005
04C1 120000    1703            lcall   _waitms
04C4 D004      1704            pop     ar4
04C6 D003      1705            pop     ar3
04C8 D002      1706            pop     ar2
04CA           1707   ;        EFM8_JDY40_test.c:504: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
04CA 7D00      1708            mov     r5,#0x00
04CC 7E00      1709            mov     r6,#0x00
04CE           1710   L029003?:
04CE ED        1711            mov     a,r5
04CF 2A        1712            add     a,r2
04D0 FF        1713            mov     r7,a
04D1 EE        1714            mov     a,r6
04D2 3B        1715            addc    a,r3
04D3 F8        1716            mov     r0,a
04D4 8C01      1717            mov     ar1,r4
04D6 8F82      1718            mov     dpl,r7
04D8 8883      1719            mov     dph,r0
04DA 89F0      1720            mov     b,r1
04DC 120000    1721            lcall   __gptrget
04DF FF        1722            mov     r7,a
04E0 6000      1723            jz      L029006?
04E2 8F82      1724            mov     dpl,r7
04E4 C002      1725            push    ar2
04E6 C003      1726            push    ar3
04E8 C004      1727            push    ar4
04EA C005      1728            push    ar5
04EC C006      1729            push    ar6
04EE 120000    1730            lcall   _WriteData
04F1 D006      1731            pop     ar6
04F3 D005      1732            pop     ar5
04F5 D004      1733            pop     ar4
04F7 D003      1734            pop     ar3
04F9 D002      1735            pop     ar2
04FB 0D        1736            inc     r5
04FC BD00F8    1737            cjne    r5,#0x00,L029003?
04FF 0E        1738            inc     r6
0500 8000      1739            sjmp    L029003?
0502           1740   L029006?:
0502           1741   ;        EFM8_JDY40_test.c:505: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0502 302878    1742            jnb     _LCDprint_PARM_3,L029011?
0505 8D02      1743            mov     ar2,r5
0507 8E03      1744            mov     ar3,r6
0509           1745   L029007?:
0509 C3        1746            clr     c
050A EA        1747            mov     a,r2
050B 9410      1748            subb    a,#0x10
050D EB        1749            mov     a,r3
050E 6480      1750            xrl     a,#0x80
0510 9480      1751            subb    a,#0x80
0512 5000      1752            jnc     L029011?
0514 758220    1753            mov     dpl,#0x20
0517 C002      1754            push    ar2
0519 C003      1755            push    ar3
051B 120000    1756            lcall   _WriteData
051E D003      1757            pop     ar3
0520 D002      1758            pop     ar2
0522 0A        1759            inc     r2
0523 BA00B8    1760            cjne    r2,#0x00,L029007?
0526 0B        1761            inc     r3
0527 8000      1762            sjmp    L029007?
0529           1763   L029011?:
0529 22        1764            ret
052A           1765   ;------------------------------------------------------------
052A           1766   ;Allocation info for local variables in function 'LCDprint2'
052A           1767   ;------------------------------------------------------------
052A           1768   ;line                      Allocated with name '_LCDprint2_PARM_2'
052A           1769   ;col                       Allocated with name '_LCDprint2_PARM_3'
052A           1770   ;string                    Allocated to registers r2 r3 r4 
052A           1771   ;j                         Allocated to registers r5 r6 
052A           1772   ;------------------------------------------------------------
052A           1773   ;        EFM8_JDY40_test.c:508: void LCDprint2(char * string, unsigned char line, unsigned char col)
052A           1774   ;        -----------------------------------------
052A           1775   ;         function LCDprint2
052A           1776   ;        -----------------------------------------
052A           1777   _LCDprint2:
052A AA82      1778            mov     r2,dpl
052C AB83      1779            mov     r3,dph
052E ACF0      1780            mov     r4,b
0530           1781   ;        EFM8_JDY40_test.c:512: WriteCommand(line==2?0xc0|col:0x80|col); // Move cursor to line and column
0530 7402      1782            mov     a,#0x02
0532 B5A8F8    1783            cjne    a,_LCDprint2_PARM_2,L030007?
0535 74C0      1784            mov     a,#0xC0
0537 4558      1785            orl     a,_LCDprint2_PARM_3
0539 FD        1786            mov     r5,a
053A 8000      1787            sjmp    L030008?
053C           1788   L030007?:
053C 7480      1789            mov     a,#0x80
053E 4558      1790            orl     a,_LCDprint2_PARM_3
0540 FD        1791            mov     r5,a
0541           1792   L030008?:
0541 8D82      1793            mov     dpl,r5
0543 C002      1794            push    ar2
0545 C003      1795            push    ar3
0547 C004      1796            push    ar4
0549 120000    1797            lcall   _WriteCommand
054C D004      1798            pop     ar4
054E D003      1799            pop     ar3
0550 D002      1800            pop     ar2
0552           1801   ;        EFM8_JDY40_test.c:513: for(j=0; string[j]!=0; j++) WriteData(string[j]); // Write the message
0552 7D00      1802            mov     r5,#0x00
0554 7E00      1803            mov     r6,#0x00
0556           1804   L030001?:
0556 ED        1805            mov     a,r5
0557 2A        1806            add     a,r2
0558 FF        1807            mov     r7,a
0559 EE        1808            mov     a,r6
055A 3B        1809            addc    a,r3
055B F8        1810            mov     r0,a
055C 8C01      1811            mov     ar1,r4
055E 8F82      1812            mov     dpl,r7
0560 8883      1813            mov     dph,r0
0562 89F0      1814            mov     b,r1
0564 120000    1815            lcall   __gptrget
0567 FF        1816            mov     r7,a
0568 6000      1817            jz      L030005?
056A 8F82      1818            mov     dpl,r7
056C C002      1819            push    ar2
056E C003      1820            push    ar3
0570 C004      1821            push    ar4
0572 C005      1822            push    ar5
0574 C006      1823            push    ar6
0576 120000    1824            lcall   _WriteData
0579 D006      1825            pop     ar6
057B D005      1826            pop     ar5
057D D004      1827            pop     ar4
057F D003      1828            pop     ar3
0581 D002      1829            pop     ar2
0583 0D        1830            inc     r5
0584 BD0078    1831            cjne    r5,#0x00,L030001?
0587 0E        1832            inc     r6
0588 8000      1833            sjmp    L030001?
058A           1834   L030005?:
058A 22        1835            ret
058B           1836   ;------------------------------------------------------------
058B           1837   ;Allocation info for local variables in function 'thefastestsprintf'
058B           1838   ;------------------------------------------------------------
058B           1839   ;str                       Allocated with name '_thefastestsprintf_PARM_2'
058B           1840   ;index                     Allocated with name '_thefastestsprintf_PARM_3'
058B           1841   ;num                       Allocated with name '_thefastestsprintf_num_1_129'
058B           1842   ;i                         Allocated with name '_thefastestsprintf_i_1_130'
058B           1843   ;------------------------------------------------------------
058B           1844   ;        EFM8_JDY40_test.c:516: void thefastestsprintf (int num, char str[], int index) {
058B           1845   ;        -----------------------------------------
058B           1846   ;         function thefastestsprintf
058B           1847   ;        -----------------------------------------
058B           1848   _thefastestsprintf:
058B 858210    1849            mov     _thefastestsprintf_num_1_129,dpl
058E 858311    1850            mov     (_thefastestsprintf_num_1_129 + 1),dph
0591           1851   ;        EFM8_JDY40_test.c:519: str[index] = '\0';
0591 E5B8      1852            mov     a,_thefastestsprintf_PARM_3
0593 2508      1853            add     a,_thefastestsprintf_PARM_2
0595 FC        1854            mov     r4,a
0596 E5B9      1855            mov     a,(_thefastestsprintf_PARM_3 + 1)
0598 3509      1856            addc    a,(_thefastestsprintf_PARM_2 + 1)
059A FD        1857            mov     r5,a
059B AE0A      1858            mov     r6,(_thefastestsprintf_PARM_2 + 2)
059D 8C82      1859            mov     dpl,r4
059F 8D83      1860            mov     dph,r5
05A1 8EF0      1861            mov     b,r6
05A3 E4        1862            clr     a
05A4 120000    1863            lcall   __gptrput
05A7           1864   ;        EFM8_JDY40_test.c:521: for (i = 3; i > 0; i--) {
05A7 756003    1865            mov     _thefastestsprintf_i_1_130,#0x03
05AA E4        1866            clr     a
05AB F561      1867            mov     (_thefastestsprintf_i_1_130 + 1),a
05AD           1868   L031001?:
05AD C3        1869            clr     c
05AE E4        1870            clr     a
05AF 9560      1871            subb    a,_thefastestsprintf_i_1_130
05B1 E4        1872            clr     a
05B2 6480      1873            xrl     a,#0x80
05B4 8561F0    1874            mov     b,(_thefastestsprintf_i_1_130 + 1)
05B7 63F080    1875            xrl     b,#0x80
05BA 95F0      1876            subb    a,b
05BC 5000      1877            jnc     L031004?
05BE           1878   ;        EFM8_JDY40_test.c:522: str[index -1] = num % 10 + '0';
05BE E5B8      1879            mov     a,_thefastestsprintf_PARM_3
05C0 24FF      1880            add     a,#0xff
05C2 FE        1881            mov     r6,a
05C3 E5B9      1882            mov     a,(_thefastestsprintf_PARM_3 + 1)
05C5 34FF      1883            addc    a,#0xff
05C7 FF        1884            mov     r7,a
05C8 EE        1885            mov     a,r6
05C9 2508      1886            add     a,_thefastestsprintf_PARM_2
05CB F8        1887            mov     r0,a
05CC EF        1888            mov     a,r7
05CD 3509      1889            addc    a,(_thefastestsprintf_PARM_2 + 1)
05CF F9        1890            mov     r1,a
05D0 AC0A      1891            mov     r4,(_thefastestsprintf_PARM_2 + 2)
05D2 75000A    1892            mov     __modsint_PARM_2,#0x0A
05D5 E4        1893            clr     a
05D6 F501      1894            mov     (__modsint_PARM_2 + 1),a
05D8 851082    1895            mov     dpl,_thefastestsprintf_num_1_129
05DB 851183    1896            mov     dph,(_thefastestsprintf_num_1_129 + 1)
05DE C004      1897            push    ar4
05E0 C006      1898            push    ar6
05E2 C007      1899            push    ar7
05E4 C000      1900            push    ar0
05E6 C001      1901            push    ar1
05E8 120000    1902            lcall   __modsint
05EB AD82      1903            mov     r5,dpl
05ED D001      1904            pop     ar1
05EF D000      1905            pop     ar0
05F1 D007      1906            pop     ar7
05F3 D006      1907            pop     ar6
05F5 D004      1908            pop     ar4
05F7 7430      1909            mov     a,#0x30
05F9 2D        1910            add     a,r5
05FA 8882      1911            mov     dpl,r0
05FC 8983      1912            mov     dph,r1
05FE 8CF0      1913            mov     b,r4
0600 120000    1914            lcall   __gptrput
0603           1915   ;        EFM8_JDY40_test.c:523: num/=10;
0603 75000A    1916            mov     __divsint_PARM_2,#0x0A
0606 E4        1917            clr     a
0607 F501      1918            mov     (__divsint_PARM_2 + 1),a
0609 851082    1919            mov     dpl,_thefastestsprintf_num_1_129
060C 851183    1920            mov     dph,(_thefastestsprintf_num_1_129 + 1)
060F C006      1921            push    ar6
0611 C007      1922            push    ar7
0613 120000    1923            lcall   __divsint
0616 858210    1924            mov     _thefastestsprintf_num_1_129,dpl
0619 858311    1925            mov     (_thefastestsprintf_num_1_129 + 1),dph
061C D007      1926            pop     ar7
061E D006      1927            pop     ar6
0620           1928   ;        EFM8_JDY40_test.c:524: index--;
0620 8EB8      1929            mov     _thefastestsprintf_PARM_3,r6
0622 8FB9      1930            mov     (_thefastestsprintf_PARM_3 + 1),r7
0624           1931   ;        EFM8_JDY40_test.c:521: for (i = 3; i > 0; i--) {
0624 1560      1932            dec     _thefastestsprintf_i_1_130
0626 74FF      1933            mov     a,#0xff
0628 B56098    1934            cjne    a,_thefastestsprintf_i_1_130,L031011?
062B 1561      1935            dec     (_thefastestsprintf_i_1_130 + 1)
062D           1936   L031011?:
062D 020000    1937            ljmp    L031001?
0630           1938   L031004?:
0630           1939   ;        EFM8_JDY40_test.c:527: return;
0630 22        1940            ret
0631           1941   ;------------------------------------------------------------
0631           1942   ;Allocation info for local variables in function 'LCD_build_left'
0631           1943   ;------------------------------------------------------------
0631           1944   ;------------------------------------------------------------
0631           1945   ;        EFM8_JDY40_test.c:541: void LCD_build_left(void){
0631           1946   ;        -----------------------------------------
0631           1947   ;         function LCD_build_left
0631           1948   ;        -----------------------------------------
0631           1949   _LCD_build_left:
0631           1950   ;        EFM8_JDY40_test.c:542: WriteCommand(0x48);       //Load the location where we want to store
0631 758248    1951            mov     dpl,#0x48
0634 120000    1952            lcall   _WriteCommand
0637           1953   ;        EFM8_JDY40_test.c:543: WriteData(0x1f);      //Load row 1 data
0637 75821F    1954            mov     dpl,#0x1F
063A 120000    1955            lcall   _WriteData
063D           1956   ;        EFM8_JDY40_test.c:544: WriteData(0x10);      //Load row 2 data
063D 758210    1957            mov     dpl,#0x10
0640 120000    1958            lcall   _WriteData
0643           1959   ;        EFM8_JDY40_test.c:545: WriteData(0x13);      //Load row 3 data
0643 758213    1960            mov     dpl,#0x13
0646 120000    1961            lcall   _WriteData
0649           1962   ;        EFM8_JDY40_test.c:546: WriteData(0x17);      //Load row 4 data
0649 758217    1963            mov     dpl,#0x17
064C 120000    1964            lcall   _WriteData
064F           1965   ;        EFM8_JDY40_test.c:547: WriteData(0x17);      //Load row 5 data
064F 758217    1966            mov     dpl,#0x17
0652 120000    1967            lcall   _WriteData
0655           1968   ;        EFM8_JDY40_test.c:548: WriteData(0x13);      //Load row 6 data
0655 758213    1969            mov     dpl,#0x13
0658 120000    1970            lcall   _WriteData
065B           1971   ;        EFM8_JDY40_test.c:549: WriteData(0x10);      //Load row 7 data
065B 758210    1972            mov     dpl,#0x10
065E 120000    1973            lcall   _WriteData
0661           1974   ;        EFM8_JDY40_test.c:550: WriteData(0x1f);      //Load row 8 data
0661 75821F    1975            mov     dpl,#0x1F
0664 020000    1976            ljmp    _WriteData
0667           1977   ;------------------------------------------------------------
0667           1978   ;Allocation info for local variables in function 'LCD_build_right'
0667           1979   ;------------------------------------------------------------
0667           1980   ;------------------------------------------------------------
0667           1981   ;        EFM8_JDY40_test.c:553: void LCD_build_right(void){
0667           1982   ;        -----------------------------------------
0667           1983   ;         function LCD_build_right
0667           1984   ;        -----------------------------------------
0667           1985   _LCD_build_right:
0667           1986   ;        EFM8_JDY40_test.c:554: WriteCommand(0x50);       //Load the location where we want to store
0667 758250    1987            mov     dpl,#0x50
066A 120000    1988            lcall   _WriteCommand
066D           1989   ;        EFM8_JDY40_test.c:555: WriteData(0x1f);      //Load row 1 data
066D 75821F    1990            mov     dpl,#0x1F
0670 120000    1991            lcall   _WriteData
0673           1992   ;        EFM8_JDY40_test.c:556: WriteData(0x1);      //Load row 2 data
0673 758201    1993            mov     dpl,#0x01
0676 120000    1994            lcall   _WriteData
0679           1995   ;        EFM8_JDY40_test.c:557: WriteData(0x1d);      //Load row 3 data
0679 75821D    1996            mov     dpl,#0x1D
067C 120000    1997            lcall   _WriteData
067F           1998   ;        EFM8_JDY40_test.c:558: WriteData(0x1d);      //Load row 4 data
067F 75821D    1999            mov     dpl,#0x1D
0682 120000    2000            lcall   _WriteData
0685           2001   ;        EFM8_JDY40_test.c:559: WriteData(0x1d);      //Load row 5 data
0685 75821D    2002            mov     dpl,#0x1D
0688 120000    2003            lcall   _WriteData
068B           2004   ;        EFM8_JDY40_test.c:560: WriteData(0x1d);      //Load row 6 data
068B 75821D    2005            mov     dpl,#0x1D
068E 120000    2006            lcall   _WriteData
0691           2007   ;        EFM8_JDY40_test.c:561: WriteData(0x1);      //Load row 7 data
0691 758201    2008            mov     dpl,#0x01
0694 120000    2009            lcall   _WriteData
0697           2010   ;        EFM8_JDY40_test.c:562: WriteData(0x1f);      //Load row 8 data
0697 75821F    2011            mov     dpl,#0x1F
069A 020000    2012            ljmp    _WriteData
069D           2013   ;------------------------------------------------------------
069D           2014   ;Allocation info for local variables in function 'LCD_build_mid'
069D           2015   ;------------------------------------------------------------
069D           2016   ;------------------------------------------------------------
069D           2017   ;        EFM8_JDY40_test.c:566: void LCD_build_mid(void){
069D           2018   ;        -----------------------------------------
069D           2019   ;         function LCD_build_mid
069D           2020   ;        -----------------------------------------
069D           2021   _LCD_build_mid:
069D           2022   ;        EFM8_JDY40_test.c:567: WriteCommand(0x58);       //Load the location where we want to store
069D 758258    2023            mov     dpl,#0x58
06A0 120000    2024            lcall   _WriteCommand
06A3           2025   ;        EFM8_JDY40_test.c:568: WriteData(0x1f);      //Load row 1 data
06A3 75821F    2026            mov     dpl,#0x1F
06A6 120000    2027            lcall   _WriteData
06A9           2028   ;        EFM8_JDY40_test.c:569: WriteData(0x0);      //Load row 2 data
06A9 758200    2029            mov     dpl,#0x00
06AC 120000    2030            lcall   _WriteData
06AF           2031   ;        EFM8_JDY40_test.c:570: WriteData(0x1f);      //Load row 3 data
06AF 75821F    2032            mov     dpl,#0x1F
06B2 120000    2033            lcall   _WriteData
06B5           2034   ;        EFM8_JDY40_test.c:571: WriteData(0x1f);      //Load row 4 data
06B5 75821F    2035            mov     dpl,#0x1F
06B8 120000    2036            lcall   _WriteData
06BB           2037   ;        EFM8_JDY40_test.c:572: WriteData(0x1f);      //Load row 5 data
06BB 75821F    2038            mov     dpl,#0x1F
06BE 120000    2039            lcall   _WriteData
06C1           2040   ;        EFM8_JDY40_test.c:573: WriteData(0x1f);      //Load row 6 data
06C1 75821F    2041            mov     dpl,#0x1F
06C4 120000    2042            lcall   _WriteData
06C7           2043   ;        EFM8_JDY40_test.c:574: WriteData(0x0);      //Load row 7 data
06C7 758200    2044            mov     dpl,#0x00
06CA 120000    2045            lcall   _WriteData
06CD           2046   ;        EFM8_JDY40_test.c:575: WriteData(0x1f);      //Load row 8 data
06CD 75821F    2047            mov     dpl,#0x1F
06D0 020000    2048            ljmp    _WriteData
06D3           2049   ;------------------------------------------------------------
06D3           2050   ;Allocation info for local variables in function 'LCD_build_left_empty'
06D3           2051   ;------------------------------------------------------------
06D3           2052   ;------------------------------------------------------------
06D3           2053   ;        EFM8_JDY40_test.c:578: void LCD_build_left_empty(void){
06D3           2054   ;        -----------------------------------------
06D3           2055   ;         function LCD_build_left_empty
06D3           2056   ;        -----------------------------------------
06D3           2057   _LCD_build_left_empty:
06D3           2058   ;        EFM8_JDY40_test.c:579: WriteCommand(0x60);       //Load the location where we want to store
06D3 758260    2059            mov     dpl,#0x60
06D6 120000    2060            lcall   _WriteCommand
06D9           2061   ;        EFM8_JDY40_test.c:580: WriteData(0x1f);      //Load row 1 data
06D9 75821F    2062            mov     dpl,#0x1F
06DC 120000    2063            lcall   _WriteData
06DF           2064   ;        EFM8_JDY40_test.c:581: WriteData(0x10);      //Load row 2 data
06DF 758210    2065            mov     dpl,#0x10
06E2 120000    2066            lcall   _WriteData
06E5           2067   ;        EFM8_JDY40_test.c:582: WriteData(0x10);      //Load row 3 data
06E5 758210    2068            mov     dpl,#0x10
06E8 120000    2069            lcall   _WriteData
06EB           2070   ;        EFM8_JDY40_test.c:583: WriteData(0x10);      //Load row 4 data
06EB 758210    2071            mov     dpl,#0x10
06EE 120000    2072            lcall   _WriteData
06F1           2073   ;        EFM8_JDY40_test.c:584: WriteData(0x10);      //Load row 5 data
06F1 758210    2074            mov     dpl,#0x10
06F4 120000    2075            lcall   _WriteData
06F7           2076   ;        EFM8_JDY40_test.c:585: WriteData(0x10);      //Load row 6 data
06F7 758210    2077            mov     dpl,#0x10
06FA 120000    2078            lcall   _WriteData
06FD           2079   ;        EFM8_JDY40_test.c:586: WriteData(0x10);      //Load row 7 data
06FD 758210    2080            mov     dpl,#0x10
0700 120000    2081            lcall   _WriteData
0703           2082   ;        EFM8_JDY40_test.c:587: WriteData(0x1f);      //Load row 8 data
0703 75821F    2083            mov     dpl,#0x1F
0706 020000    2084            ljmp    _WriteData
0709           2085   ;------------------------------------------------------------
0709           2086   ;Allocation info for local variables in function 'LCD_build_mid_empty'
0709           2087   ;------------------------------------------------------------
0709           2088   ;------------------------------------------------------------
0709           2089   ;        EFM8_JDY40_test.c:590: void LCD_build_mid_empty(void){
0709           2090   ;        -----------------------------------------
0709           2091   ;         function LCD_build_mid_empty
0709           2092   ;        -----------------------------------------
0709           2093   _LCD_build_mid_empty:
0709           2094   ;        EFM8_JDY40_test.c:591: WriteCommand(0x68);       //Load the location where we want to store
0709 758268    2095            mov     dpl,#0x68
070C 120000    2096            lcall   _WriteCommand
070F           2097   ;        EFM8_JDY40_test.c:592: WriteData(0x1f);      //Load row 1 data
070F 75821F    2098            mov     dpl,#0x1F
0712 120000    2099            lcall   _WriteData
0715           2100   ;        EFM8_JDY40_test.c:593: WriteData(0x10);      //Load row 2 data
0715 758210    2101            mov     dpl,#0x10
0718 120000    2102            lcall   _WriteData
071B           2103   ;        EFM8_JDY40_test.c:594: WriteData(0x00);      //Load row 3 data
071B 758200    2104            mov     dpl,#0x00
071E 120000    2105            lcall   _WriteData
0721           2106   ;        EFM8_JDY40_test.c:595: WriteData(0x00);      //Load row 4 data
0721 758200    2107            mov     dpl,#0x00
0724 120000    2108            lcall   _WriteData
0727           2109   ;        EFM8_JDY40_test.c:596: WriteData(0x00);      //Load row 5 data
0727 758200    2110            mov     dpl,#0x00
072A 120000    2111            lcall   _WriteData
072D           2112   ;        EFM8_JDY40_test.c:597: WriteData(0x00);      //Load row 6 data
072D 758200    2113            mov     dpl,#0x00
0730 120000    2114            lcall   _WriteData
0733           2115   ;        EFM8_JDY40_test.c:598: WriteData(0x00);      //Load row 7 data
0733 758200    2116            mov     dpl,#0x00
0736 120000    2117            lcall   _WriteData
0739           2118   ;        EFM8_JDY40_test.c:599: WriteData(0x1f);      //Load row 8 data
0739 75821F    2119            mov     dpl,#0x1F
073C 020000    2120            ljmp    _WriteData
073F           2121   ;------------------------------------------------------------
073F           2122   ;Allocation info for local variables in function 'LCD_build_right_empty'
073F           2123   ;------------------------------------------------------------
073F           2124   ;------------------------------------------------------------
073F           2125   ;        EFM8_JDY40_test.c:602: void LCD_build_right_empty(void){
073F           2126   ;        -----------------------------------------
073F           2127   ;         function LCD_build_right_empty
073F           2128   ;        -----------------------------------------
073F           2129   _LCD_build_right_empty:
073F           2130   ;        EFM8_JDY40_test.c:603: WriteCommand(0x70);       //Load the location where we want to store
073F 758270    2131            mov     dpl,#0x70
0742 120000    2132            lcall   _WriteCommand
0745           2133   ;        EFM8_JDY40_test.c:604: WriteData(0x1f);      //Load row 1 data
0745 75821F    2134            mov     dpl,#0x1F
0748 120000    2135            lcall   _WriteData
074B           2136   ;        EFM8_JDY40_test.c:605: WriteData(0x1);      //Load row 2 data
074B 758201    2137            mov     dpl,#0x01
074E 120000    2138            lcall   _WriteData
0751           2139   ;        EFM8_JDY40_test.c:606: WriteData(0x1);      //Load row 3 data
0751 758201    2140            mov     dpl,#0x01
0754 120000    2141            lcall   _WriteData
0757           2142   ;        EFM8_JDY40_test.c:607: WriteData(0x1);      //Load row 4 data
0757 758201    2143            mov     dpl,#0x01
075A 120000    2144            lcall   _WriteData
075D           2145   ;        EFM8_JDY40_test.c:608: WriteData(0x1);      //Load row 5 data
075D 758201    2146            mov     dpl,#0x01
0760 120000    2147            lcall   _WriteData
0763           2148   ;        EFM8_JDY40_test.c:609: WriteData(0x1);      //Load row 6 data
0763 758201    2149            mov     dpl,#0x01
0766 120000    2150            lcall   _WriteData
0769           2151   ;        EFM8_JDY40_test.c:610: WriteData(0x1);      //Load row 7 data
0769 758201    2152            mov     dpl,#0x01
076C 120000    2153            lcall   _WriteData
076F           2154   ;        EFM8_JDY40_test.c:611: WriteData(0x1f);      //Load row 8 data
076F 75821F    2155            mov     dpl,#0x1F
0772 020000    2156            ljmp    _WriteData
0775           2157   ;------------------------------------------------------------
0775           2158   ;Allocation info for local variables in function 'main'
0775           2159   ;------------------------------------------------------------
0775           2160   ;------------------------------------------------------------
0775           2161   ;        EFM8_JDY40_test.c:615: void main (void)
0775           2162   ;        -----------------------------------------
0775           2163   ;         function main
0775           2164   ;        -----------------------------------------
0775           2165   _main:
0775           2166   ;        EFM8_JDY40_test.c:618: }
0775 22        2167            ret
0776           2168            rseg R_CSEG
0776           2169   
0000           2170            rseg R_XINIT
0000           2171   
0000           2172            rseg R_CONST
0000           2173   __str_0:
0000 436F6D6D  2174            db 'Command: %s'
     616E643A
     202573
000B 00        2175            db 0x00
000C           2176   __str_1:
000C 52657370  2177            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        2178            db 0x0D
0019 0A        2179            db 0x0A
001A 00        2180            db 0x00
001B           2181   
008E           2182            CSEG
008E           2183   
008E           2184   end
