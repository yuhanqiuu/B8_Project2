0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Sat Mar 16 15:49:52 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _SendATCommand
0000             28            public _waitms_or_RI1
0000             29            public _RXU1
0000             30            public _getstr1
0000             31            public _getchar1_with_timeout
0000             32            public _getchar1
0000             33            public _sendstr1
0000             34            public _putchar1
0000             35            public _UART1_Init
0000             36            public _waitms
0000             37            public _Timer3us
0000             38            public __c51_external_startup
0000             39            public _buff
0000             40   ;--------------------------------------------------------
0000             41   ; Special Function Registers
0000             42   ;--------------------------------------------------------
0000             43   _ACC            DATA 0xe0
0000             44   _ADC0ASAH       DATA 0xb6
0000             45   _ADC0ASAL       DATA 0xb5
0000             46   _ADC0ASCF       DATA 0xa1
0000             47   _ADC0ASCT       DATA 0xc7
0000             48   _ADC0CF0        DATA 0xbc
0000             49   _ADC0CF1        DATA 0xb9
0000             50   _ADC0CF2        DATA 0xdf
0000             51   _ADC0CN0        DATA 0xe8
0000             52   _ADC0CN1        DATA 0xb2
0000             53   _ADC0CN2        DATA 0xb3
0000             54   _ADC0GTH        DATA 0xc4
0000             55   _ADC0GTL        DATA 0xc3
0000             56   _ADC0H          DATA 0xbe
0000             57   _ADC0L          DATA 0xbd
0000             58   _ADC0LTH        DATA 0xc6
0000             59   _ADC0LTL        DATA 0xc5
0000             60   _ADC0MX         DATA 0xbb
0000             61   _B              DATA 0xf0
0000             62   _CKCON0         DATA 0x8e
0000             63   _CKCON1         DATA 0xa6
0000             64   _CLEN0          DATA 0xc6
0000             65   _CLIE0          DATA 0xc7
0000             66   _CLIF0          DATA 0xe8
0000             67   _CLKSEL         DATA 0xa9
0000             68   _CLOUT0         DATA 0xd1
0000             69   _CLU0CF         DATA 0xb1
0000             70   _CLU0FN         DATA 0xaf
0000             71   _CLU0MX         DATA 0x84
0000             72   _CLU1CF         DATA 0xb3
0000             73   _CLU1FN         DATA 0xb2
0000             74   _CLU1MX         DATA 0x85
0000             75   _CLU2CF         DATA 0xb6
0000             76   _CLU2FN         DATA 0xb5
0000             77   _CLU2MX         DATA 0x91
0000             78   _CLU3CF         DATA 0xbf
0000             79   _CLU3FN         DATA 0xbe
0000             80   _CLU3MX         DATA 0xae
0000             81   _CMP0CN0        DATA 0x9b
0000             82   _CMP0CN1        DATA 0x99
0000             83   _CMP0MD         DATA 0x9d
0000             84   _CMP0MX         DATA 0x9f
0000             85   _CMP1CN0        DATA 0xbf
0000             86   _CMP1CN1        DATA 0xac
0000             87   _CMP1MD         DATA 0xab
0000             88   _CMP1MX         DATA 0xaa
0000             89   _CRC0CN0        DATA 0xce
0000             90   _CRC0CN1        DATA 0x86
0000             91   _CRC0CNT        DATA 0xd3
0000             92   _CRC0DAT        DATA 0xcb
0000             93   _CRC0FLIP       DATA 0xcf
0000             94   _CRC0IN         DATA 0xca
0000             95   _CRC0ST         DATA 0xd2
0000             96   _DAC0CF0        DATA 0x91
0000             97   _DAC0CF1        DATA 0x92
0000             98   _DAC0H          DATA 0x85
0000             99   _DAC0L          DATA 0x84
0000            100   _DAC1CF0        DATA 0x93
0000            101   _DAC1CF1        DATA 0x94
0000            102   _DAC1H          DATA 0x8a
0000            103   _DAC1L          DATA 0x89
0000            104   _DAC2CF0        DATA 0x95
0000            105   _DAC2CF1        DATA 0x96
0000            106   _DAC2H          DATA 0x8c
0000            107   _DAC2L          DATA 0x8b
0000            108   _DAC3CF0        DATA 0x9a
0000            109   _DAC3CF1        DATA 0x9c
0000            110   _DAC3H          DATA 0x8e
0000            111   _DAC3L          DATA 0x8d
0000            112   _DACGCF0        DATA 0x88
0000            113   _DACGCF1        DATA 0x98
0000            114   _DACGCF2        DATA 0xa2
0000            115   _DERIVID        DATA 0xad
0000            116   _DEVICEID       DATA 0xb5
0000            117   _DPH            DATA 0x83
0000            118   _DPL            DATA 0x82
0000            119   _EIE1           DATA 0xe6
0000            120   _EIE2           DATA 0xf3
0000            121   _EIP1           DATA 0xbb
0000            122   _EIP1H          DATA 0xee
0000            123   _EIP2           DATA 0xed
0000            124   _EIP2H          DATA 0xf6
0000            125   _EMI0CN         DATA 0xe7
0000            126   _FLKEY          DATA 0xb7
0000            127   _HFO0CAL        DATA 0xc7
0000            128   _HFO1CAL        DATA 0xd6
0000            129   _HFOCN          DATA 0xef
0000            130   _I2C0ADM        DATA 0xff
0000            131   _I2C0CN0        DATA 0xba
0000            132   _I2C0DIN        DATA 0xbc
0000            133   _I2C0DOUT       DATA 0xbb
0000            134   _I2C0FCN0       DATA 0xad
0000            135   _I2C0FCN1       DATA 0xab
0000            136   _I2C0FCT        DATA 0xf5
0000            137   _I2C0SLAD       DATA 0xbd
0000            138   _I2C0STAT       DATA 0xb9
0000            139   _IE             DATA 0xa8
0000            140   _IP             DATA 0xb8
0000            141   _IPH            DATA 0xf2
0000            142   _IT01CF         DATA 0xe4
0000            143   _LFO0CN         DATA 0xb1
0000            144   _P0             DATA 0x80
0000            145   _P0MASK         DATA 0xfe
0000            146   _P0MAT          DATA 0xfd
0000            147   _P0MDIN         DATA 0xf1
0000            148   _P0MDOUT        DATA 0xa4
0000            149   _P0SKIP         DATA 0xd4
0000            150   _P1             DATA 0x90
0000            151   _P1MASK         DATA 0xee
0000            152   _P1MAT          DATA 0xed
0000            153   _P1MDIN         DATA 0xf2
0000            154   _P1MDOUT        DATA 0xa5
0000            155   _P1SKIP         DATA 0xd5
0000            156   _P2             DATA 0xa0
0000            157   _P2MASK         DATA 0xfc
0000            158   _P2MAT          DATA 0xfb
0000            159   _P2MDIN         DATA 0xf3
0000            160   _P2MDOUT        DATA 0xa6
0000            161   _P2SKIP         DATA 0xcc
0000            162   _P3             DATA 0xb0
0000            163   _P3MDIN         DATA 0xf4
0000            164   _P3MDOUT        DATA 0x9c
0000            165   _PCA0CENT       DATA 0x9e
0000            166   _PCA0CLR        DATA 0x9c
0000            167   _PCA0CN0        DATA 0xd8
0000            168   _PCA0CPH0       DATA 0xfc
0000            169   _PCA0CPH1       DATA 0xea
0000            170   _PCA0CPH2       DATA 0xec
0000            171   _PCA0CPH3       DATA 0xf5
0000            172   _PCA0CPH4       DATA 0x85
0000            173   _PCA0CPH5       DATA 0xde
0000            174   _PCA0CPL0       DATA 0xfb
0000            175   _PCA0CPL1       DATA 0xe9
0000            176   _PCA0CPL2       DATA 0xeb
0000            177   _PCA0CPL3       DATA 0xf4
0000            178   _PCA0CPL4       DATA 0x84
0000            179   _PCA0CPL5       DATA 0xdd
0000            180   _PCA0CPM0       DATA 0xda
0000            181   _PCA0CPM1       DATA 0xdb
0000            182   _PCA0CPM2       DATA 0xdc
0000            183   _PCA0CPM3       DATA 0xae
0000            184   _PCA0CPM4       DATA 0xaf
0000            185   _PCA0CPM5       DATA 0xcc
0000            186   _PCA0H          DATA 0xfa
0000            187   _PCA0L          DATA 0xf9
0000            188   _PCA0MD         DATA 0xd9
0000            189   _PCA0POL        DATA 0x96
0000            190   _PCA0PWM        DATA 0xf7
0000            191   _PCON0          DATA 0x87
0000            192   _PCON1          DATA 0xcd
0000            193   _PFE0CN         DATA 0xc1
0000            194   _PRTDRV         DATA 0xf6
0000            195   _PSCTL          DATA 0x8f
0000            196   _PSTAT0         DATA 0xaa
0000            197   _PSW            DATA 0xd0
0000            198   _REF0CN         DATA 0xd1
0000            199   _REG0CN         DATA 0xc9
0000            200   _REVID          DATA 0xb6
0000            201   _RSTSRC         DATA 0xef
0000            202   _SBCON1         DATA 0x94
0000            203   _SBRLH1         DATA 0x96
0000            204   _SBRLL1         DATA 0x95
0000            205   _SBUF           DATA 0x99
0000            206   _SBUF0          DATA 0x99
0000            207   _SBUF1          DATA 0x92
0000            208   _SCON           DATA 0x98
0000            209   _SCON0          DATA 0x98
0000            210   _SCON1          DATA 0xc8
0000            211   _SFRPAGE        DATA 0xa7
0000            212   _SFRPGCN        DATA 0xbc
0000            213   _SFRSTACK       DATA 0xd7
0000            214   _SMB0ADM        DATA 0xd6
0000            215   _SMB0ADR        DATA 0xd7
0000            216   _SMB0CF         DATA 0xc1
0000            217   _SMB0CN0        DATA 0xc0
0000            218   _SMB0DAT        DATA 0xc2
0000            219   _SMB0FCN0       DATA 0xc3
0000            220   _SMB0FCN1       DATA 0xc4
0000            221   _SMB0FCT        DATA 0xef
0000            222   _SMB0RXLN       DATA 0xc5
0000            223   _SMB0TC         DATA 0xac
0000            224   _SMOD1          DATA 0x93
0000            225   _SP             DATA 0x81
0000            226   _SPI0CFG        DATA 0xa1
0000            227   _SPI0CKR        DATA 0xa2
0000            228   _SPI0CN0        DATA 0xf8
0000            229   _SPI0DAT        DATA 0xa3
0000            230   _SPI0FCN0       DATA 0x9a
0000            231   _SPI0FCN1       DATA 0x9b
0000            232   _SPI0FCT        DATA 0xf7
0000            233   _SPI0PCF        DATA 0xdf
0000            234   _TCON           DATA 0x88
0000            235   _TH0            DATA 0x8c
0000            236   _TH1            DATA 0x8d
0000            237   _TL0            DATA 0x8a
0000            238   _TL1            DATA 0x8b
0000            239   _TMOD           DATA 0x89
0000            240   _TMR2CN0        DATA 0xc8
0000            241   _TMR2CN1        DATA 0xfd
0000            242   _TMR2H          DATA 0xcf
0000            243   _TMR2L          DATA 0xce
0000            244   _TMR2RLH        DATA 0xcb
0000            245   _TMR2RLL        DATA 0xca
0000            246   _TMR3CN0        DATA 0x91
0000            247   _TMR3CN1        DATA 0xfe
0000            248   _TMR3H          DATA 0x95
0000            249   _TMR3L          DATA 0x94
0000            250   _TMR3RLH        DATA 0x93
0000            251   _TMR3RLL        DATA 0x92
0000            252   _TMR4CN0        DATA 0x98
0000            253   _TMR4CN1        DATA 0xff
0000            254   _TMR4H          DATA 0xa5
0000            255   _TMR4L          DATA 0xa4
0000            256   _TMR4RLH        DATA 0xa3
0000            257   _TMR4RLL        DATA 0xa2
0000            258   _TMR5CN0        DATA 0xc0
0000            259   _TMR5CN1        DATA 0xf1
0000            260   _TMR5H          DATA 0xd5
0000            261   _TMR5L          DATA 0xd4
0000            262   _TMR5RLH        DATA 0xd3
0000            263   _TMR5RLL        DATA 0xd2
0000            264   _UART0PCF       DATA 0xd9
0000            265   _UART1FCN0      DATA 0x9d
0000            266   _UART1FCN1      DATA 0xd8
0000            267   _UART1FCT       DATA 0xfa
0000            268   _UART1LIN       DATA 0x9e
0000            269   _UART1PCF       DATA 0xda
0000            270   _VDM0CN         DATA 0xff
0000            271   _WDTCN          DATA 0x97
0000            272   _XBR0           DATA 0xe1
0000            273   _XBR1           DATA 0xe2
0000            274   _XBR2           DATA 0xe3
0000            275   _XOSC0CN        DATA 0x86
0000            276   _DPTR           DATA 0x8382
0000            277   _TMR2RL         DATA 0xcbca
0000            278   _TMR3RL         DATA 0x9392
0000            279   _TMR4RL         DATA 0xa3a2
0000            280   _TMR5RL         DATA 0xd3d2
0000            281   _TMR0           DATA 0x8c8a
0000            282   _TMR1           DATA 0x8d8b
0000            283   _TMR2           DATA 0xcfce
0000            284   _TMR3           DATA 0x9594
0000            285   _TMR4           DATA 0xa5a4
0000            286   _TMR5           DATA 0xd5d4
0000            287   _SBRL1          DATA 0x9695
0000            288   _PCA0           DATA 0xfaf9
0000            289   _PCA0CP0        DATA 0xfcfb
0000            290   _PCA0CP1        DATA 0xeae9
0000            291   _PCA0CP2        DATA 0xeceb
0000            292   _PCA0CP3        DATA 0xf5f4
0000            293   _PCA0CP4        DATA 0x8584
0000            294   _PCA0CP5        DATA 0xdedd
0000            295   _ADC0ASA        DATA 0xb6b5
0000            296   _ADC0GT         DATA 0xc4c3
0000            297   _ADC0           DATA 0xbebd
0000            298   _ADC0LT         DATA 0xc6c5
0000            299   _DAC0           DATA 0x8584
0000            300   _DAC1           DATA 0x8a89
0000            301   _DAC2           DATA 0x8c8b
0000            302   _DAC3           DATA 0x8e8d
0000            303   ;--------------------------------------------------------
0000            304   ; special function bits
0000            305   ;--------------------------------------------------------
0000            306   _ACC_0          BIT 0xe0
0000            307   _ACC_1          BIT 0xe1
0000            308   _ACC_2          BIT 0xe2
0000            309   _ACC_3          BIT 0xe3
0000            310   _ACC_4          BIT 0xe4
0000            311   _ACC_5          BIT 0xe5
0000            312   _ACC_6          BIT 0xe6
0000            313   _ACC_7          BIT 0xe7
0000            314   _TEMPE          BIT 0xe8
0000            315   _ADGN0          BIT 0xe9
0000            316   _ADGN1          BIT 0xea
0000            317   _ADWINT         BIT 0xeb
0000            318   _ADBUSY         BIT 0xec
0000            319   _ADINT          BIT 0xed
0000            320   _IPOEN          BIT 0xee
0000            321   _ADEN           BIT 0xef
0000            322   _B_0            BIT 0xf0
0000            323   _B_1            BIT 0xf1
0000            324   _B_2            BIT 0xf2
0000            325   _B_3            BIT 0xf3
0000            326   _B_4            BIT 0xf4
0000            327   _B_5            BIT 0xf5
0000            328   _B_6            BIT 0xf6
0000            329   _B_7            BIT 0xf7
0000            330   _C0FIF          BIT 0xe8
0000            331   _C0RIF          BIT 0xe9
0000            332   _C1FIF          BIT 0xea
0000            333   _C1RIF          BIT 0xeb
0000            334   _C2FIF          BIT 0xec
0000            335   _C2RIF          BIT 0xed
0000            336   _C3FIF          BIT 0xee
0000            337   _C3RIF          BIT 0xef
0000            338   _D1SRC0         BIT 0x88
0000            339   _D1SRC1         BIT 0x89
0000            340   _D1AMEN         BIT 0x8a
0000            341   _D01REFSL       BIT 0x8b
0000            342   _D3SRC0         BIT 0x8c
0000            343   _D3SRC1         BIT 0x8d
0000            344   _D3AMEN         BIT 0x8e
0000            345   _D23REFSL       BIT 0x8f
0000            346   _D0UDIS         BIT 0x98
0000            347   _D1UDIS         BIT 0x99
0000            348   _D2UDIS         BIT 0x9a
0000            349   _D3UDIS         BIT 0x9b
0000            350   _EX0            BIT 0xa8
0000            351   _ET0            BIT 0xa9
0000            352   _EX1            BIT 0xaa
0000            353   _ET1            BIT 0xab
0000            354   _ES0            BIT 0xac
0000            355   _ET2            BIT 0xad
0000            356   _ESPI0          BIT 0xae
0000            357   _EA             BIT 0xaf
0000            358   _PX0            BIT 0xb8
0000            359   _PT0            BIT 0xb9
0000            360   _PX1            BIT 0xba
0000            361   _PT1            BIT 0xbb
0000            362   _PS0            BIT 0xbc
0000            363   _PT2            BIT 0xbd
0000            364   _PSPI0          BIT 0xbe
0000            365   _P0_0           BIT 0x80
0000            366   _P0_1           BIT 0x81
0000            367   _P0_2           BIT 0x82
0000            368   _P0_3           BIT 0x83
0000            369   _P0_4           BIT 0x84
0000            370   _P0_5           BIT 0x85
0000            371   _P0_6           BIT 0x86
0000            372   _P0_7           BIT 0x87
0000            373   _P1_0           BIT 0x90
0000            374   _P1_1           BIT 0x91
0000            375   _P1_2           BIT 0x92
0000            376   _P1_3           BIT 0x93
0000            377   _P1_4           BIT 0x94
0000            378   _P1_5           BIT 0x95
0000            379   _P1_6           BIT 0x96
0000            380   _P1_7           BIT 0x97
0000            381   _P2_0           BIT 0xa0
0000            382   _P2_1           BIT 0xa1
0000            383   _P2_2           BIT 0xa2
0000            384   _P2_3           BIT 0xa3
0000            385   _P2_4           BIT 0xa4
0000            386   _P2_5           BIT 0xa5
0000            387   _P2_6           BIT 0xa6
0000            388   _P3_0           BIT 0xb0
0000            389   _P3_1           BIT 0xb1
0000            390   _P3_2           BIT 0xb2
0000            391   _P3_3           BIT 0xb3
0000            392   _P3_4           BIT 0xb4
0000            393   _P3_7           BIT 0xb7
0000            394   _CCF0           BIT 0xd8
0000            395   _CCF1           BIT 0xd9
0000            396   _CCF2           BIT 0xda
0000            397   _CCF3           BIT 0xdb
0000            398   _CCF4           BIT 0xdc
0000            399   _CCF5           BIT 0xdd
0000            400   _CR             BIT 0xde
0000            401   _CF             BIT 0xdf
0000            402   _PARITY         BIT 0xd0
0000            403   _F1             BIT 0xd1
0000            404   _OV             BIT 0xd2
0000            405   _RS0            BIT 0xd3
0000            406   _RS1            BIT 0xd4
0000            407   _F0             BIT 0xd5
0000            408   _AC             BIT 0xd6
0000            409   _CY             BIT 0xd7
0000            410   _RI             BIT 0x98
0000            411   _TI             BIT 0x99
0000            412   _RB8            BIT 0x9a
0000            413   _TB8            BIT 0x9b
0000            414   _REN            BIT 0x9c
0000            415   _CE             BIT 0x9d
0000            416   _SMODE          BIT 0x9e
0000            417   _RI1            BIT 0xc8
0000            418   _TI1            BIT 0xc9
0000            419   _RBX1           BIT 0xca
0000            420   _TBX1           BIT 0xcb
0000            421   _REN1           BIT 0xcc
0000            422   _PERR1          BIT 0xcd
0000            423   _OVR1           BIT 0xce
0000            424   _SI             BIT 0xc0
0000            425   _ACK            BIT 0xc1
0000            426   _ARBLOST        BIT 0xc2
0000            427   _ACKRQ          BIT 0xc3
0000            428   _STO            BIT 0xc4
0000            429   _STA            BIT 0xc5
0000            430   _TXMODE         BIT 0xc6
0000            431   _MASTER         BIT 0xc7
0000            432   _SPIEN          BIT 0xf8
0000            433   _TXNF           BIT 0xf9
0000            434   _NSSMD0         BIT 0xfa
0000            435   _NSSMD1         BIT 0xfb
0000            436   _RXOVRN         BIT 0xfc
0000            437   _MODF           BIT 0xfd
0000            438   _WCOL           BIT 0xfe
0000            439   _SPIF           BIT 0xff
0000            440   _IT0            BIT 0x88
0000            441   _IE0            BIT 0x89
0000            442   _IT1            BIT 0x8a
0000            443   _IE1            BIT 0x8b
0000            444   _TR0            BIT 0x8c
0000            445   _TF0            BIT 0x8d
0000            446   _TR1            BIT 0x8e
0000            447   _TF1            BIT 0x8f
0000            448   _T2XCLK0        BIT 0xc8
0000            449   _T2XCLK1        BIT 0xc9
0000            450   _TR2            BIT 0xca
0000            451   _T2SPLIT        BIT 0xcb
0000            452   _TF2CEN         BIT 0xcc
0000            453   _TF2LEN         BIT 0xcd
0000            454   _TF2L           BIT 0xce
0000            455   _TF2H           BIT 0xcf
0000            456   _T4XCLK0        BIT 0x98
0000            457   _T4XCLK1        BIT 0x99
0000            458   _TR4            BIT 0x9a
0000            459   _T4SPLIT        BIT 0x9b
0000            460   _TF4CEN         BIT 0x9c
0000            461   _TF4LEN         BIT 0x9d
0000            462   _TF4L           BIT 0x9e
0000            463   _TF4H           BIT 0x9f
0000            464   _T5XCLK0        BIT 0xc0
0000            465   _T5XCLK1        BIT 0xc1
0000            466   _TR5            BIT 0xc2
0000            467   _T5SPLIT        BIT 0xc3
0000            468   _TF5CEN         BIT 0xc4
0000            469   _TF5LEN         BIT 0xc5
0000            470   _TF5L           BIT 0xc6
0000            471   _TF5H           BIT 0xc7
0000            472   _RIE            BIT 0xd8
0000            473   _RXTO0          BIT 0xd9
0000            474   _RXTO1          BIT 0xda
0000            475   _RFRQ           BIT 0xdb
0000            476   _TIE            BIT 0xdc
0000            477   _TXHOLD         BIT 0xdd
0000            478   _TXNF1          BIT 0xde
0000            479   _TFRQ           BIT 0xdf
0000            480   ;--------------------------------------------------------
0000            481   ; overlayable register banks
0000            482   ;--------------------------------------------------------
0000            483            rbank0 segment data overlay
0000            484   ;--------------------------------------------------------
0000            485   ; internal ram data
0000            486   ;--------------------------------------------------------
0000            487            rseg R_DSEG
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable items in internal ram 
0000            490   ;--------------------------------------------------------
0000            491            rseg    R_OSEG
0000            492            rseg    R_OSEG
0000            493            rseg    R_OSEG
0000            494   ;--------------------------------------------------------
0000            495   ; indirectly addressable internal ram data
0000            496   ;--------------------------------------------------------
0000            497            rseg R_ISEG
0000            498   _buff:
0000            499            ds 20
0014            500   ;--------------------------------------------------------
0014            501   ; absolute internal ram data
0014            502   ;--------------------------------------------------------
0000            503            DSEG
0000            504   ;--------------------------------------------------------
0000            505   ; bit data
0000            506   ;--------------------------------------------------------
0000            507            rseg R_BSEG
0000            508   ;--------------------------------------------------------
0000            509   ; paged external ram data
0000            510   ;--------------------------------------------------------
0000            511            rseg R_PSEG
0000            512   ;--------------------------------------------------------
0000            513   ; external ram data
0000            514   ;--------------------------------------------------------
0000            515            rseg R_XSEG
0000            516   ;--------------------------------------------------------
0000            517   ; absolute external ram data
0000            518   ;--------------------------------------------------------
0000            519            XSEG
0000            520   ;--------------------------------------------------------
0000            521   ; external initialized ram data
0000            522   ;--------------------------------------------------------
0000            523            rseg R_IXSEG
0000            524            rseg R_HOME
0000            525            rseg R_GSINIT
0000            526            rseg R_CSEG
0000            527   ;--------------------------------------------------------
0000            528   ; Reset entry point and interrupt vectors
0000            529   ;--------------------------------------------------------
0000            530            CSEG at 0x0000
0000 020000     531            ljmp    _crt0
0003            532   ;--------------------------------------------------------
0003            533   ; global & static initialisations
0003            534   ;--------------------------------------------------------
0000            535            rseg R_HOME
0000            536            rseg R_GSINIT
0000            537            rseg R_GSINIT
0000            538   ;--------------------------------------------------------
0000            539   ; data variables initialization
0000            540   ;--------------------------------------------------------
0000            541            rseg R_DINIT
0000            542            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            543   ;--------------------------------------------------------
0000            544   ; code
0000            545   ;--------------------------------------------------------
0000            546            rseg R_CSEG
0000            547   ;------------------------------------------------------------
0000            548   ;Allocation info for local variables in function '_c51_external_startup'
0000            549   ;------------------------------------------------------------
0000            550   ;------------------------------------------------------------
0000            551   ;        EFM8_JDY40_test.c:11: char _c51_external_startup (void)
0000            552   ;        -----------------------------------------
0000            553   ;         function _c51_external_startup
0000            554   ;        -----------------------------------------
0000            555   __c51_external_startup:
0000            556            using   0
0000            557   ;        EFM8_JDY40_test.c:14: SFRPAGE = 0x00;
0000 75A700     558            mov     _SFRPAGE,#0x00
0003            559   ;        EFM8_JDY40_test.c:15: WDTCN = 0xDE; //First key
0003 7597DE     560            mov     _WDTCN,#0xDE
0006            561   ;        EFM8_JDY40_test.c:16: WDTCN = 0xAD; //Second key
0006 7597AD     562            mov     _WDTCN,#0xAD
0009            563   ;        EFM8_JDY40_test.c:18: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     564            mov     _VDM0CN,#0x80
000C            565   ;        EFM8_JDY40_test.c:19: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     566            mov     _RSTSRC,#0x06
000F            567   ;        EFM8_JDY40_test.c:26: SFRPAGE = 0x10;
000F 75A710     568            mov     _SFRPAGE,#0x10
0012            569   ;        EFM8_JDY40_test.c:27: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     570            mov     _PFE0CN,#0x20
0015            571   ;        EFM8_JDY40_test.c:28: SFRPAGE = 0x00;
0015 75A700     572            mov     _SFRPAGE,#0x00
0018            573   ;        EFM8_JDY40_test.c:49: CLKSEL = 0x00;
0018 75A900     574            mov     _CLKSEL,#0x00
001B            575   ;        EFM8_JDY40_test.c:50: CLKSEL = 0x00;
001B 75A900     576            mov     _CLKSEL,#0x00
001E            577   ;        EFM8_JDY40_test.c:51: while ((CLKSEL & 0x80) == 0);
001E            578   L002001?:
001E E5A9       579            mov     a,_CLKSEL
0020 30E7A8     580            jnb     acc.7,L002001?
0023            581   ;        EFM8_JDY40_test.c:52: CLKSEL = 0x03;
0023 75A903     582            mov     _CLKSEL,#0x03
0026            583   ;        EFM8_JDY40_test.c:53: CLKSEL = 0x03;
0026 75A903     584            mov     _CLKSEL,#0x03
0029            585   ;        EFM8_JDY40_test.c:54: while ((CLKSEL & 0x80) == 0);
0029            586   L002004?:
0029 E5A9       587            mov     a,_CLKSEL
002B 30E728     588            jnb     acc.7,L002004?
002E            589   ;        EFM8_JDY40_test.c:59: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     590            orl     _P0MDOUT,#0x11
0031            591   ;        EFM8_JDY40_test.c:60: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     592            orl     _P2MDOUT,#0x01
0034            593   ;        EFM8_JDY40_test.c:61: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     594            mov     _XBR0,#0x01
0037            595   ;        EFM8_JDY40_test.c:62: XBR1     = 0X00;
0037 75E200     596            mov     _XBR1,#0x00
003A            597   ;        EFM8_JDY40_test.c:63: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     598            mov     _XBR2,#0x41
003D            599   ;        EFM8_JDY40_test.c:69: SCON0 = 0x10;
003D 759810     600            mov     _SCON0,#0x10
0040            601   ;        EFM8_JDY40_test.c:70: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     602            mov     _TH1,#0xE6
0043            603   ;        EFM8_JDY40_test.c:71: TL1 = TH1;      // Init Timer1
0043 858D8B     604            mov     _TL1,_TH1
0046            605   ;        EFM8_JDY40_test.c:72: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     606            anl     _TMOD,#0x0F
0049            607   ;        EFM8_JDY40_test.c:73: TMOD |=  0x20;                       
0049 438920     608            orl     _TMOD,#0x20
004C            609   ;        EFM8_JDY40_test.c:74: TR1 = 1; // START Timer1
004C D28E       610            setb    _TR1
004E            611   ;        EFM8_JDY40_test.c:75: TI = 1;  // Indicate TX0 ready
004E D299       612            setb    _TI
0050            613   ;        EFM8_JDY40_test.c:77: return 0;
0050 758200     614            mov     dpl,#0x00
0053 22         615            ret
0054            616   ;------------------------------------------------------------
0054            617   ;Allocation info for local variables in function 'Timer3us'
0054            618   ;------------------------------------------------------------
0054            619   ;us                        Allocated to registers r2 
0054            620   ;i                         Allocated to registers r3 
0054            621   ;------------------------------------------------------------
0054            622   ;        EFM8_JDY40_test.c:81: void Timer3us(unsigned char us)
0054            623   ;        -----------------------------------------
0054            624   ;         function Timer3us
0054            625   ;        -----------------------------------------
0054            626   _Timer3us:
0054 AA82       627            mov     r2,dpl
0056            628   ;        EFM8_JDY40_test.c:86: CKCON0|=0b_0100_0000;
0056 438E40     629            orl     _CKCON0,#0x40
0059            630   ;        EFM8_JDY40_test.c:88: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0059 7592B8     631            mov     _TMR3RL,#0xB8
005C 7593FF     632            mov     (_TMR3RL >> 8),#0xFF
005F            633   ;        EFM8_JDY40_test.c:89: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
005F 859294     634            mov     _TMR3,_TMR3RL
0062 859395     635            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0065            636   ;        EFM8_JDY40_test.c:91: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0065 759104     637            mov     _TMR3CN0,#0x04
0068            638   ;        EFM8_JDY40_test.c:92: for (i = 0; i < us; i++)       // Count <us> overflows
0068 7B00       639            mov     r3,#0x00
006A            640   L003004?:
006A C3         641            clr     c
006B EB         642            mov     a,r3
006C 9A         643            subb    a,r2
006D 5000       644            jnc     L003007?
006F            645   ;        EFM8_JDY40_test.c:94: while (!(TMR3CN0 & 0x80));  // Wait for overflow
006F            646   L003001?:
006F E591       647            mov     a,_TMR3CN0
0071 30E728     648            jnb     acc.7,L003001?
0074            649   ;        EFM8_JDY40_test.c:95: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0074 53917F     650            anl     _TMR3CN0,#0x7F
0077            651   ;        EFM8_JDY40_test.c:92: for (i = 0; i < us; i++)       // Count <us> overflows
0077 0B         652            inc     r3
0078 8000       653            sjmp    L003004?
007A            654   L003007?:
007A            655   ;        EFM8_JDY40_test.c:97: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
007A 759100     656            mov     _TMR3CN0,#0x00
007D 22         657            ret
007E            658   ;------------------------------------------------------------
007E            659   ;Allocation info for local variables in function 'waitms'
007E            660   ;------------------------------------------------------------
007E            661   ;ms                        Allocated to registers r2 r3 
007E            662   ;j                         Allocated to registers r4 r5 
007E            663   ;k                         Allocated to registers r6 
007E            664   ;------------------------------------------------------------
007E            665   ;        EFM8_JDY40_test.c:100: void waitms (unsigned int ms)
007E            666   ;        -----------------------------------------
007E            667   ;         function waitms
007E            668   ;        -----------------------------------------
007E            669   _waitms:
007E AA82       670            mov     r2,dpl
0080 AB83       671            mov     r3,dph
0082            672   ;        EFM8_JDY40_test.c:104: for(j=0; j<ms; j++)
0082 7C00       673            mov     r4,#0x00
0084 7D00       674            mov     r5,#0x00
0086            675   L004005?:
0086 C3         676            clr     c
0087 EC         677            mov     a,r4
0088 9A         678            subb    a,r2
0089 ED         679            mov     a,r5
008A 9B         680            subb    a,r3
008B 5000       681            jnc     L004009?
008D            682   ;        EFM8_JDY40_test.c:105: for (k=0; k<4; k++) Timer3us(250);
008D 7E00       683            mov     r6,#0x00
008F            684   L004001?:
008F BE0468     685            cjne    r6,#0x04,L004018?
0092            686   L004018?:
0092 5000       687            jnc     L004007?
0094 7582FA     688            mov     dpl,#0xFA
0097 C002       689            push    ar2
0099 C003       690            push    ar3
009B C004       691            push    ar4
009D C005       692            push    ar5
009F C006       693            push    ar6
00A1 120000     694            lcall   _Timer3us
00A4 D006       695            pop     ar6
00A6 D005       696            pop     ar5
00A8 D004       697            pop     ar4
00AA D003       698            pop     ar3
00AC D002       699            pop     ar2
00AE 0E         700            inc     r6
00AF 8000       701            sjmp    L004001?
00B1            702   L004007?:
00B1            703   ;        EFM8_JDY40_test.c:104: for(j=0; j<ms; j++)
00B1 0C         704            inc     r4
00B2 BC00A8     705            cjne    r4,#0x00,L004005?
00B5 0D         706            inc     r5
00B6 8000       707            sjmp    L004005?
00B8            708   L004009?:
00B8 22         709            ret
00B9            710   ;------------------------------------------------------------
00B9            711   ;Allocation info for local variables in function 'UART1_Init'
00B9            712   ;------------------------------------------------------------
00B9            713   ;baudrate                  Allocated to registers r2 r3 r4 r5 
00B9            714   ;------------------------------------------------------------
00B9            715   ;        EFM8_JDY40_test.c:108: void UART1_Init (unsigned long baudrate)
00B9            716   ;        -----------------------------------------
00B9            717   ;         function UART1_Init
00B9            718   ;        -----------------------------------------
00B9            719   _UART1_Init:
00B9 AA82       720            mov     r2,dpl
00BB AB83       721            mov     r3,dph
00BD ACF0       722            mov     r4,b
00BF FD         723            mov     r5,a
00C0            724   ;        EFM8_JDY40_test.c:110: SFRPAGE = 0x20;
00C0 75A720     725            mov     _SFRPAGE,#0x20
00C3            726   ;        EFM8_JDY40_test.c:111: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
00C3 75930C     727            mov     _SMOD1,#0x0C
00C6            728   ;        EFM8_JDY40_test.c:112: SCON1 = 0x10;
00C6 75C810     729            mov     _SCON1,#0x10
00C9            730   ;        EFM8_JDY40_test.c:113: SBCON1 =0x00;   // disable baud rate generator
00C9 759400     731            mov     _SBCON1,#0x00
00CC            732   ;        EFM8_JDY40_test.c:114: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
00CC 8A00       733            mov     __divulong_PARM_2,r2
00CE 8B01       734            mov     (__divulong_PARM_2 + 1),r3
00D0 8C02       735            mov     (__divulong_PARM_2 + 2),r4
00D2 8D03       736            mov     (__divulong_PARM_2 + 3),r5
00D4 90A200     737            mov     dptr,#0xA200
00D7 75F04A     738            mov     b,#0x4A
00DA 7404       739            mov     a,#0x04
00DC 120000     740            lcall   __divulong
00DF AA82       741            mov     r2,dpl
00E1 AB83       742            mov     r3,dph
00E3 ACF0       743            mov     r4,b
00E5 FD         744            mov     r5,a
00E6 750018     745            mov     __divulong_PARM_2,#0x18
00E9 E4         746            clr     a
00EA F501       747            mov     (__divulong_PARM_2 + 1),a
00EC F502       748            mov     (__divulong_PARM_2 + 2),a
00EE F503       749            mov     (__divulong_PARM_2 + 3),a
00F0 8A82       750            mov     dpl,r2
00F2 8B83       751            mov     dph,r3
00F4 8CF0       752            mov     b,r4
00F6 ED         753            mov     a,r5
00F7 120000     754            lcall   __divulong
00FA AA82       755            mov     r2,dpl
00FC AB83       756            mov     r3,dph
00FE ACF0       757            mov     r4,b
0100 FD         758            mov     r5,a
0101 E4         759            clr     a
0102 C3         760            clr     c
0103 9A         761            subb    a,r2
0104 FA         762            mov     r2,a
0105 E4         763            clr     a
0106 9B         764            subb    a,r3
0107 FB         765            mov     r3,a
0108 7401       766            mov     a,#0x01
010A 9C         767            subb    a,r4
010B E4         768            clr     a
010C 9D         769            subb    a,r5
010D 8A95       770            mov     _SBRL1,r2
010F 8B96       771            mov     (_SBRL1 >> 8),r3
0111            772   ;        EFM8_JDY40_test.c:115: TI1 = 1; // indicate ready for TX
0111 D2C9       773            setb    _TI1
0113            774   ;        EFM8_JDY40_test.c:116: SBCON1 |= 0x40;   // enable baud rate generator
0113 439440     775            orl     _SBCON1,#0x40
0116            776   ;        EFM8_JDY40_test.c:117: SFRPAGE = 0x00;
0116 75A700     777            mov     _SFRPAGE,#0x00
0119 22         778            ret
011A            779   ;------------------------------------------------------------
011A            780   ;Allocation info for local variables in function 'putchar1'
011A            781   ;------------------------------------------------------------
011A            782   ;c                         Allocated to registers r2 
011A            783   ;------------------------------------------------------------
011A            784   ;        EFM8_JDY40_test.c:120: void putchar1 (char c) 
011A            785   ;        -----------------------------------------
011A            786   ;         function putchar1
011A            787   ;        -----------------------------------------
011A            788   _putchar1:
011A AA82       789            mov     r2,dpl
011C            790   ;        EFM8_JDY40_test.c:122: SFRPAGE = 0x20;
011C 75A720     791            mov     _SFRPAGE,#0x20
011F            792   ;        EFM8_JDY40_test.c:123: while (!TI1);
011F            793   L006001?:
011F            794   ;        EFM8_JDY40_test.c:124: TI1=0;
011F 10C9F8     795            jbc     _TI1,L006008?
0122 8000       796            sjmp    L006001?
0124            797   L006008?:
0124            798   ;        EFM8_JDY40_test.c:125: SBUF1 = c;
0124 8A92       799            mov     _SBUF1,r2
0126            800   ;        EFM8_JDY40_test.c:126: SFRPAGE = 0x00;
0126 75A700     801            mov     _SFRPAGE,#0x00
0129 22         802            ret
012A            803   ;------------------------------------------------------------
012A            804   ;Allocation info for local variables in function 'sendstr1'
012A            805   ;------------------------------------------------------------
012A            806   ;s                         Allocated to registers r2 r3 r4 
012A            807   ;------------------------------------------------------------
012A            808   ;        EFM8_JDY40_test.c:129: void sendstr1 (char * s)
012A            809   ;        -----------------------------------------
012A            810   ;         function sendstr1
012A            811   ;        -----------------------------------------
012A            812   _sendstr1:
012A AA82       813            mov     r2,dpl
012C AB83       814            mov     r3,dph
012E ACF0       815            mov     r4,b
0130            816   ;        EFM8_JDY40_test.c:131: while(*s)
0130            817   L007001?:
0130 8A82       818            mov     dpl,r2
0132 8B83       819            mov     dph,r3
0134 8CF0       820            mov     b,r4
0136 120000     821            lcall   __gptrget
0139 FD         822            mov     r5,a
013A 6000       823            jz      L007004?
013C            824   ;        EFM8_JDY40_test.c:133: putchar1(*s);
013C 8D82       825            mov     dpl,r5
013E C002       826            push    ar2
0140 C003       827            push    ar3
0142 C004       828            push    ar4
0144 120000     829            lcall   _putchar1
0147 D004       830            pop     ar4
0149 D003       831            pop     ar3
014B D002       832            pop     ar2
014D            833   ;        EFM8_JDY40_test.c:134: s++;     
014D 0A         834            inc     r2
014E BA0038     835            cjne    r2,#0x00,L007001?
0151 0B         836            inc     r3
0152 8000       837            sjmp    L007001?
0154            838   L007004?:
0154 22         839            ret
0155            840   ;------------------------------------------------------------
0155            841   ;Allocation info for local variables in function 'getchar1'
0155            842   ;------------------------------------------------------------
0155            843   ;c                         Allocated to registers 
0155            844   ;------------------------------------------------------------
0155            845   ;        EFM8_JDY40_test.c:138: char getchar1 (void)
0155            846   ;        -----------------------------------------
0155            847   ;         function getchar1
0155            848   ;        -----------------------------------------
0155            849   _getchar1:
0155            850   ;        EFM8_JDY40_test.c:141: SFRPAGE = 0x20;
0155 75A720     851            mov     _SFRPAGE,#0x20
0158            852   ;        EFM8_JDY40_test.c:142: while (!RI1);
0158            853   L008001?:
0158            854   ;        EFM8_JDY40_test.c:143: RI1=0;
0158 10C838     855            jbc     _RI1,L008008?
015B 8000       856            sjmp    L008001?
015D            857   L008008?:
015D            858   ;        EFM8_JDY40_test.c:145: SCON1&=0b_0011_1111;
015D 53C83F     859            anl     _SCON1,#0x3F
0160            860   ;        EFM8_JDY40_test.c:146: c = SBUF1;
0160 859282     861            mov     dpl,_SBUF1
0163            862   ;        EFM8_JDY40_test.c:147: SFRPAGE = 0x00;
0163 75A700     863            mov     _SFRPAGE,#0x00
0166            864   ;        EFM8_JDY40_test.c:148: return (c);
0166 22         865            ret
0167            866   ;------------------------------------------------------------
0167            867   ;Allocation info for local variables in function 'getchar1_with_timeout'
0167            868   ;------------------------------------------------------------
0167            869   ;c                         Allocated to registers 
0167            870   ;timeout                   Allocated to registers r2 r3 
0167            871   ;------------------------------------------------------------
0167            872   ;        EFM8_JDY40_test.c:151: char getchar1_with_timeout (void)
0167            873   ;        -----------------------------------------
0167            874   ;         function getchar1_with_timeout
0167            875   ;        -----------------------------------------
0167            876   _getchar1_with_timeout:
0167            877   ;        EFM8_JDY40_test.c:155: SFRPAGE = 0x20;
0167 75A720     878            mov     _SFRPAGE,#0x20
016A            879   ;        EFM8_JDY40_test.c:157: while (!RI1)
016A 7A00       880            mov     r2,#0x00
016C 7B00       881            mov     r3,#0x00
016E            882   L009003?:
016E 20C8B8     883            jb      _RI1,L009005?
0171            884   ;        EFM8_JDY40_test.c:159: SFRPAGE = 0x00;
0171 75A700     885            mov     _SFRPAGE,#0x00
0174            886   ;        EFM8_JDY40_test.c:160: Timer3us(20);
0174 758214     887            mov     dpl,#0x14
0177 C002       888            push    ar2
0179 C003       889            push    ar3
017B 120000     890            lcall   _Timer3us
017E D003       891            pop     ar3
0180 D002       892            pop     ar2
0182            893   ;        EFM8_JDY40_test.c:161: SFRPAGE = 0x20;
0182 75A720     894            mov     _SFRPAGE,#0x20
0185            895   ;        EFM8_JDY40_test.c:162: timeout++;
0185 0A         896            inc     r2
0186 BA00F8     897            cjne    r2,#0x00,L009012?
0189 0B         898            inc     r3
018A            899   L009012?:
018A            900   ;        EFM8_JDY40_test.c:163: if(timeout==25000)
018A BAA878     901            cjne    r2,#0xA8,L009003?
018D BB6178     902            cjne    r3,#0x61,L009003?
0190            903   ;        EFM8_JDY40_test.c:165: SFRPAGE = 0x00;
0190 75A700     904            mov     _SFRPAGE,#0x00
0193            905   ;        EFM8_JDY40_test.c:166: return ('\n'); // Timeout after half second
0193 75820A     906            mov     dpl,#0x0A
0196 22         907            ret
0197            908   L009005?:
0197            909   ;        EFM8_JDY40_test.c:169: RI1=0;
0197 C2C8       910            clr     _RI1
0199            911   ;        EFM8_JDY40_test.c:171: SCON1&=0b_0011_1111;
0199 53C83F     912            anl     _SCON1,#0x3F
019C            913   ;        EFM8_JDY40_test.c:172: c = SBUF1;
019C 859282     914            mov     dpl,_SBUF1
019F            915   ;        EFM8_JDY40_test.c:173: SFRPAGE = 0x00;
019F 75A700     916            mov     _SFRPAGE,#0x00
01A2            917   ;        EFM8_JDY40_test.c:174: return (c);
01A2 22         918            ret
01A3            919   ;------------------------------------------------------------
01A3            920   ;Allocation info for local variables in function 'getstr1'
01A3            921   ;------------------------------------------------------------
01A3            922   ;s                         Allocated to registers r2 r3 r4 
01A3            923   ;c                         Allocated to registers r5 
01A3            924   ;------------------------------------------------------------
01A3            925   ;        EFM8_JDY40_test.c:177: void getstr1 (char * s)
01A3            926   ;        -----------------------------------------
01A3            927   ;         function getstr1
01A3            928   ;        -----------------------------------------
01A3            929   _getstr1:
01A3 AA82       930            mov     r2,dpl
01A5 AB83       931            mov     r3,dph
01A7 ACF0       932            mov     r4,b
01A9            933   ;        EFM8_JDY40_test.c:181: while(1)
01A9            934   L010004?:
01A9            935   ;        EFM8_JDY40_test.c:183: c=getchar1_with_timeout();
01A9 C002       936            push    ar2
01AB C003       937            push    ar3
01AD C004       938            push    ar4
01AF 120000     939            lcall   _getchar1_with_timeout
01B2 AD82       940            mov     r5,dpl
01B4 D004       941            pop     ar4
01B6 D003       942            pop     ar3
01B8 D002       943            pop     ar2
01BA            944   ;        EFM8_JDY40_test.c:184: if(c=='\n')
01BA BD0A78     945            cjne    r5,#0x0A,L010002?
01BD            946   ;        EFM8_JDY40_test.c:186: *s=0;
01BD 8A82       947            mov     dpl,r2
01BF 8B83       948            mov     dph,r3
01C1 8CF0       949            mov     b,r4
01C3 E4         950            clr     a
01C4            951   ;        EFM8_JDY40_test.c:187: return;
01C4 020000     952            ljmp    __gptrput
01C7            953   L010002?:
01C7            954   ;        EFM8_JDY40_test.c:189: *s=c;
01C7 8A82       955            mov     dpl,r2
01C9 8B83       956            mov     dph,r3
01CB 8CF0       957            mov     b,r4
01CD ED         958            mov     a,r5
01CE 120000     959            lcall   __gptrput
01D1 A3         960            inc     dptr
01D2 AA82       961            mov     r2,dpl
01D4 AB83       962            mov     r3,dph
01D6            963   ;        EFM8_JDY40_test.c:190: s++;
01D6 8000       964            sjmp    L010004?
01D8            965   ;------------------------------------------------------------
01D8            966   ;Allocation info for local variables in function 'RXU1'
01D8            967   ;------------------------------------------------------------
01D8            968   ;------------------------------------------------------------
01D8            969   ;        EFM8_JDY40_test.c:195: bit RXU1 (void)
01D8            970   ;        -----------------------------------------
01D8            971   ;         function RXU1
01D8            972   ;        -----------------------------------------
01D8            973   _RXU1:
01D8            974   ;        EFM8_JDY40_test.c:198: SFRPAGE = 0x20;
01D8 75A720     975            mov     _SFRPAGE,#0x20
01DB            976   ;        EFM8_JDY40_test.c:199: mybit=RI1;
01DB A2C8       977            mov     c,_RI1
01DD            978   ;        EFM8_JDY40_test.c:200: SFRPAGE = 0x00;
01DD 75A700     979            mov     _SFRPAGE,#0x00
01E0            980   ;        EFM8_JDY40_test.c:201: return mybit;
01E0 22         981            ret
01E1            982   ;------------------------------------------------------------
01E1            983   ;Allocation info for local variables in function 'waitms_or_RI1'
01E1            984   ;------------------------------------------------------------
01E1            985   ;ms                        Allocated to registers r2 r3 
01E1            986   ;j                         Allocated to registers r4 r5 
01E1            987   ;k                         Allocated to registers r6 
01E1            988   ;------------------------------------------------------------
01E1            989   ;        EFM8_JDY40_test.c:204: void waitms_or_RI1 (unsigned int ms)
01E1            990   ;        -----------------------------------------
01E1            991   ;         function waitms_or_RI1
01E1            992   ;        -----------------------------------------
01E1            993   _waitms_or_RI1:
01E1 AA82       994            mov     r2,dpl
01E3 AB83       995            mov     r3,dph
01E5            996   ;        EFM8_JDY40_test.c:208: for(j=0; j<ms; j++)
01E5 7C00       997            mov     r4,#0x00
01E7 7D00       998            mov     r5,#0x00
01E9            999   L012007?:
01E9 C3        1000            clr     c
01EA EC        1001            mov     a,r4
01EB 9A        1002            subb    a,r2
01EC ED        1003            mov     a,r5
01ED 9B        1004            subb    a,r3
01EE 5000      1005            jnc     L012011?
01F0           1006   ;        EFM8_JDY40_test.c:210: for (k=0; k<4; k++)
01F0 7E00      1007            mov     r6,#0x00
01F2           1008   L012003?:
01F2 BE04B8    1009            cjne    r6,#0x04,L012019?
01F5           1010   L012019?:
01F5 5000      1011            jnc     L012009?
01F7           1012   ;        EFM8_JDY40_test.c:212: if(RXU1()) return;
01F7 C002      1013            push    ar2
01F9 C003      1014            push    ar3
01FB C004      1015            push    ar4
01FD C005      1016            push    ar5
01FF C006      1017            push    ar6
0201 120000    1018            lcall   _RXU1
0204 E4        1019            clr     a
0205 33        1020            rlc     a
0206 D006      1021            pop     ar6
0208 D005      1022            pop     ar5
020A D004      1023            pop     ar4
020C D003      1024            pop     ar3
020E D002      1025            pop     ar2
0210 6000      1026            jz      L012002?
0212 22        1027            ret
0213           1028   L012002?:
0213           1029   ;        EFM8_JDY40_test.c:213: Timer3us(250);
0213 7582FA    1030            mov     dpl,#0xFA
0216 C002      1031            push    ar2
0218 C003      1032            push    ar3
021A C004      1033            push    ar4
021C C005      1034            push    ar5
021E C006      1035            push    ar6
0220 120000    1036            lcall   _Timer3us
0223 D006      1037            pop     ar6
0225 D005      1038            pop     ar5
0227 D004      1039            pop     ar4
0229 D003      1040            pop     ar3
022B D002      1041            pop     ar2
022D           1042   ;        EFM8_JDY40_test.c:210: for (k=0; k<4; k++)
022D 0E        1043            inc     r6
022E 8000      1044            sjmp    L012003?
0230           1045   L012009?:
0230           1046   ;        EFM8_JDY40_test.c:208: for(j=0; j<ms; j++)
0230 0C        1047            inc     r4
0231 BC00F8    1048            cjne    r4,#0x00,L012007?
0234 0D        1049            inc     r5
0235 8000      1050            sjmp    L012007?
0237           1051   L012011?:
0237 22        1052            ret
0238           1053   ;------------------------------------------------------------
0238           1054   ;Allocation info for local variables in function 'SendATCommand'
0238           1055   ;------------------------------------------------------------
0238           1056   ;s                         Allocated to registers r2 r3 r4 
0238           1057   ;------------------------------------------------------------
0238           1058   ;        EFM8_JDY40_test.c:218: void SendATCommand (char * s)
0238           1059   ;        -----------------------------------------
0238           1060   ;         function SendATCommand
0238           1061   ;        -----------------------------------------
0238           1062   _SendATCommand:
0238 AA82      1063            mov     r2,dpl
023A AB83      1064            mov     r3,dph
023C ACF0      1065            mov     r4,b
023E           1066   ;        EFM8_JDY40_test.c:220: printf("Command: %s", s);
023E C002      1067            push    ar2
0240 C003      1068            push    ar3
0242 C004      1069            push    ar4
0244 C002      1070            push    ar2
0246 C003      1071            push    ar3
0248 C004      1072            push    ar4
024A 7478      1073            mov     a,#__str_0
024C C0E0      1074            push    acc
024E 74BC      1075            mov     a,#(__str_0 >> 8)
0250 C0E0      1076            push    acc
0252 7480      1077            mov     a,#0x80
0254 C0E0      1078            push    acc
0256 120000    1079            lcall   _printf
0259 E581      1080            mov     a,sp
025B 24FA      1081            add     a,#0xfa
025D F581      1082            mov     sp,a
025F           1083   ;        EFM8_JDY40_test.c:221: P3_0=0; // 'set' pin to 0 is 'AT' mode.
025F C2B0      1084            clr     _P3_0
0261           1085   ;        EFM8_JDY40_test.c:222: waitms(5);
0261 900005    1086            mov     dptr,#0x0005
0264 120000    1087            lcall   _waitms
0267 D004      1088            pop     ar4
0269 D003      1089            pop     ar3
026B D002      1090            pop     ar2
026D           1091   ;        EFM8_JDY40_test.c:223: sendstr1(s);
026D 8A82      1092            mov     dpl,r2
026F 8B83      1093            mov     dph,r3
0271 8CF0      1094            mov     b,r4
0273 120000    1095            lcall   _sendstr1
0276           1096   ;        EFM8_JDY40_test.c:224: getstr1(buff);
0276 9014B0    1097            mov     dptr,#_buff
0279 75F040    1098            mov     b,#0x40
027C 120000    1099            lcall   _getstr1
027F           1100   ;        EFM8_JDY40_test.c:225: waitms(10);
027F 90000A    1101            mov     dptr,#0x000A
0282 120000    1102            lcall   _waitms
0285           1103   ;        EFM8_JDY40_test.c:226: P3_0=1; // 'set' pin to 1 is normal operation mode.
0285 D2B0      1104            setb    _P3_0
0287           1105   ;        EFM8_JDY40_test.c:227: printf("Response: %s\r\n", buff);
0287 74B0      1106            mov     a,#_buff
0289 C0E0      1107            push    acc
028B 7414      1108            mov     a,#(_buff >> 8)
028D C0E0      1109            push    acc
028F 7440      1110            mov     a,#0x40
0291 C0E0      1111            push    acc
0293 7438      1112            mov     a,#__str_1
0295 C0E0      1113            push    acc
0297 74BD      1114            mov     a,#(__str_1 >> 8)
0299 C0E0      1115            push    acc
029B 7480      1116            mov     a,#0x80
029D C0E0      1117            push    acc
029F 120000    1118            lcall   _printf
02A2 E581      1119            mov     a,sp
02A4 24FA      1120            add     a,#0xfa
02A6 F581      1121            mov     sp,a
02A8 22        1122            ret
02A9           1123   ;------------------------------------------------------------
02A9           1124   ;Allocation info for local variables in function 'main'
02A9           1125   ;------------------------------------------------------------
02A9           1126   ;cnt                       Allocated to registers 
02A9           1127   ;------------------------------------------------------------
02A9           1128   ;        EFM8_JDY40_test.c:230: void main (void)
02A9           1129   ;        -----------------------------------------
02A9           1130   ;         function main
02A9           1131   ;        -----------------------------------------
02A9           1132   _main:
02A9           1133   ;        EFM8_JDY40_test.c:234: waitms(500);
02A9 9001F4    1134            mov     dptr,#0x01F4
02AC 120000    1135            lcall   _waitms
02AF           1136   ;        EFM8_JDY40_test.c:235: printf("\r\nJDY-40 test\r\n");
02AF 7478      1137            mov     a,#__str_2
02B1 C0E0      1138            push    acc
02B3 74BD      1139            mov     a,#(__str_2 >> 8)
02B5 C0E0      1140            push    acc
02B7 7480      1141            mov     a,#0x80
02B9 C0E0      1142            push    acc
02BB 120000    1143            lcall   _printf
02BE 1581      1144            dec     sp
02C0 1581      1145            dec     sp
02C2 1581      1146            dec     sp
02C4           1147   ;        EFM8_JDY40_test.c:236: UART1_Init(9600);
02C4 902580    1148            mov     dptr,#0x2580
02C7 E4        1149            clr     a
02C8 F5F0      1150            mov     b,a
02CA 120000    1151            lcall   _UART1_Init
02CD           1152   ;        EFM8_JDY40_test.c:252: SendATCommand("AT+DVID9944\r\n");  
02CD 90BDB8    1153            mov     dptr,#__str_3
02D0 75F080    1154            mov     b,#0x80
02D3 120000    1155            lcall   _SendATCommand
02D6           1156   ;        EFM8_JDY40_test.c:255: SendATCommand("AT+VER\r\n");
02D6 90BDF8    1157            mov     dptr,#__str_4
02D9 75F080    1158            mov     b,#0x80
02DC 120000    1159            lcall   _SendATCommand
02DF           1160   ;        EFM8_JDY40_test.c:256: SendATCommand("AT+BAUD\r\n");
02DF 90BE38    1161            mov     dptr,#__str_5
02E2 75F080    1162            mov     b,#0x80
02E5 120000    1163            lcall   _SendATCommand
02E8           1164   ;        EFM8_JDY40_test.c:257: SendATCommand("AT+RFID\r\n");
02E8 90BE78    1165            mov     dptr,#__str_6
02EB 75F080    1166            mov     b,#0x80
02EE 120000    1167            lcall   _SendATCommand
02F1           1168   ;        EFM8_JDY40_test.c:258: SendATCommand("AT+DVID\r\n");
02F1 90BEB8    1169            mov     dptr,#__str_7
02F4 75F080    1170            mov     b,#0x80
02F7 120000    1171            lcall   _SendATCommand
02FA           1172   ;        EFM8_JDY40_test.c:259: SendATCommand("AT+RFC\r\n");
02FA 90BEF8    1173            mov     dptr,#__str_8
02FD 75F080    1174            mov     b,#0x80
0300 120000    1175            lcall   _SendATCommand
0303           1176   ;        EFM8_JDY40_test.c:260: SendATCommand("AT+POWE\r\n");
0303 90BF38    1177            mov     dptr,#__str_9
0306 75F080    1178            mov     b,#0x80
0309 120000    1179            lcall   _SendATCommand
030C           1180   ;        EFM8_JDY40_test.c:261: SendATCommand("AT+CLSS\r\n");
030C 90BF78    1181            mov     dptr,#__str_10
030F 75F080    1182            mov     b,#0x80
0312 120000    1183            lcall   _SendATCommand
0315           1184   ;        EFM8_JDY40_test.c:263: printf("\r\Press and hold the BOOT button to transmit.\r\n");
0315 74B8      1185            mov     a,#__str_11
0317 C0E0      1186            push    acc
0319 74BF      1187            mov     a,#(__str_11 >> 8)
031B C0E0      1188            push    acc
031D 7480      1189            mov     a,#0x80
031F C0E0      1190            push    acc
0321 120000    1191            lcall   _printf
0324 1581      1192            dec     sp
0326 1581      1193            dec     sp
0328 1581      1194            dec     sp
032A           1195   ;        EFM8_JDY40_test.c:266: while(1)
032A 7A00      1196            mov     r2,#0x00
032C 7B00      1197            mov     r3,#0x00
032E           1198   L014006?:
032E           1199   ;        EFM8_JDY40_test.c:268: if(P3_7==0)
032E 20B740    1200            jb      _P3_7,L014002?
0331           1201   ;        EFM8_JDY40_test.c:270: sprintf(buff, "JDY40 test %d\r\n", cnt++);
0331 8A04      1202            mov     ar4,r2
0333 8B05      1203            mov     ar5,r3
0335 0A        1204            inc     r2
0336 BA0080    1205            cjne    r2,#0x00,L014014?
0339 0B        1206            inc     r3
033A           1207   L014014?:
033A C002      1208            push    ar2
033C C003      1209            push    ar3
033E C004      1210            push    ar4
0340 C005      1211            push    ar5
0342 74C0      1212            mov     a,#__str_12
0344 C0E0      1213            push    acc
0346 74C0      1214            mov     a,#(__str_12 >> 8)
0348 C0E0      1215            push    acc
034A 7480      1216            mov     a,#0x80
034C C0E0      1217            push    acc
034E 74B0      1218            mov     a,#_buff
0350 C0E0      1219            push    acc
0352 7414      1220            mov     a,#(_buff >> 8)
0354 C0E0      1221            push    acc
0356 7440      1222            mov     a,#0x40
0358 C0E0      1223            push    acc
035A 120000    1224            lcall   _sprintf
035D E581      1225            mov     a,sp
035F 24F8      1226            add     a,#0xf8
0361 F581      1227            mov     sp,a
0363           1228   ;        EFM8_JDY40_test.c:271: sendstr1(buff);
0363 9014B0    1229            mov     dptr,#_buff
0366 75F040    1230            mov     b,#0x40
0369 120000    1231            lcall   _sendstr1
036C           1232   ;        EFM8_JDY40_test.c:272: putchar('.');
036C 75822E    1233            mov     dpl,#0x2E
036F 120000    1234            lcall   _putchar
0372           1235   ;        EFM8_JDY40_test.c:273: waitms_or_RI1(200);
0372 9000C8    1236            mov     dptr,#0x00C8
0375 120000    1237            lcall   _waitms_or_RI1
0378 D003      1238            pop     ar3
037A D002      1239            pop     ar2
037C           1240   L014002?:
037C           1241   ;        EFM8_JDY40_test.c:275: if(RXU1())
037C C002      1242            push    ar2
037E C003      1243            push    ar3
0380 120000    1244            lcall   _RXU1
0383 E4        1245            clr     a
0384 33        1246            rlc     a
0385 D003      1247            pop     ar3
0387 D002      1248            pop     ar2
0389 6000      1249            jz      L014006?
038B           1250   ;        EFM8_JDY40_test.c:277: getstr1(buff);
038B 9014B0    1251            mov     dptr,#_buff
038E 75F040    1252            mov     b,#0x40
0391 C002      1253            push    ar2
0393 C003      1254            push    ar3
0395 120000    1255            lcall   _getstr1
0398           1256   ;        EFM8_JDY40_test.c:278: printf("RX: %s\r\n", buff);
0398 74B0      1257            mov     a,#_buff
039A C0E0      1258            push    acc
039C 7414      1259            mov     a,#(_buff >> 8)
039E C0E0      1260            push    acc
03A0 7440      1261            mov     a,#0x40
03A2 C0E0      1262            push    acc
03A4 7480      1263            mov     a,#__str_13
03A6 C0E0      1264            push    acc
03A8 74C1      1265            mov     a,#(__str_13 >> 8)
03AA C0E0      1266            push    acc
03AC 7480      1267            mov     a,#0x80
03AE C0E0      1268            push    acc
03B0 120000    1269            lcall   _printf
03B3 E581      1270            mov     a,sp
03B5 24FA      1271            add     a,#0xfa
03B7 F581      1272            mov     sp,a
03B9 D003      1273            pop     ar3
03BB D002      1274            pop     ar2
03BD 020000    1275            ljmp    L014006?
03C0           1276            rseg R_CSEG
03C0           1277   
0000           1278            rseg R_XINIT
0000           1279   
0000           1280            rseg R_CONST
0000           1281   __str_0:
0000 436F6D6D  1282            db 'Command: %s'
     616E643A
     202573
000B 00        1283            db 0x00
000C           1284   __str_1:
000C 52657370  1285            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1286            db 0x0D
0019 0A        1287            db 0x0A
001A 00        1288            db 0x00
001B           1289   __str_2:
001B 0D        1290            db 0x0D
001C 0A        1291            db 0x0A
001D 4A44592D  1292            db 'JDY-40 test'
     34302074
     657374
0028 0D        1293            db 0x0D
0029 0A        1294            db 0x0A
002A 00        1295            db 0x00
002B           1296   __str_3:
002B 41542B44  1297            db 'AT+DVID9944'
     56494439
     393434
0036 0D        1298            db 0x0D
0037 0A        1299            db 0x0A
0038 00        1300            db 0x00
0039           1301   __str_4:
0039 41542B56  1302            db 'AT+VER'
     4552
003F 0D        1303            db 0x0D
0040 0A        1304            db 0x0A
0041 00        1305            db 0x00
0042           1306   __str_5:
0042 41542B42  1307            db 'AT+BAUD'
     415544
0049 0D        1308            db 0x0D
004A 0A        1309            db 0x0A
004B 00        1310            db 0x00
004C           1311   __str_6:
004C 41542B52  1312            db 'AT+RFID'
     464944
0053 0D        1313            db 0x0D
0054 0A        1314            db 0x0A
0055 00        1315            db 0x00
0056           1316   __str_7:
0056 41542B44  1317            db 'AT+DVID'
     564944
005D 0D        1318            db 0x0D
005E 0A        1319            db 0x0A
005F 00        1320            db 0x00
0060           1321   __str_8:
0060 41542B52  1322            db 'AT+RFC'
     4643
0066 0D        1323            db 0x0D
0067 0A        1324            db 0x0A
0068 00        1325            db 0x00
0069           1326   __str_9:
0069 41542B50  1327            db 'AT+POWE'
     4F5745
0070 0D        1328            db 0x0D
0071 0A        1329            db 0x0A
0072 00        1330            db 0x00
0073           1331   __str_10:
0073 41542B43  1332            db 'AT+CLSS'
     4C5353
007A 0D        1333            db 0x0D
007B 0A        1334            db 0x0A
007C 00        1335            db 0x00
007D           1336   __str_11:
007D 0D        1337            db 0x0D
007E 50726573  1338            db 'Press and hold the BOOT button to transmit.'
     7320616E
     6420686F
     6C642074
     68652042
     4F4F5420
     62757474
     6F6E2074
     6F207472
     616E736D
     69742E
00A9 0D        1339            db 0x0D
00AA 0A        1340            db 0x0A
00AB 00        1341            db 0x00
00AC           1342   __str_12:
00AC 4A445934  1343            db 'JDY40 test %d'
     30207465
     73742025
     64
00B9 0D        1344            db 0x0D
00BA 0A        1345            db 0x0A
00BB 00        1346            db 0x00
00BC           1347   __str_13:
00BC 52583A20  1348            db 'RX: %s'
     2573
00C2 0D        1349            db 0x0D
00C3 0A        1350            db 0x0A
00C4 00        1351            db 0x00
00C5           1352   
0003           1353            CSEG
0003           1354   
0003           1355   end
