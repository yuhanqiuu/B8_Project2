0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Fri Mar 29 12:31:54 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_test
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _InitPinADC_PARM_2
0000             27            public _main
0000             28            public _LCDprint
0000             29            public _LCD_4BIT
0000             30            public _WriteCommand
0000             31            public _WriteData
0000             32            public _LCD_byte
0000             33            public _LCD_pulse
0000             34            public _SendATCommand
0000             35            public _waitms_or_RI1
0000             36            public _RXU1
0000             37            public _getstr1
0000             38            public _getchar1_with_timeout
0000             39            public _getchar1
0000             40            public _sendstr1
0000             41            public _putchar1
0000             42            public _UART1_Init
0000             43            public _Volts_at_Pin
0000             44            public _Get_ADC
0000             45            public _ADC_at_Pin
0000             46            public _InitPinADC
0000             47            public _waitms
0000             48            public _Timer2_ISR
0000             49            public _TIMER2_Init
0000             50            public _TIMER0_Init
0000             51            public _Timer3us
0000             52            public _InitADC
0000             53            public __c51_external_startup
0000             54            public _LCDprint_PARM_3
0000             55            public _buff
0000             56            public _LCDprint_PARM_2
0000             57   ;--------------------------------------------------------
0000             58   ; Special Function Registers
0000             59   ;--------------------------------------------------------
0000             60   _ACC            DATA 0xe0
0000             61   _ADC0ASAH       DATA 0xb6
0000             62   _ADC0ASAL       DATA 0xb5
0000             63   _ADC0ASCF       DATA 0xa1
0000             64   _ADC0ASCT       DATA 0xc7
0000             65   _ADC0CF0        DATA 0xbc
0000             66   _ADC0CF1        DATA 0xb9
0000             67   _ADC0CF2        DATA 0xdf
0000             68   _ADC0CN0        DATA 0xe8
0000             69   _ADC0CN1        DATA 0xb2
0000             70   _ADC0CN2        DATA 0xb3
0000             71   _ADC0GTH        DATA 0xc4
0000             72   _ADC0GTL        DATA 0xc3
0000             73   _ADC0H          DATA 0xbe
0000             74   _ADC0L          DATA 0xbd
0000             75   _ADC0LTH        DATA 0xc6
0000             76   _ADC0LTL        DATA 0xc5
0000             77   _ADC0MX         DATA 0xbb
0000             78   _B              DATA 0xf0
0000             79   _CKCON0         DATA 0x8e
0000             80   _CKCON1         DATA 0xa6
0000             81   _CLEN0          DATA 0xc6
0000             82   _CLIE0          DATA 0xc7
0000             83   _CLIF0          DATA 0xe8
0000             84   _CLKSEL         DATA 0xa9
0000             85   _CLOUT0         DATA 0xd1
0000             86   _CLU0CF         DATA 0xb1
0000             87   _CLU0FN         DATA 0xaf
0000             88   _CLU0MX         DATA 0x84
0000             89   _CLU1CF         DATA 0xb3
0000             90   _CLU1FN         DATA 0xb2
0000             91   _CLU1MX         DATA 0x85
0000             92   _CLU2CF         DATA 0xb6
0000             93   _CLU2FN         DATA 0xb5
0000             94   _CLU2MX         DATA 0x91
0000             95   _CLU3CF         DATA 0xbf
0000             96   _CLU3FN         DATA 0xbe
0000             97   _CLU3MX         DATA 0xae
0000             98   _CMP0CN0        DATA 0x9b
0000             99   _CMP0CN1        DATA 0x99
0000            100   _CMP0MD         DATA 0x9d
0000            101   _CMP0MX         DATA 0x9f
0000            102   _CMP1CN0        DATA 0xbf
0000            103   _CMP1CN1        DATA 0xac
0000            104   _CMP1MD         DATA 0xab
0000            105   _CMP1MX         DATA 0xaa
0000            106   _CRC0CN0        DATA 0xce
0000            107   _CRC0CN1        DATA 0x86
0000            108   _CRC0CNT        DATA 0xd3
0000            109   _CRC0DAT        DATA 0xcb
0000            110   _CRC0FLIP       DATA 0xcf
0000            111   _CRC0IN         DATA 0xca
0000            112   _CRC0ST         DATA 0xd2
0000            113   _DAC0CF0        DATA 0x91
0000            114   _DAC0CF1        DATA 0x92
0000            115   _DAC0H          DATA 0x85
0000            116   _DAC0L          DATA 0x84
0000            117   _DAC1CF0        DATA 0x93
0000            118   _DAC1CF1        DATA 0x94
0000            119   _DAC1H          DATA 0x8a
0000            120   _DAC1L          DATA 0x89
0000            121   _DAC2CF0        DATA 0x95
0000            122   _DAC2CF1        DATA 0x96
0000            123   _DAC2H          DATA 0x8c
0000            124   _DAC2L          DATA 0x8b
0000            125   _DAC3CF0        DATA 0x9a
0000            126   _DAC3CF1        DATA 0x9c
0000            127   _DAC3H          DATA 0x8e
0000            128   _DAC3L          DATA 0x8d
0000            129   _DACGCF0        DATA 0x88
0000            130   _DACGCF1        DATA 0x98
0000            131   _DACGCF2        DATA 0xa2
0000            132   _DERIVID        DATA 0xad
0000            133   _DEVICEID       DATA 0xb5
0000            134   _DPH            DATA 0x83
0000            135   _DPL            DATA 0x82
0000            136   _EIE1           DATA 0xe6
0000            137   _EIE2           DATA 0xf3
0000            138   _EIP1           DATA 0xbb
0000            139   _EIP1H          DATA 0xee
0000            140   _EIP2           DATA 0xed
0000            141   _EIP2H          DATA 0xf6
0000            142   _EMI0CN         DATA 0xe7
0000            143   _FLKEY          DATA 0xb7
0000            144   _HFO0CAL        DATA 0xc7
0000            145   _HFO1CAL        DATA 0xd6
0000            146   _HFOCN          DATA 0xef
0000            147   _I2C0ADM        DATA 0xff
0000            148   _I2C0CN0        DATA 0xba
0000            149   _I2C0DIN        DATA 0xbc
0000            150   _I2C0DOUT       DATA 0xbb
0000            151   _I2C0FCN0       DATA 0xad
0000            152   _I2C0FCN1       DATA 0xab
0000            153   _I2C0FCT        DATA 0xf5
0000            154   _I2C0SLAD       DATA 0xbd
0000            155   _I2C0STAT       DATA 0xb9
0000            156   _IE             DATA 0xa8
0000            157   _IP             DATA 0xb8
0000            158   _IPH            DATA 0xf2
0000            159   _IT01CF         DATA 0xe4
0000            160   _LFO0CN         DATA 0xb1
0000            161   _P0             DATA 0x80
0000            162   _P0MASK         DATA 0xfe
0000            163   _P0MAT          DATA 0xfd
0000            164   _P0MDIN         DATA 0xf1
0000            165   _P0MDOUT        DATA 0xa4
0000            166   _P0SKIP         DATA 0xd4
0000            167   _P1             DATA 0x90
0000            168   _P1MASK         DATA 0xee
0000            169   _P1MAT          DATA 0xed
0000            170   _P1MDIN         DATA 0xf2
0000            171   _P1MDOUT        DATA 0xa5
0000            172   _P1SKIP         DATA 0xd5
0000            173   _P2             DATA 0xa0
0000            174   _P2MASK         DATA 0xfc
0000            175   _P2MAT          DATA 0xfb
0000            176   _P2MDIN         DATA 0xf3
0000            177   _P2MDOUT        DATA 0xa6
0000            178   _P2SKIP         DATA 0xcc
0000            179   _P3             DATA 0xb0
0000            180   _P3MDIN         DATA 0xf4
0000            181   _P3MDOUT        DATA 0x9c
0000            182   _PCA0CENT       DATA 0x9e
0000            183   _PCA0CLR        DATA 0x9c
0000            184   _PCA0CN0        DATA 0xd8
0000            185   _PCA0CPH0       DATA 0xfc
0000            186   _PCA0CPH1       DATA 0xea
0000            187   _PCA0CPH2       DATA 0xec
0000            188   _PCA0CPH3       DATA 0xf5
0000            189   _PCA0CPH4       DATA 0x85
0000            190   _PCA0CPH5       DATA 0xde
0000            191   _PCA0CPL0       DATA 0xfb
0000            192   _PCA0CPL1       DATA 0xe9
0000            193   _PCA0CPL2       DATA 0xeb
0000            194   _PCA0CPL3       DATA 0xf4
0000            195   _PCA0CPL4       DATA 0x84
0000            196   _PCA0CPL5       DATA 0xdd
0000            197   _PCA0CPM0       DATA 0xda
0000            198   _PCA0CPM1       DATA 0xdb
0000            199   _PCA0CPM2       DATA 0xdc
0000            200   _PCA0CPM3       DATA 0xae
0000            201   _PCA0CPM4       DATA 0xaf
0000            202   _PCA0CPM5       DATA 0xcc
0000            203   _PCA0H          DATA 0xfa
0000            204   _PCA0L          DATA 0xf9
0000            205   _PCA0MD         DATA 0xd9
0000            206   _PCA0POL        DATA 0x96
0000            207   _PCA0PWM        DATA 0xf7
0000            208   _PCON0          DATA 0x87
0000            209   _PCON1          DATA 0xcd
0000            210   _PFE0CN         DATA 0xc1
0000            211   _PRTDRV         DATA 0xf6
0000            212   _PSCTL          DATA 0x8f
0000            213   _PSTAT0         DATA 0xaa
0000            214   _PSW            DATA 0xd0
0000            215   _REF0CN         DATA 0xd1
0000            216   _REG0CN         DATA 0xc9
0000            217   _REVID          DATA 0xb6
0000            218   _RSTSRC         DATA 0xef
0000            219   _SBCON1         DATA 0x94
0000            220   _SBRLH1         DATA 0x96
0000            221   _SBRLL1         DATA 0x95
0000            222   _SBUF           DATA 0x99
0000            223   _SBUF0          DATA 0x99
0000            224   _SBUF1          DATA 0x92
0000            225   _SCON           DATA 0x98
0000            226   _SCON0          DATA 0x98
0000            227   _SCON1          DATA 0xc8
0000            228   _SFRPAGE        DATA 0xa7
0000            229   _SFRPGCN        DATA 0xbc
0000            230   _SFRSTACK       DATA 0xd7
0000            231   _SMB0ADM        DATA 0xd6
0000            232   _SMB0ADR        DATA 0xd7
0000            233   _SMB0CF         DATA 0xc1
0000            234   _SMB0CN0        DATA 0xc0
0000            235   _SMB0DAT        DATA 0xc2
0000            236   _SMB0FCN0       DATA 0xc3
0000            237   _SMB0FCN1       DATA 0xc4
0000            238   _SMB0FCT        DATA 0xef
0000            239   _SMB0RXLN       DATA 0xc5
0000            240   _SMB0TC         DATA 0xac
0000            241   _SMOD1          DATA 0x93
0000            242   _SP             DATA 0x81
0000            243   _SPI0CFG        DATA 0xa1
0000            244   _SPI0CKR        DATA 0xa2
0000            245   _SPI0CN0        DATA 0xf8
0000            246   _SPI0DAT        DATA 0xa3
0000            247   _SPI0FCN0       DATA 0x9a
0000            248   _SPI0FCN1       DATA 0x9b
0000            249   _SPI0FCT        DATA 0xf7
0000            250   _SPI0PCF        DATA 0xdf
0000            251   _TCON           DATA 0x88
0000            252   _TH0            DATA 0x8c
0000            253   _TH1            DATA 0x8d
0000            254   _TL0            DATA 0x8a
0000            255   _TL1            DATA 0x8b
0000            256   _TMOD           DATA 0x89
0000            257   _TMR2CN0        DATA 0xc8
0000            258   _TMR2CN1        DATA 0xfd
0000            259   _TMR2H          DATA 0xcf
0000            260   _TMR2L          DATA 0xce
0000            261   _TMR2RLH        DATA 0xcb
0000            262   _TMR2RLL        DATA 0xca
0000            263   _TMR3CN0        DATA 0x91
0000            264   _TMR3CN1        DATA 0xfe
0000            265   _TMR3H          DATA 0x95
0000            266   _TMR3L          DATA 0x94
0000            267   _TMR3RLH        DATA 0x93
0000            268   _TMR3RLL        DATA 0x92
0000            269   _TMR4CN0        DATA 0x98
0000            270   _TMR4CN1        DATA 0xff
0000            271   _TMR4H          DATA 0xa5
0000            272   _TMR4L          DATA 0xa4
0000            273   _TMR4RLH        DATA 0xa3
0000            274   _TMR4RLL        DATA 0xa2
0000            275   _TMR5CN0        DATA 0xc0
0000            276   _TMR5CN1        DATA 0xf1
0000            277   _TMR5H          DATA 0xd5
0000            278   _TMR5L          DATA 0xd4
0000            279   _TMR5RLH        DATA 0xd3
0000            280   _TMR5RLL        DATA 0xd2
0000            281   _UART0PCF       DATA 0xd9
0000            282   _UART1FCN0      DATA 0x9d
0000            283   _UART1FCN1      DATA 0xd8
0000            284   _UART1FCT       DATA 0xfa
0000            285   _UART1LIN       DATA 0x9e
0000            286   _UART1PCF       DATA 0xda
0000            287   _VDM0CN         DATA 0xff
0000            288   _WDTCN          DATA 0x97
0000            289   _XBR0           DATA 0xe1
0000            290   _XBR1           DATA 0xe2
0000            291   _XBR2           DATA 0xe3
0000            292   _XOSC0CN        DATA 0x86
0000            293   _DPTR           DATA 0x8382
0000            294   _TMR2RL         DATA 0xcbca
0000            295   _TMR3RL         DATA 0x9392
0000            296   _TMR4RL         DATA 0xa3a2
0000            297   _TMR5RL         DATA 0xd3d2
0000            298   _TMR0           DATA 0x8c8a
0000            299   _TMR1           DATA 0x8d8b
0000            300   _TMR2           DATA 0xcfce
0000            301   _TMR3           DATA 0x9594
0000            302   _TMR4           DATA 0xa5a4
0000            303   _TMR5           DATA 0xd5d4
0000            304   _SBRL1          DATA 0x9695
0000            305   _PCA0           DATA 0xfaf9
0000            306   _PCA0CP0        DATA 0xfcfb
0000            307   _PCA0CP1        DATA 0xeae9
0000            308   _PCA0CP2        DATA 0xeceb
0000            309   _PCA0CP3        DATA 0xf5f4
0000            310   _PCA0CP4        DATA 0x8584
0000            311   _PCA0CP5        DATA 0xdedd
0000            312   _ADC0ASA        DATA 0xb6b5
0000            313   _ADC0GT         DATA 0xc4c3
0000            314   _ADC0           DATA 0xbebd
0000            315   _ADC0LT         DATA 0xc6c5
0000            316   _DAC0           DATA 0x8584
0000            317   _DAC1           DATA 0x8a89
0000            318   _DAC2           DATA 0x8c8b
0000            319   _DAC3           DATA 0x8e8d
0000            320   ;--------------------------------------------------------
0000            321   ; special function bits
0000            322   ;--------------------------------------------------------
0000            323   _ACC_0          BIT 0xe0
0000            324   _ACC_1          BIT 0xe1
0000            325   _ACC_2          BIT 0xe2
0000            326   _ACC_3          BIT 0xe3
0000            327   _ACC_4          BIT 0xe4
0000            328   _ACC_5          BIT 0xe5
0000            329   _ACC_6          BIT 0xe6
0000            330   _ACC_7          BIT 0xe7
0000            331   _TEMPE          BIT 0xe8
0000            332   _ADGN0          BIT 0xe9
0000            333   _ADGN1          BIT 0xea
0000            334   _ADWINT         BIT 0xeb
0000            335   _ADBUSY         BIT 0xec
0000            336   _ADINT          BIT 0xed
0000            337   _IPOEN          BIT 0xee
0000            338   _ADEN           BIT 0xef
0000            339   _B_0            BIT 0xf0
0000            340   _B_1            BIT 0xf1
0000            341   _B_2            BIT 0xf2
0000            342   _B_3            BIT 0xf3
0000            343   _B_4            BIT 0xf4
0000            344   _B_5            BIT 0xf5
0000            345   _B_6            BIT 0xf6
0000            346   _B_7            BIT 0xf7
0000            347   _C0FIF          BIT 0xe8
0000            348   _C0RIF          BIT 0xe9
0000            349   _C1FIF          BIT 0xea
0000            350   _C1RIF          BIT 0xeb
0000            351   _C2FIF          BIT 0xec
0000            352   _C2RIF          BIT 0xed
0000            353   _C3FIF          BIT 0xee
0000            354   _C3RIF          BIT 0xef
0000            355   _D1SRC0         BIT 0x88
0000            356   _D1SRC1         BIT 0x89
0000            357   _D1AMEN         BIT 0x8a
0000            358   _D01REFSL       BIT 0x8b
0000            359   _D3SRC0         BIT 0x8c
0000            360   _D3SRC1         BIT 0x8d
0000            361   _D3AMEN         BIT 0x8e
0000            362   _D23REFSL       BIT 0x8f
0000            363   _D0UDIS         BIT 0x98
0000            364   _D1UDIS         BIT 0x99
0000            365   _D2UDIS         BIT 0x9a
0000            366   _D3UDIS         BIT 0x9b
0000            367   _EX0            BIT 0xa8
0000            368   _ET0            BIT 0xa9
0000            369   _EX1            BIT 0xaa
0000            370   _ET1            BIT 0xab
0000            371   _ES0            BIT 0xac
0000            372   _ET2            BIT 0xad
0000            373   _ESPI0          BIT 0xae
0000            374   _EA             BIT 0xaf
0000            375   _PX0            BIT 0xb8
0000            376   _PT0            BIT 0xb9
0000            377   _PX1            BIT 0xba
0000            378   _PT1            BIT 0xbb
0000            379   _PS0            BIT 0xbc
0000            380   _PT2            BIT 0xbd
0000            381   _PSPI0          BIT 0xbe
0000            382   _P0_0           BIT 0x80
0000            383   _P0_1           BIT 0x81
0000            384   _P0_2           BIT 0x82
0000            385   _P0_3           BIT 0x83
0000            386   _P0_4           BIT 0x84
0000            387   _P0_5           BIT 0x85
0000            388   _P0_6           BIT 0x86
0000            389   _P0_7           BIT 0x87
0000            390   _P1_0           BIT 0x90
0000            391   _P1_1           BIT 0x91
0000            392   _P1_2           BIT 0x92
0000            393   _P1_3           BIT 0x93
0000            394   _P1_4           BIT 0x94
0000            395   _P1_5           BIT 0x95
0000            396   _P1_6           BIT 0x96
0000            397   _P1_7           BIT 0x97
0000            398   _P2_0           BIT 0xa0
0000            399   _P2_1           BIT 0xa1
0000            400   _P2_2           BIT 0xa2
0000            401   _P2_3           BIT 0xa3
0000            402   _P2_4           BIT 0xa4
0000            403   _P2_5           BIT 0xa5
0000            404   _P2_6           BIT 0xa6
0000            405   _P3_0           BIT 0xb0
0000            406   _P3_1           BIT 0xb1
0000            407   _P3_2           BIT 0xb2
0000            408   _P3_3           BIT 0xb3
0000            409   _P3_4           BIT 0xb4
0000            410   _P3_7           BIT 0xb7
0000            411   _CCF0           BIT 0xd8
0000            412   _CCF1           BIT 0xd9
0000            413   _CCF2           BIT 0xda
0000            414   _CCF3           BIT 0xdb
0000            415   _CCF4           BIT 0xdc
0000            416   _CCF5           BIT 0xdd
0000            417   _CR             BIT 0xde
0000            418   _CF             BIT 0xdf
0000            419   _PARITY         BIT 0xd0
0000            420   _F1             BIT 0xd1
0000            421   _OV             BIT 0xd2
0000            422   _RS0            BIT 0xd3
0000            423   _RS1            BIT 0xd4
0000            424   _F0             BIT 0xd5
0000            425   _AC             BIT 0xd6
0000            426   _CY             BIT 0xd7
0000            427   _RI             BIT 0x98
0000            428   _TI             BIT 0x99
0000            429   _RB8            BIT 0x9a
0000            430   _TB8            BIT 0x9b
0000            431   _REN            BIT 0x9c
0000            432   _CE             BIT 0x9d
0000            433   _SMODE          BIT 0x9e
0000            434   _RI1            BIT 0xc8
0000            435   _TI1            BIT 0xc9
0000            436   _RBX1           BIT 0xca
0000            437   _TBX1           BIT 0xcb
0000            438   _REN1           BIT 0xcc
0000            439   _PERR1          BIT 0xcd
0000            440   _OVR1           BIT 0xce
0000            441   _SI             BIT 0xc0
0000            442   _ACK            BIT 0xc1
0000            443   _ARBLOST        BIT 0xc2
0000            444   _ACKRQ          BIT 0xc3
0000            445   _STO            BIT 0xc4
0000            446   _STA            BIT 0xc5
0000            447   _TXMODE         BIT 0xc6
0000            448   _MASTER         BIT 0xc7
0000            449   _SPIEN          BIT 0xf8
0000            450   _TXNF           BIT 0xf9
0000            451   _NSSMD0         BIT 0xfa
0000            452   _NSSMD1         BIT 0xfb
0000            453   _RXOVRN         BIT 0xfc
0000            454   _MODF           BIT 0xfd
0000            455   _WCOL           BIT 0xfe
0000            456   _SPIF           BIT 0xff
0000            457   _IT0            BIT 0x88
0000            458   _IE0            BIT 0x89
0000            459   _IT1            BIT 0x8a
0000            460   _IE1            BIT 0x8b
0000            461   _TR0            BIT 0x8c
0000            462   _TF0            BIT 0x8d
0000            463   _TR1            BIT 0x8e
0000            464   _TF1            BIT 0x8f
0000            465   _T2XCLK0        BIT 0xc8
0000            466   _T2XCLK1        BIT 0xc9
0000            467   _TR2            BIT 0xca
0000            468   _T2SPLIT        BIT 0xcb
0000            469   _TF2CEN         BIT 0xcc
0000            470   _TF2LEN         BIT 0xcd
0000            471   _TF2L           BIT 0xce
0000            472   _TF2H           BIT 0xcf
0000            473   _T4XCLK0        BIT 0x98
0000            474   _T4XCLK1        BIT 0x99
0000            475   _TR4            BIT 0x9a
0000            476   _T4SPLIT        BIT 0x9b
0000            477   _TF4CEN         BIT 0x9c
0000            478   _TF4LEN         BIT 0x9d
0000            479   _TF4L           BIT 0x9e
0000            480   _TF4H           BIT 0x9f
0000            481   _T5XCLK0        BIT 0xc0
0000            482   _T5XCLK1        BIT 0xc1
0000            483   _TR5            BIT 0xc2
0000            484   _T5SPLIT        BIT 0xc3
0000            485   _TF5CEN         BIT 0xc4
0000            486   _TF5LEN         BIT 0xc5
0000            487   _TF5L           BIT 0xc6
0000            488   _TF5H           BIT 0xc7
0000            489   _RIE            BIT 0xd8
0000            490   _RXTO0          BIT 0xd9
0000            491   _RXTO1          BIT 0xda
0000            492   _RFRQ           BIT 0xdb
0000            493   _TIE            BIT 0xdc
0000            494   _TXHOLD         BIT 0xdd
0000            495   _TXNF1          BIT 0xde
0000            496   _TFRQ           BIT 0xdf
0000            497   ;--------------------------------------------------------
0000            498   ; overlayable register banks
0000            499   ;--------------------------------------------------------
0000            500            rbank0 segment data overlay
0000            501   ;--------------------------------------------------------
0000            502   ; internal ram data
0000            503   ;--------------------------------------------------------
0000            504            rseg R_DSEG
0000            505   _LCDprint_PARM_2:
0000            506            ds 1
0001            507   _main_timeout_cnt_1_123:
0001            508            ds 2
0003            509   _main_volt_x_1_123:
0003            510            ds 2
0005            511   ;--------------------------------------------------------
0005            512   ; overlayable items in internal ram 
0005            513   ;--------------------------------------------------------
0000            514            rseg    R_OSEG
0000            515            rseg    R_OSEG
0000            516   _InitPinADC_PARM_2:
0000            517            ds 1
0001            518            rseg    R_OSEG
0001            519            rseg    R_OSEG
0001            520            rseg    R_OSEG
0001            521   ;--------------------------------------------------------
0001            522   ; indirectly addressable internal ram data
0001            523   ;--------------------------------------------------------
0000            524            rseg R_ISEG
0000            525   _buff:
0000            526            ds 20
0014            527   ;--------------------------------------------------------
0014            528   ; absolute internal ram data
0014            529   ;--------------------------------------------------------
0000            530            DSEG
0000            531   ;--------------------------------------------------------
0000            532   ; bit data
0000            533   ;--------------------------------------------------------
0000            534            rseg R_BSEG
0000            535   _LCDprint_PARM_3:
0000            536            DBIT    1
0001            537   ;--------------------------------------------------------
0001            538   ; paged external ram data
0001            539   ;--------------------------------------------------------
0000            540            rseg R_PSEG
0000            541   ;--------------------------------------------------------
0000            542   ; external ram data
0000            543   ;--------------------------------------------------------
0000            544            rseg R_XSEG
0000            545   ;--------------------------------------------------------
0000            546   ; absolute external ram data
0000            547   ;--------------------------------------------------------
0000            548            XSEG
0000            549   ;--------------------------------------------------------
0000            550   ; external initialized ram data
0000            551   ;--------------------------------------------------------
0000            552            rseg R_IXSEG
0000            553            rseg R_HOME
0000            554            rseg R_GSINIT
0000            555            rseg R_CSEG
0000            556   ;--------------------------------------------------------
0000            557   ; Reset entry point and interrupt vectors
0000            558   ;--------------------------------------------------------
0000            559            CSEG at 0x0000
0000 020000     560            ljmp    _crt0
0003            561   ;--------------------------------------------------------
0003            562   ; global & static initialisations
0003            563   ;--------------------------------------------------------
0000            564            rseg R_HOME
0000            565            rseg R_GSINIT
0000            566            rseg R_GSINIT
0000            567   ;--------------------------------------------------------
0000            568   ; data variables initialization
0000            569   ;--------------------------------------------------------
0000            570            rseg R_DINIT
0000            571            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            572   ;--------------------------------------------------------
0000            573   ; code
0000            574   ;--------------------------------------------------------
0000            575            rseg R_CSEG
0000            576   ;------------------------------------------------------------
0000            577   ;Allocation info for local variables in function '_c51_external_startup'
0000            578   ;------------------------------------------------------------
0000            579   ;------------------------------------------------------------
0000            580   ;        EFM8_JDY40_test.c:35: char _c51_external_startup (void)
0000            581   ;        -----------------------------------------
0000            582   ;         function _c51_external_startup
0000            583   ;        -----------------------------------------
0000            584   __c51_external_startup:
0000            585            using   0
0000            586   ;        EFM8_JDY40_test.c:38: SFRPAGE = 0x00;
0000 75A700     587            mov     _SFRPAGE,#0x00
0003            588   ;        EFM8_JDY40_test.c:39: WDTCN = 0xDE; //First key
0003 7597DE     589            mov     _WDTCN,#0xDE
0006            590   ;        EFM8_JDY40_test.c:40: WDTCN = 0xAD; //Second key
0006 7597AD     591            mov     _WDTCN,#0xAD
0009            592   ;        EFM8_JDY40_test.c:42: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     593            mov     _VDM0CN,#0x80
000C            594   ;        EFM8_JDY40_test.c:43: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     595            mov     _RSTSRC,#0x06
000F            596   ;        EFM8_JDY40_test.c:50: SFRPAGE = 0x10;
000F 75A710     597            mov     _SFRPAGE,#0x10
0012            598   ;        EFM8_JDY40_test.c:51: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     599            mov     _PFE0CN,#0x20
0015            600   ;        EFM8_JDY40_test.c:52: SFRPAGE = 0x00;
0015 75A700     601            mov     _SFRPAGE,#0x00
0018            602   ;        EFM8_JDY40_test.c:73: CLKSEL = 0x00;
0018 75A900     603            mov     _CLKSEL,#0x00
001B            604   ;        EFM8_JDY40_test.c:74: CLKSEL = 0x00;
001B 75A900     605            mov     _CLKSEL,#0x00
001E            606   ;        EFM8_JDY40_test.c:75: while ((CLKSEL & 0x80) == 0);
001E            607   L002001?:
001E E5A9       608            mov     a,_CLKSEL
0020 30E7B0     609            jnb     acc.7,L002001?
0023            610   ;        EFM8_JDY40_test.c:76: CLKSEL = 0x03;
0023 75A903     611            mov     _CLKSEL,#0x03
0026            612   ;        EFM8_JDY40_test.c:77: CLKSEL = 0x03;
0026 75A903     613            mov     _CLKSEL,#0x03
0029            614   ;        EFM8_JDY40_test.c:78: while ((CLKSEL & 0x80) == 0);
0029            615   L002004?:
0029 E5A9       616            mov     a,_CLKSEL
002B 30E730     617            jnb     acc.7,L002004?
002E            618   ;        EFM8_JDY40_test.c:83: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     619            orl     _P0MDOUT,#0x11
0031            620   ;        EFM8_JDY40_test.c:84: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     621            orl     _P2MDOUT,#0x01
0034            622   ;        EFM8_JDY40_test.c:85: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     623            mov     _XBR0,#0x01
0037            624   ;        EFM8_JDY40_test.c:86: XBR1     = 0X00;
0037 75E200     625            mov     _XBR1,#0x00
003A            626   ;        EFM8_JDY40_test.c:87: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     627            mov     _XBR2,#0x41
003D            628   ;        EFM8_JDY40_test.c:93: SCON0 = 0x10;
003D 759810     629            mov     _SCON0,#0x10
0040            630   ;        EFM8_JDY40_test.c:94: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     631            mov     _TH1,#0xE6
0043            632   ;        EFM8_JDY40_test.c:95: TL1 = TH1;      // Init Timer1
0043 858D8B     633            mov     _TL1,_TH1
0046            634   ;        EFM8_JDY40_test.c:96: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     635            anl     _TMOD,#0x0F
0049            636   ;        EFM8_JDY40_test.c:97: TMOD |=  0x20;                       
0049 438920     637            orl     _TMOD,#0x20
004C            638   ;        EFM8_JDY40_test.c:98: TR1 = 1; // START Timer1
004C D28E       639            setb    _TR1
004E            640   ;        EFM8_JDY40_test.c:99: TI = 1;  // Indicate TX0 ready
004E D299       641            setb    _TI
0050            642   ;        EFM8_JDY40_test.c:101: return 0;
0050 758200     643            mov     dpl,#0x00
0053 22         644            ret
0054            645   ;------------------------------------------------------------
0054            646   ;Allocation info for local variables in function 'InitADC'
0054            647   ;------------------------------------------------------------
0054            648   ;------------------------------------------------------------
0054            649   ;        EFM8_JDY40_test.c:104: void InitADC (void)
0054            650   ;        -----------------------------------------
0054            651   ;         function InitADC
0054            652   ;        -----------------------------------------
0054            653   _InitADC:
0054            654   ;        EFM8_JDY40_test.c:106: SFRPAGE = 0x00;
0054 75A700     655            mov     _SFRPAGE,#0x00
0057            656   ;        EFM8_JDY40_test.c:107: ADEN=0; // Disable ADC
0057 C2EF       657            clr     _ADEN
0059            658   ;        EFM8_JDY40_test.c:112: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     659            mov     _ADC0CN1,#0x80
005C            660   ;        EFM8_JDY40_test.c:116: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     661            mov     _ADC0CF0,#0x20
005F            662   ;        EFM8_JDY40_test.c:120: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     663            mov     _ADC0CF1,#0x1E
0062            664   ;        EFM8_JDY40_test.c:129: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     665            mov     _ADC0CN0,#0x00
0065            666   ;        EFM8_JDY40_test.c:134: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     667            mov     _ADC0CF2,#0x3F
0068            668   ;        EFM8_JDY40_test.c:138: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     669            mov     _ADC0CN2,#0x00
006B            670   ;        EFM8_JDY40_test.c:140: ADEN=1; // Enable ADC
006B D2EF       671            setb    _ADEN
006D 22         672            ret
006E            673   ;------------------------------------------------------------
006E            674   ;Allocation info for local variables in function 'Timer3us'
006E            675   ;------------------------------------------------------------
006E            676   ;us                        Allocated to registers r2 
006E            677   ;i                         Allocated to registers r3 
006E            678   ;------------------------------------------------------------
006E            679   ;        EFM8_JDY40_test.c:145: void Timer3us(unsigned char us)
006E            680   ;        -----------------------------------------
006E            681   ;         function Timer3us
006E            682   ;        -----------------------------------------
006E            683   _Timer3us:
006E AA82       684            mov     r2,dpl
0070            685   ;        EFM8_JDY40_test.c:150: CKCON0|=0b_0100_0000;
0070 438E40     686            orl     _CKCON0,#0x40
0073            687   ;        EFM8_JDY40_test.c:152: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     688            mov     _TMR3RL,#0xB8
0076 7593FF     689            mov     (_TMR3RL >> 8),#0xFF
0079            690   ;        EFM8_JDY40_test.c:153: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     691            mov     _TMR3,_TMR3RL
007C 859395     692            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            693   ;        EFM8_JDY40_test.c:155: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     694            mov     _TMR3CN0,#0x04
0082            695   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       696            mov     r3,#0x00
0084            697   L004004?:
0084 C3         698            clr     c
0085 EB         699            mov     a,r3
0086 9A         700            subb    a,r2
0087 5000       701            jnc     L004007?
0089            702   ;        EFM8_JDY40_test.c:158: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            703   L004001?:
0089 E591       704            mov     a,_TMR3CN0
008B 30E730     705            jnb     acc.7,L004001?
008E            706   ;        EFM8_JDY40_test.c:159: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     707            anl     _TMR3CN0,#0x7F
0091            708   ;        EFM8_JDY40_test.c:156: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         709            inc     r3
0092 8000       710            sjmp    L004004?
0094            711   L004007?:
0094            712   ;        EFM8_JDY40_test.c:161: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     713            mov     _TMR3CN0,#0x00
0097 22         714            ret
0098            715   ;------------------------------------------------------------
0098            716   ;Allocation info for local variables in function 'TIMER0_Init'
0098            717   ;------------------------------------------------------------
0098            718   ;------------------------------------------------------------
0098            719   ;        EFM8_JDY40_test.c:164: void TIMER0_Init(void)
0098            720   ;        -----------------------------------------
0098            721   ;         function TIMER0_Init
0098            722   ;        -----------------------------------------
0098            723   _TIMER0_Init:
0098            724   ;        EFM8_JDY40_test.c:166: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0098 5389F0     725            anl     _TMOD,#0xF0
009B            726   ;        EFM8_JDY40_test.c:167: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
009B 438901     727            orl     _TMOD,#0x01
009E            728   ;        EFM8_JDY40_test.c:168: TR0=0; // Stop Timer/Counter 0
009E C28C       729            clr     _TR0
00A0 22         730            ret
00A1            731   ;------------------------------------------------------------
00A1            732   ;Allocation info for local variables in function 'TIMER2_Init'
00A1            733   ;------------------------------------------------------------
00A1            734   ;------------------------------------------------------------
00A1            735   ;        EFM8_JDY40_test.c:174: void TIMER2_Init(void){
00A1            736   ;        -----------------------------------------
00A1            737   ;         function TIMER2_Init
00A1            738   ;        -----------------------------------------
00A1            739   _TIMER2_Init:
00A1            740   ;        EFM8_JDY40_test.c:176: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
00A1 75C800     741            mov     _TMR2CN0,#0x00
00A4            742   ;        EFM8_JDY40_test.c:177: CKCON0|=0b_0001_0000;
00A4 438E10     743            orl     _CKCON0,#0x10
00A7            744   ;        EFM8_JDY40_test.c:178: TMR2RL=(-(SYSCLK/(2*DEFAULT_F))); // Initialize reload value
00A7 75CAEE     745            mov     _TMR2RL,#0xEE
00AA 75CBF6     746            mov     (_TMR2RL >> 8),#0xF6
00AD            747   ;        EFM8_JDY40_test.c:179: TMR2=0xffff;   // Set to reload immediately
00AD 75CEFF     748            mov     _TMR2,#0xFF
00B0 75CFFF     749            mov     (_TMR2 >> 8),#0xFF
00B3            750   ;        EFM8_JDY40_test.c:180: ET2=1;         // Enable Timer2 interrupts
00B3 D2AD       751            setb    _ET2
00B5            752   ;        EFM8_JDY40_test.c:181: TR2=1;         // Start Timer2
00B5 D2CA       753            setb    _TR2
00B7            754   ;        EFM8_JDY40_test.c:182: EA=1; // Global interrupt enable
00B7 D2AF       755            setb    _EA
00B9 22         756            ret
00BA            757   ;------------------------------------------------------------
00BA            758   ;Allocation info for local variables in function 'Timer2_ISR'
00BA            759   ;------------------------------------------------------------
00BA            760   ;------------------------------------------------------------
00BA            761   ;        EFM8_JDY40_test.c:185: void Timer2_ISR (void) //interrupt INTERRUPT_TIMER2
00BA            762   ;        -----------------------------------------
00BA            763   ;         function Timer2_ISR
00BA            764   ;        -----------------------------------------
00BA            765   _Timer2_ISR:
00BA            766   ;        EFM8_JDY40_test.c:187: TF2H = 0; // Clear Timer2 interrupt flag
00BA C2CF       767            clr     _TF2H
00BC            768   ;        EFM8_JDY40_test.c:188: OUT0=!OUT0;
00BC B2B3       769            cpl     _P3_3
00BE 22         770            ret
00BF            771   ;------------------------------------------------------------
00BF            772   ;Allocation info for local variables in function 'waitms'
00BF            773   ;------------------------------------------------------------
00BF            774   ;ms                        Allocated to registers r2 r3 
00BF            775   ;j                         Allocated to registers r4 r5 
00BF            776   ;k                         Allocated to registers r6 
00BF            777   ;------------------------------------------------------------
00BF            778   ;        EFM8_JDY40_test.c:192: void waitms (unsigned int ms)
00BF            779   ;        -----------------------------------------
00BF            780   ;         function waitms
00BF            781   ;        -----------------------------------------
00BF            782   _waitms:
00BF AA82       783            mov     r2,dpl
00C1 AB83       784            mov     r3,dph
00C3            785   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00C3 7C00       786            mov     r4,#0x00
00C5 7D00       787            mov     r5,#0x00
00C7            788   L008005?:
00C7 C3         789            clr     c
00C8 EC         790            mov     a,r4
00C9 9A         791            subb    a,r2
00CA ED         792            mov     a,r5
00CB 9B         793            subb    a,r3
00CC 5000       794            jnc     L008009?
00CE            795   ;        EFM8_JDY40_test.c:197: for (k=0; k<4; k++) Timer3us(250);
00CE 7E00       796            mov     r6,#0x00
00D0            797   L008001?:
00D0 BE0470     798            cjne    r6,#0x04,L008018?
00D3            799   L008018?:
00D3 5000       800            jnc     L008007?
00D5 7582FA     801            mov     dpl,#0xFA
00D8 C002       802            push    ar2
00DA C003       803            push    ar3
00DC C004       804            push    ar4
00DE C005       805            push    ar5
00E0 C006       806            push    ar6
00E2 120000     807            lcall   _Timer3us
00E5 D006       808            pop     ar6
00E7 D005       809            pop     ar5
00E9 D004       810            pop     ar4
00EB D003       811            pop     ar3
00ED D002       812            pop     ar2
00EF 0E         813            inc     r6
00F0 8000       814            sjmp    L008001?
00F2            815   L008007?:
00F2            816   ;        EFM8_JDY40_test.c:196: for(j=0; j<ms; j++)
00F2 0C         817            inc     r4
00F3 BC00B0     818            cjne    r4,#0x00,L008005?
00F6 0D         819            inc     r5
00F7 8000       820            sjmp    L008005?
00F9            821   L008009?:
00F9 22         822            ret
00FA            823   ;------------------------------------------------------------
00FA            824   ;Allocation info for local variables in function 'InitPinADC'
00FA            825   ;------------------------------------------------------------
00FA            826   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00FA            827   ;portno                    Allocated to registers r2 
00FA            828   ;mask                      Allocated to registers r3 
00FA            829   ;------------------------------------------------------------
00FA            830   ;        EFM8_JDY40_test.c:200: void InitPinADC (unsigned char portno, unsigned char pinno)
00FA            831   ;        -----------------------------------------
00FA            832   ;         function InitPinADC
00FA            833   ;        -----------------------------------------
00FA            834   _InitPinADC:
00FA AA82       835            mov     r2,dpl
00FC            836   ;        EFM8_JDY40_test.c:204: mask=1<<pinno;
00FC 8560F0     837            mov     b,_InitPinADC_PARM_2
00FF 05F0       838            inc     b
0101 7401       839            mov     a,#0x01
0103 8000       840            sjmp    L009013?
0105            841   L009011?:
0105 25E0       842            add     a,acc
0107            843   L009013?:
0107 D5F070     844            djnz    b,L009011?
010A FB         845            mov     r3,a
010B            846   ;        EFM8_JDY40_test.c:206: SFRPAGE = 0x20;
010B 75A720     847            mov     _SFRPAGE,#0x20
010E            848   ;        EFM8_JDY40_test.c:207: switch (portno)
010E BA00B0     849            cjne    r2,#0x00,L009014?
0111 8000       850            sjmp    L009001?
0113            851   L009014?:
0113 BA0130     852            cjne    r2,#0x01,L009015?
0116 8000       853            sjmp    L009002?
0118            854   L009015?:
0118            855   ;        EFM8_JDY40_test.c:209: case 0:
0118 BA02B0     856            cjne    r2,#0x02,L009005?
011B 8000       857            sjmp    L009003?
011D            858   L009001?:
011D            859   ;        EFM8_JDY40_test.c:210: P0MDIN &= (~mask); // Set pin as analog input
011D EB         860            mov     a,r3
011E F4         861            cpl     a
011F FA         862            mov     r2,a
0120 52F1       863            anl     _P0MDIN,a
0122            864   ;        EFM8_JDY40_test.c:211: P0SKIP |= mask; // Skip Crossbar decoding for this pin
0122 EB         865            mov     a,r3
0123 42D4       866            orl     _P0SKIP,a
0125            867   ;        EFM8_JDY40_test.c:212: break;
0125            868   ;        EFM8_JDY40_test.c:213: case 1:
0125 8000       869            sjmp    L009005?
0127            870   L009002?:
0127            871   ;        EFM8_JDY40_test.c:214: P1MDIN &= (~mask); // Set pin as analog input
0127 EB         872            mov     a,r3
0128 F4         873            cpl     a
0129 FA         874            mov     r2,a
012A 52F2       875            anl     _P1MDIN,a
012C            876   ;        EFM8_JDY40_test.c:215: P1SKIP |= mask; // Skip Crossbar decoding for this pin
012C EB         877            mov     a,r3
012D 42D5       878            orl     _P1SKIP,a
012F            879   ;        EFM8_JDY40_test.c:216: break;
012F            880   ;        EFM8_JDY40_test.c:217: case 2:
012F 8000       881            sjmp    L009005?
0131            882   L009003?:
0131            883   ;        EFM8_JDY40_test.c:218: P2MDIN &= (~mask); // Set pin as analog input
0131 EB         884            mov     a,r3
0132 F4         885            cpl     a
0133 FA         886            mov     r2,a
0134 52F3       887            anl     _P2MDIN,a
0136            888   ;        EFM8_JDY40_test.c:219: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0136 EB         889            mov     a,r3
0137 42CC       890            orl     _P2SKIP,a
0139            891   ;        EFM8_JDY40_test.c:223: }
0139            892   L009005?:
0139            893   ;        EFM8_JDY40_test.c:224: SFRPAGE = 0x00;
0139 75A700     894            mov     _SFRPAGE,#0x00
013C 22         895            ret
013D            896   ;------------------------------------------------------------
013D            897   ;Allocation info for local variables in function 'ADC_at_Pin'
013D            898   ;------------------------------------------------------------
013D            899   ;pin                       Allocated to registers 
013D            900   ;------------------------------------------------------------
013D            901   ;        EFM8_JDY40_test.c:227: unsigned int ADC_at_Pin(unsigned char pin)
013D            902   ;        -----------------------------------------
013D            903   ;         function ADC_at_Pin
013D            904   ;        -----------------------------------------
013D            905   _ADC_at_Pin:
013D 8582BB     906            mov     _ADC0MX,dpl
0140            907   ;        EFM8_JDY40_test.c:230: ADINT = 0;
0140 C2ED       908            clr     _ADINT
0142            909   ;        EFM8_JDY40_test.c:231: ADBUSY = 1;     // Convert voltage at the pin
0142 D2EC       910            setb    _ADBUSY
0144            911   ;        EFM8_JDY40_test.c:232: while (!ADINT); // Wait for conversion to complete
0144            912   L010001?:
0144 30ED30     913            jnb     _ADINT,L010001?
0147            914   ;        EFM8_JDY40_test.c:233: return (ADC0);
0147 85BD82     915            mov     dpl,_ADC0
014A 85BE83     916            mov     dph,(_ADC0 >> 8)
014D 22         917            ret
014E            918   ;------------------------------------------------------------
014E            919   ;Allocation info for local variables in function 'Get_ADC'
014E            920   ;------------------------------------------------------------
014E            921   ;------------------------------------------------------------
014E            922   ;        EFM8_JDY40_test.c:236: unsigned int Get_ADC (void)
014E            923   ;        -----------------------------------------
014E            924   ;         function Get_ADC
014E            925   ;        -----------------------------------------
014E            926   _Get_ADC:
014E            927   ;        EFM8_JDY40_test.c:238: ADINT = 0;
014E C2ED       928            clr     _ADINT
0150            929   ;        EFM8_JDY40_test.c:239: ADBUSY = 1;
0150 D2EC       930            setb    _ADBUSY
0152            931   ;        EFM8_JDY40_test.c:240: while (!ADINT); // Wait for conversion to complete
0152            932   L011001?:
0152 30ED70     933            jnb     _ADINT,L011001?
0155            934   ;        EFM8_JDY40_test.c:241: return (ADC0);
0155 85BD82     935            mov     dpl,_ADC0
0158 85BE83     936            mov     dph,(_ADC0 >> 8)
015B 22         937            ret
015C            938   ;------------------------------------------------------------
015C            939   ;Allocation info for local variables in function 'Volts_at_Pin'
015C            940   ;------------------------------------------------------------
015C            941   ;pin                       Allocated to registers r2 
015C            942   ;------------------------------------------------------------
015C            943   ;        EFM8_JDY40_test.c:245: float Volts_at_Pin(unsigned char pin)
015C            944   ;        -----------------------------------------
015C            945   ;         function Volts_at_Pin
015C            946   ;        -----------------------------------------
015C            947   _Volts_at_Pin:
015C            948   ;        EFM8_JDY40_test.c:247: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
015C 120000     949            lcall   _ADC_at_Pin
015F 120000     950            lcall   ___uint2fs
0162 AA82       951            mov     r2,dpl
0164 AB83       952            mov     r3,dph
0166 ACF0       953            mov     r4,b
0168 FD         954            mov     r5,a
0169 C002       955            push    ar2
016B C003       956            push    ar3
016D C004       957            push    ar4
016F C005       958            push    ar5
0171 903333     959            mov     dptr,#0x3333
0174 75F09B     960            mov     b,#0x9B
0177 7440       961            mov     a,#0x40
0179 120000     962            lcall   ___fsmul
017C AA82       963            mov     r2,dpl
017E AB83       964            mov     r3,dph
0180 ACF0       965            mov     r4,b
0182 FD         966            mov     r5,a
0183 E581       967            mov     a,sp
0185 24FC       968            add     a,#0xfc
0187 F581       969            mov     sp,a
0189 E4         970            clr     a
018A C0E0       971            push    acc
018C 74FC       972            mov     a,#0xFC
018E C0E0       973            push    acc
0190 747F       974            mov     a,#0x7F
0192 C0E0       975            push    acc
0194 7446       976            mov     a,#0x46
0196 C0E0       977            push    acc
0198 8A82       978            mov     dpl,r2
019A 8B83       979            mov     dph,r3
019C 8CF0       980            mov     b,r4
019E ED         981            mov     a,r5
019F 120000     982            lcall   ___fsdiv
01A2 AA82       983            mov     r2,dpl
01A4 AB83       984            mov     r3,dph
01A6 ACF0       985            mov     r4,b
01A8 FD         986            mov     r5,a
01A9 E581       987            mov     a,sp
01AB 24FC       988            add     a,#0xfc
01AD F581       989            mov     sp,a
01AF 8A82       990            mov     dpl,r2
01B1 8B83       991            mov     dph,r3
01B3 8CF0       992            mov     b,r4
01B5 ED         993            mov     a,r5
01B6 22         994            ret
01B7            995   ;------------------------------------------------------------
01B7            996   ;Allocation info for local variables in function 'UART1_Init'
01B7            997   ;------------------------------------------------------------
01B7            998   ;baudrate                  Allocated to registers r2 r3 r4 r5 
01B7            999   ;------------------------------------------------------------
01B7           1000   ;        EFM8_JDY40_test.c:250: void UART1_Init (unsigned long baudrate)
01B7           1001   ;        -----------------------------------------
01B7           1002   ;         function UART1_Init
01B7           1003   ;        -----------------------------------------
01B7           1004   _UART1_Init:
01B7 AA82      1005            mov     r2,dpl
01B9 AB83      1006            mov     r3,dph
01BB ACF0      1007            mov     r4,b
01BD FD        1008            mov     r5,a
01BE           1009   ;        EFM8_JDY40_test.c:252: SFRPAGE = 0x20;
01BE 75A720    1010            mov     _SFRPAGE,#0x20
01C1           1011   ;        EFM8_JDY40_test.c:253: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01C1 75930C    1012            mov     _SMOD1,#0x0C
01C4           1013   ;        EFM8_JDY40_test.c:254: SCON1 = 0x10;
01C4 75C810    1014            mov     _SCON1,#0x10
01C7           1015   ;        EFM8_JDY40_test.c:255: SBCON1 =0x00;   // disable baud rate generator
01C7 759400    1016            mov     _SBCON1,#0x00
01CA           1017   ;        EFM8_JDY40_test.c:256: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01CA 8A00      1018            mov     __divulong_PARM_2,r2
01CC 8B01      1019            mov     (__divulong_PARM_2 + 1),r3
01CE 8C02      1020            mov     (__divulong_PARM_2 + 2),r4
01D0 8D03      1021            mov     (__divulong_PARM_2 + 3),r5
01D2 90A200    1022            mov     dptr,#0xA200
01D5 75F04A    1023            mov     b,#0x4A
01D8 7404      1024            mov     a,#0x04
01DA 120000    1025            lcall   __divulong
01DD AA82      1026            mov     r2,dpl
01DF AB83      1027            mov     r3,dph
01E1 ACF0      1028            mov     r4,b
01E3 FD        1029            mov     r5,a
01E4 750018    1030            mov     __divulong_PARM_2,#0x18
01E7 E4        1031            clr     a
01E8 F501      1032            mov     (__divulong_PARM_2 + 1),a
01EA F502      1033            mov     (__divulong_PARM_2 + 2),a
01EC F503      1034            mov     (__divulong_PARM_2 + 3),a
01EE 8A82      1035            mov     dpl,r2
01F0 8B83      1036            mov     dph,r3
01F2 8CF0      1037            mov     b,r4
01F4 ED        1038            mov     a,r5
01F5 120000    1039            lcall   __divulong
01F8 AA82      1040            mov     r2,dpl
01FA AB83      1041            mov     r3,dph
01FC ACF0      1042            mov     r4,b
01FE FD        1043            mov     r5,a
01FF E4        1044            clr     a
0200 C3        1045            clr     c
0201 9A        1046            subb    a,r2
0202 FA        1047            mov     r2,a
0203 E4        1048            clr     a
0204 9B        1049            subb    a,r3
0205 FB        1050            mov     r3,a
0206 7401      1051            mov     a,#0x01
0208 9C        1052            subb    a,r4
0209 E4        1053            clr     a
020A 9D        1054            subb    a,r5
020B 8A95      1055            mov     _SBRL1,r2
020D 8B96      1056            mov     (_SBRL1 >> 8),r3
020F           1057   ;        EFM8_JDY40_test.c:257: TI1 = 1; // indicate ready for TX
020F D2C9      1058            setb    _TI1
0211           1059   ;        EFM8_JDY40_test.c:258: SBCON1 |= 0x40;   // enable baud rate generator
0211 439440    1060            orl     _SBCON1,#0x40
0214           1061   ;        EFM8_JDY40_test.c:259: SFRPAGE = 0x00;
0214 75A700    1062            mov     _SFRPAGE,#0x00
0217 22        1063            ret
0218           1064   ;------------------------------------------------------------
0218           1065   ;Allocation info for local variables in function 'putchar1'
0218           1066   ;------------------------------------------------------------
0218           1067   ;c                         Allocated to registers r2 
0218           1068   ;------------------------------------------------------------
0218           1069   ;        EFM8_JDY40_test.c:262: void putchar1 (char c) 
0218           1070   ;        -----------------------------------------
0218           1071   ;         function putchar1
0218           1072   ;        -----------------------------------------
0218           1073   _putchar1:
0218 AA82      1074            mov     r2,dpl
021A           1075   ;        EFM8_JDY40_test.c:264: SFRPAGE = 0x20;
021A 75A720    1076            mov     _SFRPAGE,#0x20
021D           1077   ;        EFM8_JDY40_test.c:265: while (!TI1);
021D           1078   L014001?:
021D           1079   ;        EFM8_JDY40_test.c:266: TI1=0;
021D 10C980    1080            jbc     _TI1,L014008?
0220 8000      1081            sjmp    L014001?
0222           1082   L014008?:
0222           1083   ;        EFM8_JDY40_test.c:267: SBUF1 = c;
0222 8A92      1084            mov     _SBUF1,r2
0224           1085   ;        EFM8_JDY40_test.c:268: SFRPAGE = 0x00;
0224 75A700    1086            mov     _SFRPAGE,#0x00
0227 22        1087            ret
0228           1088   ;------------------------------------------------------------
0228           1089   ;Allocation info for local variables in function 'sendstr1'
0228           1090   ;------------------------------------------------------------
0228           1091   ;s                         Allocated to registers r2 r3 r4 
0228           1092   ;------------------------------------------------------------
0228           1093   ;        EFM8_JDY40_test.c:271: void sendstr1 (char * s)
0228           1094   ;        -----------------------------------------
0228           1095   ;         function sendstr1
0228           1096   ;        -----------------------------------------
0228           1097   _sendstr1:
0228 AA82      1098            mov     r2,dpl
022A AB83      1099            mov     r3,dph
022C ACF0      1100            mov     r4,b
022E           1101   ;        EFM8_JDY40_test.c:273: while(*s)
022E           1102   L015001?:
022E 8A82      1103            mov     dpl,r2
0230 8B83      1104            mov     dph,r3
0232 8CF0      1105            mov     b,r4
0234 120000    1106            lcall   __gptrget
0237 FD        1107            mov     r5,a
0238 6000      1108            jz      L015004?
023A           1109   ;        EFM8_JDY40_test.c:275: putchar1(*s);
023A 8D82      1110            mov     dpl,r5
023C C002      1111            push    ar2
023E C003      1112            push    ar3
0240 C004      1113            push    ar4
0242 120000    1114            lcall   _putchar1
0245 D004      1115            pop     ar4
0247 D003      1116            pop     ar3
0249 D002      1117            pop     ar2
024B           1118   ;        EFM8_JDY40_test.c:276: s++;     
024B 0A        1119            inc     r2
024C BA00C0    1120            cjne    r2,#0x00,L015001?
024F 0B        1121            inc     r3
0250 8000      1122            sjmp    L015001?
0252           1123   L015004?:
0252 22        1124            ret
0253           1125   ;------------------------------------------------------------
0253           1126   ;Allocation info for local variables in function 'getchar1'
0253           1127   ;------------------------------------------------------------
0253           1128   ;c                         Allocated to registers 
0253           1129   ;------------------------------------------------------------
0253           1130   ;        EFM8_JDY40_test.c:280: char getchar1 (void)
0253           1131   ;        -----------------------------------------
0253           1132   ;         function getchar1
0253           1133   ;        -----------------------------------------
0253           1134   _getchar1:
0253           1135   ;        EFM8_JDY40_test.c:283: SFRPAGE = 0x20;
0253 75A720    1136            mov     _SFRPAGE,#0x20
0256           1137   ;        EFM8_JDY40_test.c:284: while (!RI1);
0256           1138   L016001?:
0256           1139   ;        EFM8_JDY40_test.c:285: RI1=0;
0256 10C8C0    1140            jbc     _RI1,L016008?
0259 8000      1141            sjmp    L016001?
025B           1142   L016008?:
025B           1143   ;        EFM8_JDY40_test.c:287: SCON1&=0b_0011_1111;
025B 53C83F    1144            anl     _SCON1,#0x3F
025E           1145   ;        EFM8_JDY40_test.c:288: c = SBUF1;
025E 859282    1146            mov     dpl,_SBUF1
0261           1147   ;        EFM8_JDY40_test.c:289: SFRPAGE = 0x00;
0261 75A700    1148            mov     _SFRPAGE,#0x00
0264           1149   ;        EFM8_JDY40_test.c:290: return (c);
0264 22        1150            ret
0265           1151   ;------------------------------------------------------------
0265           1152   ;Allocation info for local variables in function 'getchar1_with_timeout'
0265           1153   ;------------------------------------------------------------
0265           1154   ;c                         Allocated to registers 
0265           1155   ;timeout                   Allocated to registers r2 r3 
0265           1156   ;------------------------------------------------------------
0265           1157   ;        EFM8_JDY40_test.c:293: char getchar1_with_timeout (void)
0265           1158   ;        -----------------------------------------
0265           1159   ;         function getchar1_with_timeout
0265           1160   ;        -----------------------------------------
0265           1161   _getchar1_with_timeout:
0265           1162   ;        EFM8_JDY40_test.c:297: SFRPAGE = 0x20;
0265 75A720    1163            mov     _SFRPAGE,#0x20
0268           1164   ;        EFM8_JDY40_test.c:299: while (!RI1)
0268 7A00      1165            mov     r2,#0x00
026A 7B00      1166            mov     r3,#0x00
026C           1167   L017003?:
026C 20C840    1168            jb      _RI1,L017005?
026F           1169   ;        EFM8_JDY40_test.c:301: SFRPAGE = 0x00;
026F 75A700    1170            mov     _SFRPAGE,#0x00
0272           1171   ;        EFM8_JDY40_test.c:302: Timer3us(20);
0272 758214    1172            mov     dpl,#0x14
0275 C002      1173            push    ar2
0277 C003      1174            push    ar3
0279 120000    1175            lcall   _Timer3us
027C D003      1176            pop     ar3
027E D002      1177            pop     ar2
0280           1178   ;        EFM8_JDY40_test.c:303: SFRPAGE = 0x20;
0280 75A720    1179            mov     _SFRPAGE,#0x20
0283           1180   ;        EFM8_JDY40_test.c:304: timeout++;
0283 0A        1181            inc     r2
0284 BA0080    1182            cjne    r2,#0x00,L017012?
0287 0B        1183            inc     r3
0288           1184   L017012?:
0288           1185   ;        EFM8_JDY40_test.c:305: if(timeout==25000)
0288 BAA800    1186            cjne    r2,#0xA8,L017003?
028B BB6100    1187            cjne    r3,#0x61,L017003?
028E           1188   ;        EFM8_JDY40_test.c:307: SFRPAGE = 0x00;
028E 75A700    1189            mov     _SFRPAGE,#0x00
0291           1190   ;        EFM8_JDY40_test.c:308: return ('\n'); // Timeout after half second
0291 75820A    1191            mov     dpl,#0x0A
0294 22        1192            ret
0295           1193   L017005?:
0295           1194   ;        EFM8_JDY40_test.c:311: RI1=0;
0295 C2C8      1195            clr     _RI1
0297           1196   ;        EFM8_JDY40_test.c:313: SCON1&=0b_0011_1111;
0297 53C83F    1197            anl     _SCON1,#0x3F
029A           1198   ;        EFM8_JDY40_test.c:314: c = SBUF1;
029A 859282    1199            mov     dpl,_SBUF1
029D           1200   ;        EFM8_JDY40_test.c:315: SFRPAGE = 0x00;
029D 75A700    1201            mov     _SFRPAGE,#0x00
02A0           1202   ;        EFM8_JDY40_test.c:316: return (c);
02A0 22        1203            ret
02A1           1204   ;------------------------------------------------------------
02A1           1205   ;Allocation info for local variables in function 'getstr1'
02A1           1206   ;------------------------------------------------------------
02A1           1207   ;s                         Allocated to registers r2 r3 r4 
02A1           1208   ;c                         Allocated to registers r5 
02A1           1209   ;------------------------------------------------------------
02A1           1210   ;        EFM8_JDY40_test.c:319: void getstr1 (char * s)
02A1           1211   ;        -----------------------------------------
02A1           1212   ;         function getstr1
02A1           1213   ;        -----------------------------------------
02A1           1214   _getstr1:
02A1 AA82      1215            mov     r2,dpl
02A3 AB83      1216            mov     r3,dph
02A5 ACF0      1217            mov     r4,b
02A7           1218   ;        EFM8_JDY40_test.c:323: while(1)
02A7           1219   L018004?:
02A7           1220   ;        EFM8_JDY40_test.c:325: c=getchar1_with_timeout();
02A7 C002      1221            push    ar2
02A9 C003      1222            push    ar3
02AB C004      1223            push    ar4
02AD 120000    1224            lcall   _getchar1_with_timeout
02B0 AD82      1225            mov     r5,dpl
02B2 D004      1226            pop     ar4
02B4 D003      1227            pop     ar3
02B6 D002      1228            pop     ar2
02B8           1229   ;        EFM8_JDY40_test.c:326: if(c=='\n')
02B8 BD0A00    1230            cjne    r5,#0x0A,L018002?
02BB           1231   ;        EFM8_JDY40_test.c:328: *s=0;
02BB 8A82      1232            mov     dpl,r2
02BD 8B83      1233            mov     dph,r3
02BF 8CF0      1234            mov     b,r4
02C1 E4        1235            clr     a
02C2           1236   ;        EFM8_JDY40_test.c:329: return;
02C2 020000    1237            ljmp    __gptrput
02C5           1238   L018002?:
02C5           1239   ;        EFM8_JDY40_test.c:331: *s=c;
02C5 8A82      1240            mov     dpl,r2
02C7 8B83      1241            mov     dph,r3
02C9 8CF0      1242            mov     b,r4
02CB ED        1243            mov     a,r5
02CC 120000    1244            lcall   __gptrput
02CF A3        1245            inc     dptr
02D0 AA82      1246            mov     r2,dpl
02D2 AB83      1247            mov     r3,dph
02D4           1248   ;        EFM8_JDY40_test.c:332: s++;
02D4 8000      1249            sjmp    L018004?
02D6           1250   ;------------------------------------------------------------
02D6           1251   ;Allocation info for local variables in function 'RXU1'
02D6           1252   ;------------------------------------------------------------
02D6           1253   ;------------------------------------------------------------
02D6           1254   ;        EFM8_JDY40_test.c:337: bit RXU1 (void)
02D6           1255   ;        -----------------------------------------
02D6           1256   ;         function RXU1
02D6           1257   ;        -----------------------------------------
02D6           1258   _RXU1:
02D6           1259   ;        EFM8_JDY40_test.c:340: SFRPAGE = 0x20;
02D6 75A720    1260            mov     _SFRPAGE,#0x20
02D9           1261   ;        EFM8_JDY40_test.c:341: mybit=RI1;
02D9 A2C8      1262            mov     c,_RI1
02DB           1263   ;        EFM8_JDY40_test.c:342: SFRPAGE = 0x00;
02DB 75A700    1264            mov     _SFRPAGE,#0x00
02DE           1265   ;        EFM8_JDY40_test.c:343: return mybit;
02DE 22        1266            ret
02DF           1267   ;------------------------------------------------------------
02DF           1268   ;Allocation info for local variables in function 'waitms_or_RI1'
02DF           1269   ;------------------------------------------------------------
02DF           1270   ;ms                        Allocated to registers r2 r3 
02DF           1271   ;j                         Allocated to registers r4 r5 
02DF           1272   ;k                         Allocated to registers r6 
02DF           1273   ;------------------------------------------------------------
02DF           1274   ;        EFM8_JDY40_test.c:346: void waitms_or_RI1 (unsigned int ms)
02DF           1275   ;        -----------------------------------------
02DF           1276   ;         function waitms_or_RI1
02DF           1277   ;        -----------------------------------------
02DF           1278   _waitms_or_RI1:
02DF AA82      1279            mov     r2,dpl
02E1 AB83      1280            mov     r3,dph
02E3           1281   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
02E3 7C00      1282            mov     r4,#0x00
02E5 7D00      1283            mov     r5,#0x00
02E7           1284   L020007?:
02E7 C3        1285            clr     c
02E8 EC        1286            mov     a,r4
02E9 9A        1287            subb    a,r2
02EA ED        1288            mov     a,r5
02EB 9B        1289            subb    a,r3
02EC 5000      1290            jnc     L020011?
02EE           1291   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
02EE 7E00      1292            mov     r6,#0x00
02F0           1293   L020003?:
02F0 BE0440    1294            cjne    r6,#0x04,L020019?
02F3           1295   L020019?:
02F3 5000      1296            jnc     L020009?
02F5           1297   ;        EFM8_JDY40_test.c:354: if(RXU1()) return;
02F5 C002      1298            push    ar2
02F7 C003      1299            push    ar3
02F9 C004      1300            push    ar4
02FB C005      1301            push    ar5
02FD C006      1302            push    ar6
02FF 120000    1303            lcall   _RXU1
0302 E4        1304            clr     a
0303 33        1305            rlc     a
0304 D006      1306            pop     ar6
0306 D005      1307            pop     ar5
0308 D004      1308            pop     ar4
030A D003      1309            pop     ar3
030C D002      1310            pop     ar2
030E 6000      1311            jz      L020002?
0310 22        1312            ret
0311           1313   L020002?:
0311           1314   ;        EFM8_JDY40_test.c:355: Timer3us(250);
0311 7582FA    1315            mov     dpl,#0xFA
0314 C002      1316            push    ar2
0316 C003      1317            push    ar3
0318 C004      1318            push    ar4
031A C005      1319            push    ar5
031C C006      1320            push    ar6
031E 120000    1321            lcall   _Timer3us
0321 D006      1322            pop     ar6
0323 D005      1323            pop     ar5
0325 D004      1324            pop     ar4
0327 D003      1325            pop     ar3
0329 D002      1326            pop     ar2
032B           1327   ;        EFM8_JDY40_test.c:352: for (k=0; k<4; k++)
032B 0E        1328            inc     r6
032C 8000      1329            sjmp    L020003?
032E           1330   L020009?:
032E           1331   ;        EFM8_JDY40_test.c:350: for(j=0; j<ms; j++)
032E 0C        1332            inc     r4
032F BC0080    1333            cjne    r4,#0x00,L020007?
0332 0D        1334            inc     r5
0333 8000      1335            sjmp    L020007?
0335           1336   L020011?:
0335 22        1337            ret
0336           1338   ;------------------------------------------------------------
0336           1339   ;Allocation info for local variables in function 'SendATCommand'
0336           1340   ;------------------------------------------------------------
0336           1341   ;s                         Allocated to registers r2 r3 r4 
0336           1342   ;------------------------------------------------------------
0336           1343   ;        EFM8_JDY40_test.c:360: void SendATCommand (char * s)
0336           1344   ;        -----------------------------------------
0336           1345   ;         function SendATCommand
0336           1346   ;        -----------------------------------------
0336           1347   _SendATCommand:
0336 AA82      1348            mov     r2,dpl
0338 AB83      1349            mov     r3,dph
033A ACF0      1350            mov     r4,b
033C           1351   ;        EFM8_JDY40_test.c:362: printf("Command: %s", s);
033C C002      1352            push    ar2
033E C003      1353            push    ar3
0340 C004      1354            push    ar4
0342 C002      1355            push    ar2
0344 C003      1356            push    ar3
0346 C004      1357            push    ar4
0348 7400      1358            mov     a,#__str_0
034A C0E0      1359            push    acc
034C 74C5      1360            mov     a,#(__str_0 >> 8)
034E C0E0      1361            push    acc
0350 7480      1362            mov     a,#0x80
0352 C0E0      1363            push    acc
0354 120000    1364            lcall   _printf
0357 E581      1365            mov     a,sp
0359 24FA      1366            add     a,#0xfa
035B F581      1367            mov     sp,a
035D           1368   ;        EFM8_JDY40_test.c:363: P3_0=0; // 'set' pin to 0 is 'AT' mode.
035D C2B0      1369            clr     _P3_0
035F           1370   ;        EFM8_JDY40_test.c:364: waitms(5);
035F 900005    1371            mov     dptr,#0x0005
0362 120000    1372            lcall   _waitms
0365 D004      1373            pop     ar4
0367 D003      1374            pop     ar3
0369 D002      1375            pop     ar2
036B           1376   ;        EFM8_JDY40_test.c:365: sendstr1(s);
036B 8A82      1377            mov     dpl,r2
036D 8B83      1378            mov     dph,r3
036F 8CF0      1379            mov     b,r4
0371 120000    1380            lcall   _sendstr1
0374           1381   ;        EFM8_JDY40_test.c:366: getstr1(buff);
0374 9018D0    1382            mov     dptr,#_buff
0377 75F040    1383            mov     b,#0x40
037A 120000    1384            lcall   _getstr1
037D           1385   ;        EFM8_JDY40_test.c:367: waitms(10);
037D 90000A    1386            mov     dptr,#0x000A
0380 120000    1387            lcall   _waitms
0383           1388   ;        EFM8_JDY40_test.c:368: P3_0=1; // 'set' pin to 1 is normal operation mode.
0383 D2B0      1389            setb    _P3_0
0385           1390   ;        EFM8_JDY40_test.c:369: printf("Response: %s\r\n", buff);
0385 74D0      1391            mov     a,#_buff
0387 C0E0      1392            push    acc
0389 7418      1393            mov     a,#(_buff >> 8)
038B C0E0      1394            push    acc
038D 7440      1395            mov     a,#0x40
038F C0E0      1396            push    acc
0391 7480      1397            mov     a,#__str_1
0393 C0E0      1398            push    acc
0395 74C5      1399            mov     a,#(__str_1 >> 8)
0397 C0E0      1400            push    acc
0399 7480      1401            mov     a,#0x80
039B C0E0      1402            push    acc
039D 120000    1403            lcall   _printf
03A0 E581      1404            mov     a,sp
03A2 24FA      1405            add     a,#0xfa
03A4 F581      1406            mov     sp,a
03A6 22        1407            ret
03A7           1408   ;------------------------------------------------------------
03A7           1409   ;Allocation info for local variables in function 'LCD_pulse'
03A7           1410   ;------------------------------------------------------------
03A7           1411   ;------------------------------------------------------------
03A7           1412   ;        EFM8_JDY40_test.c:374: void LCD_pulse (void)
03A7           1413   ;        -----------------------------------------
03A7           1414   ;         function LCD_pulse
03A7           1415   ;        -----------------------------------------
03A7           1416   _LCD_pulse:
03A7           1417   ;        EFM8_JDY40_test.c:376: LCD_E=1;
03A7 D2A0      1418            setb    _P2_0
03A9           1419   ;        EFM8_JDY40_test.c:377: Timer3us(40);
03A9 758228    1420            mov     dpl,#0x28
03AC 120000    1421            lcall   _Timer3us
03AF           1422   ;        EFM8_JDY40_test.c:378: LCD_E=0;
03AF C2A0      1423            clr     _P2_0
03B1 22        1424            ret
03B2           1425   ;------------------------------------------------------------
03B2           1426   ;Allocation info for local variables in function 'LCD_byte'
03B2           1427   ;------------------------------------------------------------
03B2           1428   ;x                         Allocated to registers r2 
03B2           1429   ;------------------------------------------------------------
03B2           1430   ;        EFM8_JDY40_test.c:381: void LCD_byte (unsigned char x)
03B2           1431   ;        -----------------------------------------
03B2           1432   ;         function LCD_byte
03B2           1433   ;        -----------------------------------------
03B2           1434   _LCD_byte:
03B2 AA82      1435            mov     r2,dpl
03B4           1436   ;        EFM8_JDY40_test.c:384: ACC=x; //Send high nible
03B4 8AE0      1437            mov     _ACC,r2
03B6           1438   ;        EFM8_JDY40_test.c:385: LCD_D7=ACC_7;
03B6 A2E7      1439            mov     c,_ACC_7
03B8 9290      1440            mov     _P1_0,c
03BA           1441   ;        EFM8_JDY40_test.c:386: LCD_D6=ACC_6;
03BA A2E6      1442            mov     c,_ACC_6
03BC 9291      1443            mov     _P1_1,c
03BE           1444   ;        EFM8_JDY40_test.c:387: LCD_D5=ACC_5;
03BE A2E5      1445            mov     c,_ACC_5
03C0 9292      1446            mov     _P1_2,c
03C2           1447   ;        EFM8_JDY40_test.c:388: LCD_D4=ACC_4;
03C2 A2E4      1448            mov     c,_ACC_4
03C4 9293      1449            mov     _P1_3,c
03C6           1450   ;        EFM8_JDY40_test.c:389: LCD_pulse();
03C6 C002      1451            push    ar2
03C8 120000    1452            lcall   _LCD_pulse
03CB           1453   ;        EFM8_JDY40_test.c:390: Timer3us(40);
03CB 758228    1454            mov     dpl,#0x28
03CE 120000    1455            lcall   _Timer3us
03D1 D002      1456            pop     ar2
03D3           1457   ;        EFM8_JDY40_test.c:391: ACC=x; //Send low nible
03D3 8AE0      1458            mov     _ACC,r2
03D5           1459   ;        EFM8_JDY40_test.c:392: LCD_D7=ACC_3;
03D5 A2E3      1460            mov     c,_ACC_3
03D7 9290      1461            mov     _P1_0,c
03D9           1462   ;        EFM8_JDY40_test.c:393: LCD_D6=ACC_2;
03D9 A2E2      1463            mov     c,_ACC_2
03DB 9291      1464            mov     _P1_1,c
03DD           1465   ;        EFM8_JDY40_test.c:394: LCD_D5=ACC_1;
03DD A2E1      1466            mov     c,_ACC_1
03DF 9292      1467            mov     _P1_2,c
03E1           1468   ;        EFM8_JDY40_test.c:395: LCD_D4=ACC_0;
03E1 A2E0      1469            mov     c,_ACC_0
03E3 9293      1470            mov     _P1_3,c
03E5           1471   ;        EFM8_JDY40_test.c:396: LCD_pulse();
03E5 020000    1472            ljmp    _LCD_pulse
03E8           1473   ;------------------------------------------------------------
03E8           1474   ;Allocation info for local variables in function 'WriteData'
03E8           1475   ;------------------------------------------------------------
03E8           1476   ;x                         Allocated to registers r2 
03E8           1477   ;------------------------------------------------------------
03E8           1478   ;        EFM8_JDY40_test.c:399: void WriteData (unsigned char x)
03E8           1479   ;        -----------------------------------------
03E8           1480   ;         function WriteData
03E8           1481   ;        -----------------------------------------
03E8           1482   _WriteData:
03E8 AA82      1483            mov     r2,dpl
03EA           1484   ;        EFM8_JDY40_test.c:401: LCD_RS=1;
03EA D297      1485            setb    _P1_7
03EC           1486   ;        EFM8_JDY40_test.c:402: LCD_byte(x);
03EC 8A82      1487            mov     dpl,r2
03EE 120000    1488            lcall   _LCD_byte
03F1           1489   ;        EFM8_JDY40_test.c:403: waitms(2);
03F1 900002    1490            mov     dptr,#0x0002
03F4 020000    1491            ljmp    _waitms
03F7           1492   ;------------------------------------------------------------
03F7           1493   ;Allocation info for local variables in function 'WriteCommand'
03F7           1494   ;------------------------------------------------------------
03F7           1495   ;x                         Allocated to registers r2 
03F7           1496   ;------------------------------------------------------------
03F7           1497   ;        EFM8_JDY40_test.c:406: void WriteCommand (unsigned char x)
03F7           1498   ;        -----------------------------------------
03F7           1499   ;         function WriteCommand
03F7           1500   ;        -----------------------------------------
03F7           1501   _WriteCommand:
03F7 AA82      1502            mov     r2,dpl
03F9           1503   ;        EFM8_JDY40_test.c:408: LCD_RS=0;
03F9 C297      1504            clr     _P1_7
03FB           1505   ;        EFM8_JDY40_test.c:409: LCD_byte(x);
03FB 8A82      1506            mov     dpl,r2
03FD 120000    1507            lcall   _LCD_byte
0400           1508   ;        EFM8_JDY40_test.c:410: waitms(5);
0400 900005    1509            mov     dptr,#0x0005
0403 020000    1510            ljmp    _waitms
0406           1511   ;------------------------------------------------------------
0406           1512   ;Allocation info for local variables in function 'LCD_4BIT'
0406           1513   ;------------------------------------------------------------
0406           1514   ;------------------------------------------------------------
0406           1515   ;        EFM8_JDY40_test.c:413: void LCD_4BIT (void)
0406           1516   ;        -----------------------------------------
0406           1517   ;         function LCD_4BIT
0406           1518   ;        -----------------------------------------
0406           1519   _LCD_4BIT:
0406           1520   ;        EFM8_JDY40_test.c:415: LCD_E=0; // Resting state of LCD's enable is zero
0406 C2A0      1521            clr     _P2_0
0408           1522   ;        EFM8_JDY40_test.c:417: waitms(20);
0408 900014    1523            mov     dptr,#0x0014
040B 120000    1524            lcall   _waitms
040E           1525   ;        EFM8_JDY40_test.c:419: WriteCommand(0x33);
040E 758233    1526            mov     dpl,#0x33
0411 120000    1527            lcall   _WriteCommand
0414           1528   ;        EFM8_JDY40_test.c:420: WriteCommand(0x33);
0414 758233    1529            mov     dpl,#0x33
0417 120000    1530            lcall   _WriteCommand
041A           1531   ;        EFM8_JDY40_test.c:421: WriteCommand(0x32); // Change to 4-bit mode
041A 758232    1532            mov     dpl,#0x32
041D 120000    1533            lcall   _WriteCommand
0420           1534   ;        EFM8_JDY40_test.c:424: WriteCommand(0x28);
0420 758228    1535            mov     dpl,#0x28
0423 120000    1536            lcall   _WriteCommand
0426           1537   ;        EFM8_JDY40_test.c:425: WriteCommand(0x0c);
0426 75820C    1538            mov     dpl,#0x0C
0429 120000    1539            lcall   _WriteCommand
042C           1540   ;        EFM8_JDY40_test.c:426: WriteCommand(0x01); // Clear screen command (takes some time)
042C 758201    1541            mov     dpl,#0x01
042F 120000    1542            lcall   _WriteCommand
0432           1543   ;        EFM8_JDY40_test.c:427: waitms(20); // Wait for clear screen command to finsih.
0432 900014    1544            mov     dptr,#0x0014
0435 020000    1545            ljmp    _waitms
0438           1546   ;------------------------------------------------------------
0438           1547   ;Allocation info for local variables in function 'LCDprint'
0438           1548   ;------------------------------------------------------------
0438           1549   ;line                      Allocated with name '_LCDprint_PARM_2'
0438           1550   ;string                    Allocated to registers r2 r3 r4 
0438           1551   ;j                         Allocated to registers r5 r6 
0438           1552   ;------------------------------------------------------------
0438           1553   ;        EFM8_JDY40_test.c:430: void LCDprint(char * string, unsigned char line, bit clear)
0438           1554   ;        -----------------------------------------
0438           1555   ;         function LCDprint
0438           1556   ;        -----------------------------------------
0438           1557   _LCDprint:
0438 AA82      1558            mov     r2,dpl
043A AB83      1559            mov     r3,dph
043C ACF0      1560            mov     r4,b
043E           1561   ;        EFM8_JDY40_test.c:434: WriteCommand(line==2?0xc0:0x80);
043E 7402      1562            mov     a,#0x02
0440 B520C0    1563            cjne    a,_LCDprint_PARM_2,L027013?
0443 7DC0      1564            mov     r5,#0xC0
0445 8000      1565            sjmp    L027014?
0447           1566   L027013?:
0447 7D80      1567            mov     r5,#0x80
0449           1568   L027014?:
0449 8D82      1569            mov     dpl,r5
044B C002      1570            push    ar2
044D C003      1571            push    ar3
044F C004      1572            push    ar4
0451 120000    1573            lcall   _WriteCommand
0454           1574   ;        EFM8_JDY40_test.c:435: waitms(5);
0454 900005    1575            mov     dptr,#0x0005
0457 120000    1576            lcall   _waitms
045A D004      1577            pop     ar4
045C D003      1578            pop     ar3
045E D002      1579            pop     ar2
0460           1580   ;        EFM8_JDY40_test.c:436: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
0460 7D00      1581            mov     r5,#0x00
0462 7E00      1582            mov     r6,#0x00
0464           1583   L027003?:
0464 ED        1584            mov     a,r5
0465 2A        1585            add     a,r2
0466 FF        1586            mov     r7,a
0467 EE        1587            mov     a,r6
0468 3B        1588            addc    a,r3
0469 F8        1589            mov     r0,a
046A 8C01      1590            mov     ar1,r4
046C 8F82      1591            mov     dpl,r7
046E 8883      1592            mov     dph,r0
0470 89F0      1593            mov     b,r1
0472 120000    1594            lcall   __gptrget
0475 FF        1595            mov     r7,a
0476 6000      1596            jz      L027006?
0478 8F82      1597            mov     dpl,r7
047A C002      1598            push    ar2
047C C003      1599            push    ar3
047E C004      1600            push    ar4
0480 C005      1601            push    ar5
0482 C006      1602            push    ar6
0484 120000    1603            lcall   _WriteData
0487 D006      1604            pop     ar6
0489 D005      1605            pop     ar5
048B D004      1606            pop     ar4
048D D003      1607            pop     ar3
048F D002      1608            pop     ar2
0491 0D        1609            inc     r5
0492 BD0040    1610            cjne    r5,#0x00,L027003?
0495 0E        1611            inc     r6
0496 8000      1612            sjmp    L027003?
0498           1613   L027006?:
0498           1614   ;        EFM8_JDY40_test.c:437: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0498 3090C0    1615            jnb     _LCDprint_PARM_3,L027011?
049B 8D02      1616            mov     ar2,r5
049D 8E03      1617            mov     ar3,r6
049F           1618   L027007?:
049F C3        1619            clr     c
04A0 EA        1620            mov     a,r2
04A1 9410      1621            subb    a,#0x10
04A3 EB        1622            mov     a,r3
04A4 6480      1623            xrl     a,#0x80
04A6 9480      1624            subb    a,#0x80
04A8 5000      1625            jnc     L027011?
04AA 758220    1626            mov     dpl,#0x20
04AD C002      1627            push    ar2
04AF C003      1628            push    ar3
04B1 120000    1629            lcall   _WriteData
04B4 D003      1630            pop     ar3
04B6 D002      1631            pop     ar2
04B8 0A        1632            inc     r2
04B9 BA0000    1633            cjne    r2,#0x00,L027007?
04BC 0B        1634            inc     r3
04BD 8000      1635            sjmp    L027007?
04BF           1636   L027011?:
04BF 22        1637            ret
04C0           1638   ;------------------------------------------------------------
04C0           1639   ;Allocation info for local variables in function 'main'
04C0           1640   ;------------------------------------------------------------
04C0           1641   ;cnt                       Allocated to registers 
04C0           1642   ;timeout_cnt               Allocated with name '_main_timeout_cnt_1_123'
04C0           1643   ;volt_x                    Allocated with name '_main_volt_x_1_123'
04C0           1644   ;volt_y                    Allocated to registers r4 r5 
04C0           1645   ;------------------------------------------------------------
04C0           1646   ;        EFM8_JDY40_test.c:440: void main (void)
04C0           1647   ;        -----------------------------------------
04C0           1648   ;         function main
04C0           1649   ;        -----------------------------------------
04C0           1650   _main:
04C0           1651   ;        EFM8_JDY40_test.c:454: InitADC();
04C0 120000    1652            lcall   _InitADC
04C3           1653   ;        EFM8_JDY40_test.c:455: waitms(500);
04C3 9001F4    1654            mov     dptr,#0x01F4
04C6 120000    1655            lcall   _waitms
04C9           1656   ;        EFM8_JDY40_test.c:456: printf("\r\nJDY-40 test\r\n");
04C9 7440      1657            mov     a,#__str_2
04CB C0E0      1658            push    acc
04CD 74C7      1659            mov     a,#(__str_2 >> 8)
04CF C0E0      1660            push    acc
04D1 7480      1661            mov     a,#0x80
04D3 C0E0      1662            push    acc
04D5 120000    1663            lcall   _printf
04D8 1581      1664            dec     sp
04DA 1581      1665            dec     sp
04DC 1581      1666            dec     sp
04DE           1667   ;        EFM8_JDY40_test.c:457: UART1_Init(9600);
04DE 902580    1668            mov     dptr,#0x2580
04E1 E4        1669            clr     a
04E2 F5F0      1670            mov     b,a
04E4 120000    1671            lcall   _UART1_Init
04E7           1672   ;        EFM8_JDY40_test.c:458: InitPinADC(1,4); //for x remote
04E7 756004    1673            mov     _InitPinADC_PARM_2,#0x04
04EA 758201    1674            mov     dpl,#0x01
04ED 120000    1675            lcall   _InitPinADC
04F0           1676   ;        EFM8_JDY40_test.c:459: InitPinADC(1,5); //for y remote
04F0 756005    1677            mov     _InitPinADC_PARM_2,#0x05
04F3 758201    1678            mov     dpl,#0x01
04F6 120000    1679            lcall   _InitPinADC
04F9           1680   ;        EFM8_JDY40_test.c:482: SendATCommand("AT+DVID9944\r\n");  
04F9 90C780    1681            mov     dptr,#__str_3
04FC 75F080    1682            mov     b,#0x80
04FF 120000    1683            lcall   _SendATCommand
0502           1684   ;        EFM8_JDY40_test.c:485: SendATCommand("AT+VER\r\n");
0502 90C7C0    1685            mov     dptr,#__str_4
0505 75F080    1686            mov     b,#0x80
0508 120000    1687            lcall   _SendATCommand
050B           1688   ;        EFM8_JDY40_test.c:486: SendATCommand("AT+BAUD\r\n");
050B 90C800    1689            mov     dptr,#__str_5
050E 75F080    1690            mov     b,#0x80
0511 120000    1691            lcall   _SendATCommand
0514           1692   ;        EFM8_JDY40_test.c:487: SendATCommand("AT+RFID\r\n");
0514 90C840    1693            mov     dptr,#__str_6
0517 75F080    1694            mov     b,#0x80
051A 120000    1695            lcall   _SendATCommand
051D           1696   ;        EFM8_JDY40_test.c:488: SendATCommand("AT+DVID\r\n");
051D 90C880    1697            mov     dptr,#__str_7
0520 75F080    1698            mov     b,#0x80
0523 120000    1699            lcall   _SendATCommand
0526           1700   ;        EFM8_JDY40_test.c:489: SendATCommand("AT+RFC\r\n");
0526 90C8C0    1701            mov     dptr,#__str_8
0529 75F080    1702            mov     b,#0x80
052C 120000    1703            lcall   _SendATCommand
052F           1704   ;        EFM8_JDY40_test.c:490: SendATCommand("AT+POWE\r\n");
052F 90C900    1705            mov     dptr,#__str_9
0532 75F080    1706            mov     b,#0x80
0535 120000    1707            lcall   _SendATCommand
0538           1708   ;        EFM8_JDY40_test.c:491: SendATCommand("AT+CLSS\r\n");
0538 90C940    1709            mov     dptr,#__str_10
053B 75F080    1710            mov     b,#0x80
053E 120000    1711            lcall   _SendATCommand
0541           1712   ;        EFM8_JDY40_test.c:493: printf("\r\nPress and hold the BOOT button to transmit.\r\n");
0541 7480      1713            mov     a,#__str_11
0543 C0E0      1714            push    acc
0545 74C9      1715            mov     a,#(__str_11 >> 8)
0547 C0E0      1716            push    acc
0549 7480      1717            mov     a,#0x80
054B C0E0      1718            push    acc
054D 120000    1719            lcall   _printf
0550 1581      1720            dec     sp
0552 1581      1721            dec     sp
0554 1581      1722            dec     sp
0556           1723   ;        EFM8_JDY40_test.c:496: while(1)
0556 7A00      1724            mov     r2,#0x00
0558 7B00      1725            mov     r3,#0x00
055A           1726   L028013?:
055A           1727   ;        EFM8_JDY40_test.c:501: volt_x = 10*(Volts_at_Pin(QFP32_MUX_P1_4));
055A 75820A    1728            mov     dpl,#0x0A
055D C002      1729            push    ar2
055F C003      1730            push    ar3
0561 120000    1731            lcall   _Volts_at_Pin
0564 AC82      1732            mov     r4,dpl
0566 AD83      1733            mov     r5,dph
0568 AEF0      1734            mov     r6,b
056A FF        1735            mov     r7,a
056B C004      1736            push    ar4
056D C005      1737            push    ar5
056F C006      1738            push    ar6
0571 C007      1739            push    ar7
0573 900000    1740            mov     dptr,#0x0000
0576 75F020    1741            mov     b,#0x20
0579 7441      1742            mov     a,#0x41
057B 120000    1743            lcall   ___fsmul
057E AC82      1744            mov     r4,dpl
0580 AD83      1745            mov     r5,dph
0582 AEF0      1746            mov     r6,b
0584 FF        1747            mov     r7,a
0585 E581      1748            mov     a,sp
0587 24FC      1749            add     a,#0xfc
0589 F581      1750            mov     sp,a
058B 8C82      1751            mov     dpl,r4
058D 8D83      1752            mov     dph,r5
058F 8EF0      1753            mov     b,r6
0591 EF        1754            mov     a,r7
0592 120000    1755            lcall   ___fs2sint
0595 858230    1756            mov     _main_volt_x_1_123,dpl
0598 858331    1757            mov     (_main_volt_x_1_123 + 1),dph
059B           1758   ;        EFM8_JDY40_test.c:502: volt_y = 10*(Volts_at_Pin(QFP32_MUX_P1_5));
059B 75820B    1759            mov     dpl,#0x0B
059E 120000    1760            lcall   _Volts_at_Pin
05A1 AE82      1761            mov     r6,dpl
05A3 AF83      1762            mov     r7,dph
05A5 ACF0      1763            mov     r4,b
05A7 FD        1764            mov     r5,a
05A8 C006      1765            push    ar6
05AA C007      1766            push    ar7
05AC C004      1767            push    ar4
05AE C005      1768            push    ar5
05B0 900000    1769            mov     dptr,#0x0000
05B3 75F020    1770            mov     b,#0x20
05B6 7441      1771            mov     a,#0x41
05B8 120000    1772            lcall   ___fsmul
05BB AC82      1773            mov     r4,dpl
05BD AD83      1774            mov     r5,dph
05BF AEF0      1775            mov     r6,b
05C1 FF        1776            mov     r7,a
05C2 E581      1777            mov     a,sp
05C4 24FC      1778            add     a,#0xfc
05C6 F581      1779            mov     sp,a
05C8 8C82      1780            mov     dpl,r4
05CA 8D83      1781            mov     dph,r5
05CC 8EF0      1782            mov     b,r6
05CE EF        1783            mov     a,r7
05CF 120000    1784            lcall   ___fs2sint
05D2 AC82      1785            mov     r4,dpl
05D4 AD83      1786            mov     r5,dph
05D6           1787   ;        EFM8_JDY40_test.c:508: sprintf(buff, "%d,%d\r\n", volt_x, volt_y);
05D6 C004      1788            push    ar4
05D8 C005      1789            push    ar5
05DA C030      1790            push    _main_volt_x_1_123
05DC C031      1791            push    (_main_volt_x_1_123 + 1)
05DE 7440      1792            mov     a,#__str_12
05E0 C0E0      1793            push    acc
05E2 74CA      1794            mov     a,#(__str_12 >> 8)
05E4 C0E0      1795            push    acc
05E6 7480      1796            mov     a,#0x80
05E8 C0E0      1797            push    acc
05EA 74D0      1798            mov     a,#_buff
05EC C0E0      1799            push    acc
05EE 7418      1800            mov     a,#(_buff >> 8)
05F0 C0E0      1801            push    acc
05F2 7440      1802            mov     a,#0x40
05F4 C0E0      1803            push    acc
05F6 120000    1804            lcall   _sprintf
05F9 E581      1805            mov     a,sp
05FB 24F6      1806            add     a,#0xf6
05FD F581      1807            mov     sp,a
05FF           1808   ;        EFM8_JDY40_test.c:509: sendstr1(buff);
05FF 9018D0    1809            mov     dptr,#_buff
0602 75F040    1810            mov     b,#0x40
0605 120000    1811            lcall   _sendstr1
0608           1812   ;        EFM8_JDY40_test.c:510: waitms_or_RI1(200);
0608 9000C8    1813            mov     dptr,#0x00C8
060B 120000    1814            lcall   _waitms_or_RI1
060E D003      1815            pop     ar3
0610 D002      1816            pop     ar2
0612           1817   ;        EFM8_JDY40_test.c:512: while(1)
0612 ACE0      1818            mov     r4,_main_timeout_cnt_1_123
0614 ADE1      1819            mov     r5,(_main_timeout_cnt_1_123 + 1)
0616           1820   L028006?:
0616           1821   ;        EFM8_JDY40_test.c:514: if(RXU1()) break; // Got something! Get out of loop.
0616 C002      1822            push    ar2
0618 C003      1823            push    ar3
061A C004      1824            push    ar4
061C C005      1825            push    ar5
061E 120000    1826            lcall   _RXU1
0621 E4        1827            clr     a
0622 33        1828            rlc     a
0623 D005      1829            pop     ar5
0625 D004      1830            pop     ar4
0627 D003      1831            pop     ar3
0629 D002      1832            pop     ar2
062B 7000      1833            jnz     L028022?
062D           1834   ;        EFM8_JDY40_test.c:515: Timer3us(100); // Check if something has arrived every 100us
062D 758264    1835            mov     dpl,#0x64
0630 C002      1836            push    ar2
0632 C003      1837            push    ar3
0634 C004      1838            push    ar4
0636 C005      1839            push    ar5
0638 120000    1840            lcall   _Timer3us
063B D005      1841            pop     ar5
063D D004      1842            pop     ar4
063F D003      1843            pop     ar3
0641 D002      1844            pop     ar2
0643           1845   ;        EFM8_JDY40_test.c:516: timeout_cnt++;
0643 0C        1846            inc     r4
0644 BC0040    1847            cjne    r4,#0x00,L028024?
0647 0D        1848            inc     r5
0648           1849   L028024?:
0648           1850   ;        EFM8_JDY40_test.c:518: if(timeout_cnt>=1000) break; // timeout after 100ms, get out of loop
0648 C3        1851            clr     c
0649 EC        1852            mov     a,r4
064A 94E8      1853            subb    a,#0xE8
064C ED        1854            mov     a,r5
064D 9403      1855            subb    a,#0x03
064F 4000      1856            jc      L028006?
0651           1857   L028022?:
0651 8CE0      1858            mov     _main_timeout_cnt_1_123,r4
0653 8DE1      1859            mov     (_main_timeout_cnt_1_123 + 1),r5
0655           1860   ;        EFM8_JDY40_test.c:525: if(P3_7==0)
0655 20B780    1861            jb      _P3_7,L028009?
0658           1862   ;        EFM8_JDY40_test.c:527: sprintf(buff, "JDY40 test %d\r\n", cnt++);
0658 8A04      1863            mov     ar4,r2
065A 8B05      1864            mov     ar5,r3
065C 0A        1865            inc     r2
065D BA00C0    1866            cjne    r2,#0x00,L028027?
0660 0B        1867            inc     r3
0661           1868   L028027?:
0661 C002      1869            push    ar2
0663 C003      1870            push    ar3
0665 C004      1871            push    ar4
0667 C005      1872            push    ar5
0669 7400      1873            mov     a,#__str_13
066B C0E0      1874            push    acc
066D 74CC      1875            mov     a,#(__str_13 >> 8)
066F C0E0      1876            push    acc
0671 7480      1877            mov     a,#0x80
0673 C0E0      1878            push    acc
0675 74D0      1879            mov     a,#_buff
0677 C0E0      1880            push    acc
0679 7418      1881            mov     a,#(_buff >> 8)
067B C0E0      1882            push    acc
067D 7440      1883            mov     a,#0x40
067F C0E0      1884            push    acc
0681 120000    1885            lcall   _sprintf
0684 E581      1886            mov     a,sp
0686 24F8      1887            add     a,#0xf8
0688 F581      1888            mov     sp,a
068A           1889   ;        EFM8_JDY40_test.c:528: sendstr1(buff);
068A 9018D0    1890            mov     dptr,#_buff
068D 75F040    1891            mov     b,#0x40
0690 120000    1892            lcall   _sendstr1
0693           1893   ;        EFM8_JDY40_test.c:529: putchar('.');
0693 75822E    1894            mov     dpl,#0x2E
0696 120000    1895            lcall   _putchar
0699           1896   ;        EFM8_JDY40_test.c:530: waitms_or_RI1(200);
0699 9000C8    1897            mov     dptr,#0x00C8
069C 120000    1898            lcall   _waitms_or_RI1
069F D003      1899            pop     ar3
06A1 D002      1900            pop     ar2
06A3           1901   L028009?:
06A3           1902   ;        EFM8_JDY40_test.c:535: if(RXU1())
06A3 C002      1903            push    ar2
06A5 C003      1904            push    ar3
06A7 120000    1905            lcall   _RXU1
06AA D003      1906            pop     ar3
06AC D002      1907            pop     ar2
06AE 4000      1908            jc      L028028?
06B0 020000    1909            ljmp    L028013?
06B3           1910   L028028?:
06B3           1911   ;        EFM8_JDY40_test.c:538: getstr1(buff);
06B3 9018D0    1912            mov     dptr,#_buff
06B6 75F040    1913            mov     b,#0x40
06B9 C002      1914            push    ar2
06BB C003      1915            push    ar3
06BD 120000    1916            lcall   _getstr1
06C0           1917   ;        EFM8_JDY40_test.c:540: printf("%s\r\n",buff);
06C0 74D0      1918            mov     a,#_buff
06C2 C0E0      1919            push    acc
06C4 7418      1920            mov     a,#(_buff >> 8)
06C6 C0E0      1921            push    acc
06C8 7440      1922            mov     a,#0x40
06CA C0E0      1923            push    acc
06CC 74C0      1924            mov     a,#__str_14
06CE C0E0      1925            push    acc
06D0 74CC      1926            mov     a,#(__str_14 >> 8)
06D2 C0E0      1927            push    acc
06D4 7480      1928            mov     a,#0x80
06D6 C0E0      1929            push    acc
06D8 120000    1930            lcall   _printf
06DB E581      1931            mov     a,sp
06DD 24FA      1932            add     a,#0xfa
06DF F581      1933            mov     sp,a
06E1 D003      1934            pop     ar3
06E3 D002      1935            pop     ar2
06E5 020000    1936            ljmp    L028013?
06E8           1937            rseg R_CSEG
06E8           1938   
0000           1939            rseg R_XINIT
0000           1940   
0000           1941            rseg R_CONST
0000           1942   __str_0:
0000 436F6D6D  1943            db 'Command: %s'
     616E643A
     202573
000B 00        1944            db 0x00
000C           1945   __str_1:
000C 52657370  1946            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1947            db 0x0D
0019 0A        1948            db 0x0A
001A 00        1949            db 0x00
001B           1950   __str_2:
001B 0D        1951            db 0x0D
001C 0A        1952            db 0x0A
001D 4A44592D  1953            db 'JDY-40 test'
     34302074
     657374
0028 0D        1954            db 0x0D
0029 0A        1955            db 0x0A
002A 00        1956            db 0x00
002B           1957   __str_3:
002B 41542B44  1958            db 'AT+DVID9944'
     56494439
     393434
0036 0D        1959            db 0x0D
0037 0A        1960            db 0x0A
0038 00        1961            db 0x00
0039           1962   __str_4:
0039 41542B56  1963            db 'AT+VER'
     4552
003F 0D        1964            db 0x0D
0040 0A        1965            db 0x0A
0041 00        1966            db 0x00
0042           1967   __str_5:
0042 41542B42  1968            db 'AT+BAUD'
     415544
0049 0D        1969            db 0x0D
004A 0A        1970            db 0x0A
004B 00        1971            db 0x00
004C           1972   __str_6:
004C 41542B52  1973            db 'AT+RFID'
     464944
0053 0D        1974            db 0x0D
0054 0A        1975            db 0x0A
0055 00        1976            db 0x00
0056           1977   __str_7:
0056 41542B44  1978            db 'AT+DVID'
     564944
005D 0D        1979            db 0x0D
005E 0A        1980            db 0x0A
005F 00        1981            db 0x00
0060           1982   __str_8:
0060 41542B52  1983            db 'AT+RFC'
     4643
0066 0D        1984            db 0x0D
0067 0A        1985            db 0x0A
0068 00        1986            db 0x00
0069           1987   __str_9:
0069 41542B50  1988            db 'AT+POWE'
     4F5745
0070 0D        1989            db 0x0D
0071 0A        1990            db 0x0A
0072 00        1991            db 0x00
0073           1992   __str_10:
0073 41542B43  1993            db 'AT+CLSS'
     4C5353
007A 0D        1994            db 0x0D
007B 0A        1995            db 0x0A
007C 00        1996            db 0x00
007D           1997   __str_11:
007D 0D        1998            db 0x0D
007E 0A        1999            db 0x0A
007F 50726573  2000            db 'Press and hold the BOOT button to transmit.'
     7320616E
     6420686F
     6C642074
     68652042
     4F4F5420
     62757474
     6F6E2074
     6F207472
     616E736D
     69742E
00AA 0D        2001            db 0x0D
00AB 0A        2002            db 0x0A
00AC 00        2003            db 0x00
00AD           2004   __str_12:
00AD 25642C25  2005            db '%d,%d'
     64
00B2 0D        2006            db 0x0D
00B3 0A        2007            db 0x0A
00B4 00        2008            db 0x00
00B5           2009   __str_13:
00B5 4A445934  2010            db 'JDY40 test %d'
     30207465
     73742025
     64
00C2 0D        2011            db 0x0D
00C3 0A        2012            db 0x0A
00C4 00        2013            db 0x00
00C5           2014   __str_14:
00C5 2573      2015            db '%s'
00C7 0D        2016            db 0x0D
00C8 0A        2017            db 0x0A
00C9 00        2018            db 0x00
00CA           2019   
0003           2020            CSEG
0003           2021   
0003           2022   end
